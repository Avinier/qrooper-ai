AST for temp_dir\ARTGuru-AI-main\app\components\Dashboard\ChartComponents.tsx
==================================================
ERROR [import {  useEffect } from 'react';
import { RadarChart, PolarGrid, PolarAngleAxis, 
         PolarRadiusAxis, Radar} from 'recharts';

// Utility functions for generating random numbers
const randomInRange = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
const randomDecimal = (min, max) => Number((Math.random() * (max - min) + min).toFixed(1));

// 1. Performance Radar Data
const generateRadarData = () => ([
  { metric: 'Engagement', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Reach', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Clicks', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Conversions', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Shares', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) }
]);

// 2. Time Patterns Data
const generateTimePatternData = () => ([
  { time: '00:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '04:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '08:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '12:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '16:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '20:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }
]);

// 3. Platform Performance Data
const generatePlatformData = () => ([
  { date: '2024-01', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-02', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-03', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-04', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-05', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) }
]);

// 4. CTA Funnel Data
const generateFunnelData = () => {
  const baseValue = randomInRange(800, 1200);
  const dropRate = 0.7; // Each stage reduces by ~30%
  return [
    { stage: 'Impressions', value: baseValue, competitorValue: Math.round(baseValue * 0.8) },
    { stage: 'Clicks', value: Math.round(baseValue * dropRate), competitorValue: Math.round(baseValue * dropRate * 0.8) },
    { stage: 'Sign-ups', value: Math.round(baseValue * dropRate * dropRate), competitorValue: Math.round(baseValue * dropRate * dropRate * 0.8) },
    { stage: 'Purchases', value: Math.round(baseValue * Math.pow(dropRate, 3)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 3) * 0.8) },
    { stage: 'Retention', value: Math.round(baseValue * Math.pow(dropRate, 4)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 4) * 0.8) }
  ];
};

// 5. ROI Comparison Data
const generateROIData = () => ([
  { month: 'Jan', ...generateMonthlyROI() },
  { month: 'Feb', ...generateMonthlyROI() },
  { month: 'Mar', ...generateMonthlyROI() },
  { month: 'Apr', ...generateMonthlyROI() },
  { month: 'May', ...generateMonthlyROI() }
]);

// Helper function for ROI data generation
const generateMonthlyROI = () => {
  const cost = randomInRange(300, 600);
  const revenue = cost + randomInRange(100, 400);
  const profit = revenue - cost;
  const competitorCost = cost + randomInRange(-50, 50);
  const competitorRevenue = competitorCost + randomInRange(50, 350);
  const competitorProfit = competitorRevenue - competitorCost;
  return {
    cost,
    revenue,
    profit,
    competitorCost,
    competitorRevenue,
    competitorProfit
  };
};

export const PerformanceRadar = ({ showCompetitor = false }) => {
  const [activeRadar, setActiveRadar] = useState(null);
  const [data, setData] = useState([]);

  useEffect(() => {
    setData(generateRadarData());
  }, []);

  const handleMouseEnter = (platform) => {
    setActiveRadar(platform);
  };

  const handleMouseLeave = () => {
    setActiveRadar(null);
  };

  return (
    <div className="h-96 w-full">
      <ResponsiveContainer width="100%" height="100%">
        <RadarChart cx="50%" cy="50%" outerRadius="80%" data={data}>
          <PolarGrid strokeDasharray="3 3" />
          <PolarAngleAxis
            dataKey="metric"
            tick={{ fill: '#666', fontSize: 14 }}
          />
          <PolarRadiusAxis angle={30} domain={[0, 150]} />
          
          <Tooltip 
            animationDuration={200}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '6px',
              padding: '8px',
              border: '1px solid #ccc'
            }}
          />
          
          <Legend
            wrapperStyle={{
              paddingTop: '20px'
            }}
            onMouseEnter={(entry) => handleMouseEnter(entry.dataKey)}
            onMouseLeave={handleMouseLeave}
          />

          <Radar
            name="YouTube"
            dataKey="A"
            stroke="#F0B28A"
            fill="#F0B28A"
            fillOpacity={activeRadar && activeRadar !== 'A' ? 0.2 : 0.6}
            strokeWidth={activeRadar === 'A' ? 3 : 1}
            onMouseEnter={() => handleMouseEnter('A')}
            onMouseLeave={handleMouseLeave}
            animationBegin={0}
            animationDuration={500}
            animationEasing="linear"
          />

          <Radar
            name="Instagram"
            dataKey="B"
            stroke="#8A8FF0"
            fill="#8A8FF0"
            fillOpacity={activeRadar && activeRadar !== 'B' ? 0.2 : 0.6}
            strokeWidth={activeRadar === 'B' ? 3 : 1}
            onMouseEnter={() => handleMouseEnter('B')}
            onMouseLeave={handleMouseLeave}
            animationBegin={0}
            animationDuration={500}
            animationEasing="linear"
          />

          {showCompetitor && (
            <>
              <Radar
                name="Competitor YouTube"
                dataKey="CompA"
                stroke="#FF4D4D"
                fill="#FF4D4D"
                fillOpacity={activeRadar && activeRadar !== 'CompA' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompA' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompA')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"
              />
              
              <Radar
                name="Competitor Instagram"
                dataKey="CompB"
                stroke="#FF8080"
                fill="#FF8080"
                fillOpacity={activeRadar && activeRadar !== 'CompB' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompB' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompB')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"
              />
            </>
          )}
        </RadarChart>
      </ResponsiveContainer>
    </div>
  );
};

    import React, { useState } from 'react';
    import {
      ResponsiveContainer,
      ComposedChart,
      LineChart,
      Area,
      Scatter,
      Line,
      XAxis,
      YAxis,
      CartesianGrid,
      Tooltip,
      Legend,
      TooltipProps
    } from 'recharts';
    import { NameType, ValueType } from 'recharts/types/component/DefaultTooltipContent';
    
    // Types for data structures
    interface TimePatternData {
      time: string;
      engagement: number;
      viral: number;
      competitorEngagement?: number;
      competitorViral?: number;
    }
    
    // Custom Tooltip Component
    const CustomTooltip = ({
      active,
      payload,
      label
    }: TooltipProps<ValueType, NameType>) => {
      if (active && payload && payload.length) {
        return (
          <div className="bg-white/90 rounded-lg p-4 shadow-lg border border-gray-200">
            <p className="font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))}
          </div>
        );
      }
      return null;
    };
    
    interface TimePatternProps {
      showCompetitor?: boolean;
    }
    
    export const TimePatterns: React.FC<TimePatternProps> = ({ showCompetitor = false }) => {
      const [activeType, setActiveType] = useState<string | null>(null);
      const [data, setData] = useState<TimePatternData[]>([]);
    
      useEffect(() => {
        setData(generateTimePatternData());
      }, []);
    
      const handleMouseEnter = (type: string) => {
        setActiveType(type);
      };
    
      const handleMouseLeave = () => {
        setActiveType(null);
      };
    
      return (
        <div className="h-96 w-full">
          <ResponsiveContainer width="100%" height="100%">
            <ComposedChart data={data}>
              <defs>
                <linearGradient id="engagementGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#E98AF0" stopOpacity={0.8}/>
                  <stop offset="95%" stopColor="#E98AF0" stopOpacity={0.2}/>
                </linearGradient>
                <linearGradient id="competitorEngagementGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#FF0000" stopOpacity={0.8}/>
                  <stop offset="95%" stopColor="#FF0000" stopOpacity={0.2}/>
                </linearGradient>
              </defs>
              
              <CartesianGrid strokeDasharray="3 3" opacity={0.8} />
              <XAxis 
                dataKey="time" 
                tick={{ fill: '#666' }} 
                axisLine={{ stroke: '#999' }} 
              />
              <YAxis 
                tick={{ fill: '#666' }} 
                axisLine={{ stroke: '#999' }} 
              />
              
              <Tooltip content={<CustomTooltip />} />
              
              <Legend 
                onMouseEnter={(e) => handleMouseEnter(e.dataKey)}
                onMouseLeave={handleMouseLeave}
              />
              
              <Area 
                type="monotone" 
                dataKey="engagement" 
                name="Engagement"
                fill="url(#engagementGradient)"
                stroke="#E98AF0"
                strokeWidth={activeType === 'engagement' ? 3 : 1}
                fillOpacity={activeType === 'viral' ? 0.3 : 1}
                animationBegin={0}
                animationDuration={800}
                animationEasing="ease-in-out"
                isAnimationActive={true}
              />
              
              {showCompetitor && (
                <Area 
                  type="monotone" 
                  dataKey="competitorEngagement" 
                  name="Competitor Engagement"
                  fill="url(#competitorEngagementGradient)"
                  stroke="#FF0000"
                  strokeWidth={activeType === 'competitorEngagement' ? 3 : 1}
                  fillOpacity={activeType === 'viral' ? 0.3 : 0.6}
                  animationBegin={0}
                  animationDuration={800}
                  animationEasing="ease-in-out"
                  isAnimationActive={true}
                />
              )}
              
              <Scatter 
                dataKey="viral" 
                name="Viral"
                fill="#8A8FF0"
                stroke="#8A8FF0"
                strokeWidth={activeType === 'viral' ? 2 : 0}
                r={activeType === 'viral' ? 8 : 6}
                fillOpacity={activeType === 'engagement' ? 0.3 : 0.8}
                animationBegin={800}
                animationDuration={400}
                isAnimationActive={true}
              />
              
              {showCompetitor && (
                <Scatter 
                  dataKey="competitorViral" 
                  name="Competitor Viral"
                  fill="#FF0000"
                  stroke="#FF0000"
                  strokeWidth={activeType === 'competitorViral' ? 2 : 0}
                  r={activeType === 'competitorViral' ? 8 : 6}
                  fillOpacity={activeType === 'engagement' ? 0.3 : 0.8}
                  animationBegin={800}
                  animationDuration={400}
                  isAnimationActive={true}
                />
              )}
            </ComposedChart>
          </ResponsiveContainer>
        </div>
      );
    };

    interface PlatformData {
      date: string;
      youtube: number;
      instagram: number;
      reddit: number;
      competitorYoutube?: number;
      competitorInstagram?: number;
    }
    
    interface PlatformPerformanceProps {
      showCompetitor?: boolean;
    }
    
    export const PlatformPerformance: React.FC<PlatformPerformanceProps> = ({ 
      showCompetitor = false 
    }) => {
      const [activePlatform, setActivePlatform] = useState<string | null>(null);
      const [data, setData] = useState<PlatformData[]>([]);
    
      useEffect(() => {
        setData(generatePlatformData());
      }, []);
    
      const handleMouseEnter = (platform: string) => {
        setActivePlatform(platform);
      };
    
      const handleMouseLeave = () => {
        setActivePlatform(null);
      };
    
      return (
        <div className="h-96 w-full">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data}>
              <CartesianGrid strokeDasharray="3 3" opacity={0.7} />
              
              <XAxis 
                dataKey="date" 
                tick={{ fill: '#666' }}
                tickFormatter={(value) => {
                  const date = new Date(value);
                  return date.toLocaleDateString('default', { month: 'short' });
                }}
              />
              
              <YAxis 
                tick={{ fill: '#666' }} 
                width={40}
              />
              
              <Tooltip 
                animationDuration={200}
                contentStyle={{
                  backgroundColor: 'rgba(255, 255, 255, 0.9)',
                  borderRadius: '6px',
                  padding: '8px',
                  border: '1px solid #ccc'
                }}
                formatter={(value: number) => new Intl.NumberFormat().format(value)}
              />
              
              <Legend 
                onMouseEnter={(e) => handleMouseEnter(e.dataKey)}
                onMouseLeave={handleMouseLeave}
                wrapperStyle={{
                  paddingTop: '12px'
                }}
              />
              
              <Line 
                type="monotone" 
                dataKey="youtube" 
                name="YouTube"
                stroke="#F0B28A"
                strokeWidth={activePlatform === 'youtube' ? 3 : 1.5}
                dot={{ r: activePlatform === 'youtube' ? 5 : 3 }}
                opacity={!activePlatform || activePlatform === 'youtube' ? 1 : 0.3}
                animationBegin={0}
                animationDuration={600}
                animationEasing="ease-in-out"
              />
              
              {showCompetitor && (
                <Line 
                  type="monotone" 
                  dataKey="competitorYoutube" 
                  name="Competitor YouTube"
                  stroke="#FF0000"
                  strokeWidth={activePlatform === 'competitorYoutube' ? 3 : 1.5}
                  dot={{ r: activePlatform === 'competitorYoutube' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorYoutube' ? 1 : 0.3}
                  animationBegin={0}
                  animationDuration={600}
                  animationEasing="ease-in-out"
                />
              )}
              
              <Line 
                type="monotone" 
                dataKey="instagram" 
                name="Instagram"
                stroke="#8A8FF0"
                strokeWidth={activePlatform === 'instagram' ? 3 : 1.5}
                dot={{ r: activePlatform === 'instagram' ? 5 : 3 }}
                opacity={!activePlatform || activePlatform === 'instagram' ? 1 : 0.3}
                animationBegin={200}
                animationDuration={600}
                animationEasing="ease-in-out"
              />
              
              {showCompetitor && (
                <Line 
                  type="monotone" 
                  dataKey="competitorInstagram" 
                  name="Competitor Instagram"
                  stroke="#FF6666"
                  strokeWidth={activePlatform === 'competitorInstagram' ? 3 : 1.5}
                  dot={{ r: activePlatform === 'competitorInstagram' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorInstagram' ? 1 : 0.3}
                  animationBegin={200}
                  animationDuration={600}
                  animationEasing="ease-in-out"
                />
              )}
              
              <Line 
                type="monotone" 
                dataKey="reddit" 
                name="Reddit"
                stroke="#E98AF0"
                strokeWidth={activePlatform === 'reddit' ? 3 : 1.5}
                dot={{ r: activePlatform === 'reddit' ? 5 : 3 }}
                opacity={!activePlatform || activePlatform === 'reddit' ? 1 : 0.3}
                animationBegin={400}
                animationDuration={600}
                animationEasing="ease-in-out"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      );
    };

import { BarChart, Bar } from 'recharts';

interface FunnelData {
  stage: string;
  value: number;
  competitorValue?: number;
}

interface ROIData {
  month: string;
  cost: number;
  revenue: number;
  profit: number;
  competitorCost?: number;
  competitorRevenue?: number;
  competitorProfit?: number;
}

interface ComponentProps {
  showCompetitor?: boolean;
}

export const CTAFunnel: React.FC<ComponentProps> = ({ showCompetitor = false }) => {
  const [activeBar, setActiveBar] = useState<number | null>(null);
  const [data, setData] = useState<FunnelData[]>([]);

  useEffect(() => {
    setData(generateFunnelData());
  }, []);

  return (
    <div className="h-96 w-full">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart
          data={data}
          layout="vertical"
          margin={{ top: 20, right: 30, left: 100, bottom: 5 }}
        >
          <defs>
            <linearGradient id="funnelGradient" x1="0" y1="0" x2="1" y2="0">
              <stop offset="0%" stopColor="#F0B28A" stopOpacity={0.9} />
              <stop offset="100%" stopColor="#F0D28A" stopOpacity={0.9} />
            </linearGradient>
            <linearGradient id="competitorGradient" x1="0" y1="0" x2="1" y2="0">
              <stop offset="0%" stopColor="#FF6B6B" stopOpacity={0.9} />
              <stop offset="100%" stopColor="#FF8585" stopOpacity={0.9} />
            </linearGradient>
          </defs>
          
          <CartesianGrid strokeDasharray="3 3" opacity={0.7} />
          <XAxis type="number" tick={{ fill: '#666' }} axisLine={{ stroke: '#999' }} />
          <YAxis dataKey="stage" type="category" tick={{ fill: '#666' }} axisLine={{ stroke: '#999' }} />
          
          <Tooltip 
            cursor={{ fill: 'rgba(240,178,138,0.1)' }}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '6px',
              padding: '8px',
              border: '1px solid #ccc'
            }}
          />
          
          <Legend />
          
          <Bar 
            name="Our Metrics"
            dataKey="value" 
            fill="url(#funnelGradient)"
            onMouseEnter={(data, index) => setActiveBar(index)}
            onMouseLeave={() => setActiveBar(null)}
            animationBegin={0}
            animationDuration={800}
            animationEasing="ease-out"
          />
          
          {showCompetitor && (
            <Bar 
              name="Competitor Metrics"
              dataKey="competitorValue" 
              fill="url(#competitorGradient)"
              onMouseEnter={(data, index) => setActiveBar(index)}
              onMouseLeave={() => setActiveBar(null)}
              animationBegin={200}
              animationDuration={800}
              animationEasing="ease-out"
            />
          )}
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export const ROIComparison: React.FC<ComponentProps> = ({ showCompetitor = false }) => {
  const [activeType, setActiveType] = useState<string | null>(null);
  const [data, setData] = useState<ROIData[]>([]);

  useEffect(() => {
    setData(generateROIData());
  }, []);

  const handleMouseEnter = (type: string) => {
    setActiveType(type);
  };

  const handleMouseLeave = () => {
    setActiveType(null);
  };

  return (
    <div className="h-96 w-full">
      <ResponsiveContainer width="100%" height="100%">
        <ComposedChart data={data}>
          <defs>
            {/* Gradient definitions remain the same */}
            <linearGradient id="costGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#96F0A3" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#8AF096" stopOpacity={0.3}/>
            </linearGradient>
            <linearGradient id="profitGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#F0EC8A" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#ECF08A" stopOpacity={0.2}/>
            </linearGradient>
            <linearGradient id="competitorCostGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#FF6B6B" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#FF8585" stopOpacity={0.3}/>
            </linearGradient>
            <linearGradient id="competitorProfitGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#FF9999" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#FFACAC" stopOpacity={0.2}/>
            </linearGradient>
          </defs>
          
          <CartesianGrid strokeDasharray="3 3" opacity={0.7} />
          <XAxis dataKey="month" tick={{ fill: '#666' }} />
          <YAxis tick={{ fill: '#666' }} />
          
          <Tooltip 
            animationDuration={200}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '6px',
              padding: '8px',
              border: '1px solid #ccc'
            }}
          />
          
          <Legend 
            onMouseEnter={(e) => handleMouseEnter(e.dataKey)}
            onMouseLeave={handleMouseLeave}
            wrapperStyle={{ paddingTop: '12px' }}
          />

          {/* Base metrics */}
          <Bar 
            name="Our Cost"
            dataKey="cost" 
            fill="url(#costGradient)"
            opacity={!activeType || activeType === 'cost' ? 1 : 0.3}
            animationBegin={0}
            animationDuration={600}
            animationEasing="ease-out"
          />
          
          <Line 
            name="Our Revenue"
            type="monotone" 
            dataKey="revenue" 
            stroke="#8A8FF0"
            strokeWidth={activeType === 'revenue' ? 3 : 1.5}
            dot={{ r: activeType === 'revenue' ? 5 : 3 }}
            opacity={!activeType || activeType === 'revenue' ? 1 : 0.3}
            animationBegin={400}
            animationDuration={600}
            animationEasing="ease-in-out"
          />
          
          <Area 
            name="Our Profit"
            type="monotone" 
            dataKey="profit" 
            fill="url(#profitGradient)"
            stroke="#ECF08A"
            strokeWidth={activeType === 'profit' ? 2 : 1}
            fillOpacity={activeType === 'profit' ? 1 : !activeType ? 0.8 : 0.3}
            animationBegin={800}
            animationDuration={600}
            animationEasing="ease-in-out"
          />

          {/* Competitor metrics */}
          {showCompetitor && (
            <>
              <Bar 
                name="Competitor Cost"
                dataKey="competitorCost" 
                fill="url(#competitorCostGradient)"
                opacity={!activeType || activeType === 'competitorCost' ? 1 : 0.3}
                animationBegin={200}
                animationDuration={600}
                animationEasing="ease-out"
              />
              
              <Line 
                name="Competitor Revenue"
                type="monotone" 
                dataKey="competitorRevenue" 
                stroke="#FF4D4D"
                strokeWidth={activeType === 'competitorRevenue' ? 3 : 1.5}
                dot={{ r: activeType === 'competitorRevenue' ? 5 : 3 }}
                opacity={!activeType || activeType === 'competitorRevenue' ? 1 : 0.3}
                animationBegin={600}
                animationDuration={600}
                animationEasing="ease-in-out"
              />
              
              <Area 
                name="Competitor Profit"
                type="monotone" 
                dataKey="competitorProfit" 
                fill="url(#competitorProfitGradient)"
                stroke="#FF6666"
                strokeWidth={activeType === 'competitorProfit' ? 2 : 1}
                fillOpacity={activeType === 'competitorProfit' ? 1 : !activeType ? 0.8 : 0.3}
                animationBegin={1000}
                animationDuration={600}
                animationEasing="ease-in-out"
              />
            </>
          )}
        </ComposedChart>
      </ResponsiveContainer>
    </div>
  );
};
] (0:0-736:0)
  import_statement [import {  useEffect } from 'react';] (0:0-0:35)
    import [import] (0:0-0:6)
    import_clause [{  useEffect }] (0:7-0:21)
      named_imports [{  useEffect }] (0:7-0:21)
        { [{] (0:7-0:8)
        import_specifier [useEffect] (0:10-0:19)
          identifier [useEffect] (0:10-0:19)
        } [}] (0:20-0:21)
    from [from] (0:22-0:26)
    string ['react'] (0:27-0:34)
      ' ['] (0:27-0:28)
      string_fragment [react] (0:28-0:33)
      ' ['] (0:33-0:34)
    ; [;] (0:34-0:35)
  import_statement [import { RadarChart, PolarGrid, PolarAngleAxis, 
         PolarRadiusAxis, Radar} from 'recharts';] (1:0-2:49)
    import [import] (1:0-1:6)
    import_clause [{ RadarChart, PolarGrid, PolarAngleAxis, 
         PolarRadiusAxis, Radar}] (1:7-2:32)
      named_imports [{ RadarChart, PolarGrid, PolarAngleAxis, 
         PolarRadiusAxis, Radar}] (1:7-2:32)
        { [{] (1:7-1:8)
        import_specifier [RadarChart] (1:9-1:19)
          identifier [RadarChart] (1:9-1:19)
        , [,] (1:19-1:20)
        import_specifier [PolarGrid] (1:21-1:30)
          identifier [PolarGrid] (1:21-1:30)
        , [,] (1:30-1:31)
        import_specifier [PolarAngleAxis] (1:32-1:46)
          identifier [PolarAngleAxis] (1:32-1:46)
        , [,] (1:46-1:47)
        import_specifier [PolarRadiusAxis] (2:9-2:24)
          identifier [PolarRadiusAxis] (2:9-2:24)
        , [,] (2:24-2:25)
        import_specifier [Radar] (2:26-2:31)
          identifier [Radar] (2:26-2:31)
        } [}] (2:31-2:32)
    from [from] (2:33-2:37)
    string ['recharts'] (2:38-2:48)
      ' ['] (2:38-2:39)
      string_fragment [recharts] (2:39-2:47)
      ' ['] (2:47-2:48)
    ; [;] (2:48-2:49)
  comment [// Utility functions for generating random numbers] (4:0-4:50)
  lexical_declaration [const randomInRange = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;] (5:0-5:86)
    const [const] (5:0-5:5)
    variable_declarator [randomInRange = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min] (5:6-5:85)
      identifier [randomInRange] (5:6-5:19)
      = [=] (5:20-5:21)
      arrow_function [(min, max) => Math.floor(Math.random() * (max - min + 1)) + min] (5:22-5:85)
        formal_parameters [(min, max)] (5:22-5:32)
          ( [(] (5:22-5:23)
          required_parameter [min] (5:23-5:26)
            identifier [min] (5:23-5:26)
          , [,] (5:26-5:27)
          required_parameter [max] (5:28-5:31)
            identifier [max] (5:28-5:31)
          ) [)] (5:31-5:32)
        => [=>] (5:33-5:35)
        binary_expression [Math.floor(Math.random() * (max - min + 1)) + min] (5:36-5:85)
          call_expression [Math.floor(Math.random() * (max - min + 1))] (5:36-5:79)
            member_expression [Math.floor] (5:36-5:46)
              identifier [Math] (5:36-5:40)
              . [.] (5:40-5:41)
              property_identifier [floor] (5:41-5:46)
            arguments [(Math.random() * (max - min + 1))] (5:46-5:79)
              ( [(] (5:46-5:47)
              binary_expression [Math.random() * (max - min + 1)] (5:47-5:78)
                call_expression [Math.random()] (5:47-5:60)
                  member_expression [Math.random] (5:47-5:58)
                    identifier [Math] (5:47-5:51)
                    . [.] (5:51-5:52)
                    property_identifier [random] (5:52-5:58)
                  arguments [()] (5:58-5:60)
                    ( [(] (5:58-5:59)
                    ) [)] (5:59-5:60)
                * [*] (5:61-5:62)
                parenthesized_expression [(max - min + 1)] (5:63-5:78)
                  ( [(] (5:63-5:64)
                  binary_expression [max - min + 1] (5:64-5:77)
                    binary_expression [max - min] (5:64-5:73)
                      identifier [max] (5:64-5:67)
                      - [-] (5:68-5:69)
                      identifier [min] (5:70-5:73)
                    + [+] (5:74-5:75)
                    number [1] (5:76-5:77)
                  ) [)] (5:77-5:78)
              ) [)] (5:78-5:79)
          + [+] (5:80-5:81)
          identifier [min] (5:82-5:85)
    ; [;] (5:85-5:86)
  lexical_declaration [const randomDecimal = (min, max) => Number((Math.random() * (max - min) + min).toFixed(1));] (6:0-6:91)
    const [const] (6:0-6:5)
    variable_declarator [randomDecimal = (min, max) => Number((Math.random() * (max - min) + min).toFixed(1))] (6:6-6:90)
      identifier [randomDecimal] (6:6-6:19)
      = [=] (6:20-6:21)
      arrow_function [(min, max) => Number((Math.random() * (max - min) + min).toFixed(1))] (6:22-6:90)
        formal_parameters [(min, max)] (6:22-6:32)
          ( [(] (6:22-6:23)
          required_parameter [min] (6:23-6:26)
            identifier [min] (6:23-6:26)
          , [,] (6:26-6:27)
          required_parameter [max] (6:28-6:31)
            identifier [max] (6:28-6:31)
          ) [)] (6:31-6:32)
        => [=>] (6:33-6:35)
        call_expression [Number((Math.random() * (max - min) + min).toFixed(1))] (6:36-6:90)
          identifier [Number] (6:36-6:42)
          arguments [((Math.random() * (max - min) + min).toFixed(1))] (6:42-6:90)
            ( [(] (6:42-6:43)
            call_expression [(Math.random() * (max - min) + min).toFixed(1)] (6:43-6:89)
              member_expression [(Math.random() * (max - min) + min).toFixed] (6:43-6:86)
                parenthesized_expression [(Math.random() * (max - min) + min)] (6:43-6:78)
                  ( [(] (6:43-6:44)
                  binary_expression [Math.random() * (max - min) + min] (6:44-6:77)
                    binary_expression [Math.random() * (max - min)] (6:44-6:71)
                      call_expression [Math.random()] (6:44-6:57)
                        member_expression [Math.random] (6:44-6:55)
                          identifier [Math] (6:44-6:48)
                          . [.] (6:48-6:49)
                          property_identifier [random] (6:49-6:55)
                        arguments [()] (6:55-6:57)
                          ( [(] (6:55-6:56)
                          ) [)] (6:56-6:57)
                      * [*] (6:58-6:59)
                      parenthesized_expression [(max - min)] (6:60-6:71)
                        ( [(] (6:60-6:61)
                        binary_expression [max - min] (6:61-6:70)
                          identifier [max] (6:61-6:64)
                          - [-] (6:65-6:66)
                          identifier [min] (6:67-6:70)
                        ) [)] (6:70-6:71)
                    + [+] (6:72-6:73)
                    identifier [min] (6:74-6:77)
                  ) [)] (6:77-6:78)
                . [.] (6:78-6:79)
                property_identifier [toFixed] (6:79-6:86)
              arguments [(1)] (6:86-6:89)
                ( [(] (6:86-6:87)
                number [1] (6:87-6:88)
                ) [)] (6:88-6:89)
            ) [)] (6:89-6:90)
    ; [;] (6:90-6:91)
  comment [// 1. Performance Radar Data] (8:0-8:28)
  lexical_declaration [const generateRadarData = () => ([
  { metric: 'Engagement', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Reach', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Clicks', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Conversions', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Shares', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) }
]);] (9:0-15:3)
    const [const] (9:0-9:5)
    variable_declarator [generateRadarData = () => ([
  { metric: 'Engagement', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Reach', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Clicks', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Conversions', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Shares', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) }
])] (9:6-15:2)
      identifier [generateRadarData] (9:6-9:23)
      = [=] (9:24-9:25)
      arrow_function [() => ([
  { metric: 'Engagement', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Reach', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Clicks', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Conversions', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Shares', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) }
])] (9:26-15:2)
        formal_parameters [()] (9:26-9:28)
          ( [(] (9:26-9:27)
          ) [)] (9:27-9:28)
        => [=>] (9:29-9:31)
        parenthesized_expression [([
  { metric: 'Engagement', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Reach', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Clicks', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Conversions', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Shares', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) }
])] (9:32-15:2)
          ( [(] (9:32-9:33)
          array [[
  { metric: 'Engagement', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Reach', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Clicks', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Conversions', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) },
  { metric: 'Shares', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) }
]] (9:33-15:1)
            [ [[] (9:33-9:34)
            object [{ metric: 'Engagement', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) }] (10:2-10:142)
              { [{] (10:2-10:3)
              pair [metric: 'Engagement'] (10:4-10:24)
                property_identifier [metric] (10:4-10:10)
                : [:] (10:10-10:11)
                string ['Engagement'] (10:12-10:24)
                  ' ['] (10:12-10:13)
                  string_fragment [Engagement] (10:13-10:23)
                  ' ['] (10:23-10:24)
              , [,] (10:24-10:25)
              pair [A: randomInRange(80, 140)] (10:26-10:51)
                property_identifier [A] (10:26-10:27)
                : [:] (10:27-10:28)
                call_expression [randomInRange(80, 140)] (10:29-10:51)
                  identifier [randomInRange] (10:29-10:42)
                  arguments [(80, 140)] (10:42-10:51)
                    ( [(] (10:42-10:43)
                    number [80] (10:43-10:45)
                    , [,] (10:45-10:46)
                    number [140] (10:47-10:50)
                    ) [)] (10:50-10:51)
              , [,] (10:51-10:52)
              pair [B: randomInRange(80, 140)] (10:53-10:78)
                property_identifier [B] (10:53-10:54)
                : [:] (10:54-10:55)
                call_expression [randomInRange(80, 140)] (10:56-10:78)
                  identifier [randomInRange] (10:56-10:69)
                  arguments [(80, 140)] (10:69-10:78)
                    ( [(] (10:69-10:70)
                    number [80] (10:70-10:72)
                    , [,] (10:72-10:73)
                    number [140] (10:74-10:77)
                    ) [)] (10:77-10:78)
              , [,] (10:78-10:79)
              pair [CompA: randomInRange(90, 150)] (10:80-10:109)
                property_identifier [CompA] (10:80-10:85)
                : [:] (10:85-10:86)
                call_expression [randomInRange(90, 150)] (10:87-10:109)
                  identifier [randomInRange] (10:87-10:100)
                  arguments [(90, 150)] (10:100-10:109)
                    ( [(] (10:100-10:101)
                    number [90] (10:101-10:103)
                    , [,] (10:103-10:104)
                    number [150] (10:105-10:108)
                    ) [)] (10:108-10:109)
              , [,] (10:109-10:110)
              pair [CompB: randomInRange(90, 150)] (10:111-10:140)
                property_identifier [CompB] (10:111-10:116)
                : [:] (10:116-10:117)
                call_expression [randomInRange(90, 150)] (10:118-10:140)
                  identifier [randomInRange] (10:118-10:131)
                  arguments [(90, 150)] (10:131-10:140)
                    ( [(] (10:131-10:132)
                    number [90] (10:132-10:134)
                    , [,] (10:134-10:135)
                    number [150] (10:136-10:139)
                    ) [)] (10:139-10:140)
              } [}] (10:141-10:142)
            , [,] (10:142-10:143)
            object [{ metric: 'Reach', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) }] (11:2-11:137)
              { [{] (11:2-11:3)
              pair [metric: 'Reach'] (11:4-11:19)
                property_identifier [metric] (11:4-11:10)
                : [:] (11:10-11:11)
                string ['Reach'] (11:12-11:19)
                  ' ['] (11:12-11:13)
                  string_fragment [Reach] (11:13-11:18)
                  ' ['] (11:18-11:19)
              , [,] (11:19-11:20)
              pair [A: randomInRange(80, 140)] (11:21-11:46)
                property_identifier [A] (11:21-11:22)
                : [:] (11:22-11:23)
                call_expression [randomInRange(80, 140)] (11:24-11:46)
                  identifier [randomInRange] (11:24-11:37)
                  arguments [(80, 140)] (11:37-11:46)
                    ( [(] (11:37-11:38)
                    number [80] (11:38-11:40)
                    , [,] (11:40-11:41)
                    number [140] (11:42-11:45)
                    ) [)] (11:45-11:46)
              , [,] (11:46-11:47)
              pair [B: randomInRange(80, 140)] (11:48-11:73)
                property_identifier [B] (11:48-11:49)
                : [:] (11:49-11:50)
                call_expression [randomInRange(80, 140)] (11:51-11:73)
                  identifier [randomInRange] (11:51-11:64)
                  arguments [(80, 140)] (11:64-11:73)
                    ( [(] (11:64-11:65)
                    number [80] (11:65-11:67)
                    , [,] (11:67-11:68)
                    number [140] (11:69-11:72)
                    ) [)] (11:72-11:73)
              , [,] (11:73-11:74)
              pair [CompA: randomInRange(90, 150)] (11:75-11:104)
                property_identifier [CompA] (11:75-11:80)
                : [:] (11:80-11:81)
                call_expression [randomInRange(90, 150)] (11:82-11:104)
                  identifier [randomInRange] (11:82-11:95)
                  arguments [(90, 150)] (11:95-11:104)
                    ( [(] (11:95-11:96)
                    number [90] (11:96-11:98)
                    , [,] (11:98-11:99)
                    number [150] (11:100-11:103)
                    ) [)] (11:103-11:104)
              , [,] (11:104-11:105)
              pair [CompB: randomInRange(90, 150)] (11:106-11:135)
                property_identifier [CompB] (11:106-11:111)
                : [:] (11:111-11:112)
                call_expression [randomInRange(90, 150)] (11:113-11:135)
                  identifier [randomInRange] (11:113-11:126)
                  arguments [(90, 150)] (11:126-11:135)
                    ( [(] (11:126-11:127)
                    number [90] (11:127-11:129)
                    , [,] (11:129-11:130)
                    number [150] (11:131-11:134)
                    ) [)] (11:134-11:135)
              } [}] (11:136-11:137)
            , [,] (11:137-11:138)
            object [{ metric: 'Clicks', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) }] (12:2-12:138)
              { [{] (12:2-12:3)
              pair [metric: 'Clicks'] (12:4-12:20)
                property_identifier [metric] (12:4-12:10)
                : [:] (12:10-12:11)
                string ['Clicks'] (12:12-12:20)
                  ' ['] (12:12-12:13)
                  string_fragment [Clicks] (12:13-12:19)
                  ' ['] (12:19-12:20)
              , [,] (12:20-12:21)
              pair [A: randomInRange(80, 140)] (12:22-12:47)
                property_identifier [A] (12:22-12:23)
                : [:] (12:23-12:24)
                call_expression [randomInRange(80, 140)] (12:25-12:47)
                  identifier [randomInRange] (12:25-12:38)
                  arguments [(80, 140)] (12:38-12:47)
                    ( [(] (12:38-12:39)
                    number [80] (12:39-12:41)
                    , [,] (12:41-12:42)
                    number [140] (12:43-12:46)
                    ) [)] (12:46-12:47)
              , [,] (12:47-12:48)
              pair [B: randomInRange(80, 140)] (12:49-12:74)
                property_identifier [B] (12:49-12:50)
                : [:] (12:50-12:51)
                call_expression [randomInRange(80, 140)] (12:52-12:74)
                  identifier [randomInRange] (12:52-12:65)
                  arguments [(80, 140)] (12:65-12:74)
                    ( [(] (12:65-12:66)
                    number [80] (12:66-12:68)
                    , [,] (12:68-12:69)
                    number [140] (12:70-12:73)
                    ) [)] (12:73-12:74)
              , [,] (12:74-12:75)
              pair [CompA: randomInRange(90, 150)] (12:76-12:105)
                property_identifier [CompA] (12:76-12:81)
                : [:] (12:81-12:82)
                call_expression [randomInRange(90, 150)] (12:83-12:105)
                  identifier [randomInRange] (12:83-12:96)
                  arguments [(90, 150)] (12:96-12:105)
                    ( [(] (12:96-12:97)
                    number [90] (12:97-12:99)
                    , [,] (12:99-12:100)
                    number [150] (12:101-12:104)
                    ) [)] (12:104-12:105)
              , [,] (12:105-12:106)
              pair [CompB: randomInRange(90, 150)] (12:107-12:136)
                property_identifier [CompB] (12:107-12:112)
                : [:] (12:112-12:113)
                call_expression [randomInRange(90, 150)] (12:114-12:136)
                  identifier [randomInRange] (12:114-12:127)
                  arguments [(90, 150)] (12:127-12:136)
                    ( [(] (12:127-12:128)
                    number [90] (12:128-12:130)
                    , [,] (12:130-12:131)
                    number [150] (12:132-12:135)
                    ) [)] (12:135-12:136)
              } [}] (12:137-12:138)
            , [,] (12:138-12:139)
            object [{ metric: 'Conversions', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) }] (13:2-13:143)
              { [{] (13:2-13:3)
              pair [metric: 'Conversions'] (13:4-13:25)
                property_identifier [metric] (13:4-13:10)
                : [:] (13:10-13:11)
                string ['Conversions'] (13:12-13:25)
                  ' ['] (13:12-13:13)
                  string_fragment [Conversions] (13:13-13:24)
                  ' ['] (13:24-13:25)
              , [,] (13:25-13:26)
              pair [A: randomInRange(80, 140)] (13:27-13:52)
                property_identifier [A] (13:27-13:28)
                : [:] (13:28-13:29)
                call_expression [randomInRange(80, 140)] (13:30-13:52)
                  identifier [randomInRange] (13:30-13:43)
                  arguments [(80, 140)] (13:43-13:52)
                    ( [(] (13:43-13:44)
                    number [80] (13:44-13:46)
                    , [,] (13:46-13:47)
                    number [140] (13:48-13:51)
                    ) [)] (13:51-13:52)
              , [,] (13:52-13:53)
              pair [B: randomInRange(80, 140)] (13:54-13:79)
                property_identifier [B] (13:54-13:55)
                : [:] (13:55-13:56)
                call_expression [randomInRange(80, 140)] (13:57-13:79)
                  identifier [randomInRange] (13:57-13:70)
                  arguments [(80, 140)] (13:70-13:79)
                    ( [(] (13:70-13:71)
                    number [80] (13:71-13:73)
                    , [,] (13:73-13:74)
                    number [140] (13:75-13:78)
                    ) [)] (13:78-13:79)
              , [,] (13:79-13:80)
              pair [CompA: randomInRange(90, 150)] (13:81-13:110)
                property_identifier [CompA] (13:81-13:86)
                : [:] (13:86-13:87)
                call_expression [randomInRange(90, 150)] (13:88-13:110)
                  identifier [randomInRange] (13:88-13:101)
                  arguments [(90, 150)] (13:101-13:110)
                    ( [(] (13:101-13:102)
                    number [90] (13:102-13:104)
                    , [,] (13:104-13:105)
                    number [150] (13:106-13:109)
                    ) [)] (13:109-13:110)
              , [,] (13:110-13:111)
              pair [CompB: randomInRange(90, 150)] (13:112-13:141)
                property_identifier [CompB] (13:112-13:117)
                : [:] (13:117-13:118)
                call_expression [randomInRange(90, 150)] (13:119-13:141)
                  identifier [randomInRange] (13:119-13:132)
                  arguments [(90, 150)] (13:132-13:141)
                    ( [(] (13:132-13:133)
                    number [90] (13:133-13:135)
                    , [,] (13:135-13:136)
                    number [150] (13:137-13:140)
                    ) [)] (13:140-13:141)
              } [}] (13:142-13:143)
            , [,] (13:143-13:144)
            object [{ metric: 'Shares', A: randomInRange(80, 140), B: randomInRange(80, 140), CompA: randomInRange(90, 150), CompB: randomInRange(90, 150) }] (14:2-14:138)
              { [{] (14:2-14:3)
              pair [metric: 'Shares'] (14:4-14:20)
                property_identifier [metric] (14:4-14:10)
                : [:] (14:10-14:11)
                string ['Shares'] (14:12-14:20)
                  ' ['] (14:12-14:13)
                  string_fragment [Shares] (14:13-14:19)
                  ' ['] (14:19-14:20)
              , [,] (14:20-14:21)
              pair [A: randomInRange(80, 140)] (14:22-14:47)
                property_identifier [A] (14:22-14:23)
                : [:] (14:23-14:24)
                call_expression [randomInRange(80, 140)] (14:25-14:47)
                  identifier [randomInRange] (14:25-14:38)
                  arguments [(80, 140)] (14:38-14:47)
                    ( [(] (14:38-14:39)
                    number [80] (14:39-14:41)
                    , [,] (14:41-14:42)
                    number [140] (14:43-14:46)
                    ) [)] (14:46-14:47)
              , [,] (14:47-14:48)
              pair [B: randomInRange(80, 140)] (14:49-14:74)
                property_identifier [B] (14:49-14:50)
                : [:] (14:50-14:51)
                call_expression [randomInRange(80, 140)] (14:52-14:74)
                  identifier [randomInRange] (14:52-14:65)
                  arguments [(80, 140)] (14:65-14:74)
                    ( [(] (14:65-14:66)
                    number [80] (14:66-14:68)
                    , [,] (14:68-14:69)
                    number [140] (14:70-14:73)
                    ) [)] (14:73-14:74)
              , [,] (14:74-14:75)
              pair [CompA: randomInRange(90, 150)] (14:76-14:105)
                property_identifier [CompA] (14:76-14:81)
                : [:] (14:81-14:82)
                call_expression [randomInRange(90, 150)] (14:83-14:105)
                  identifier [randomInRange] (14:83-14:96)
                  arguments [(90, 150)] (14:96-14:105)
                    ( [(] (14:96-14:97)
                    number [90] (14:97-14:99)
                    , [,] (14:99-14:100)
                    number [150] (14:101-14:104)
                    ) [)] (14:104-14:105)
              , [,] (14:105-14:106)
              pair [CompB: randomInRange(90, 150)] (14:107-14:136)
                property_identifier [CompB] (14:107-14:112)
                : [:] (14:112-14:113)
                call_expression [randomInRange(90, 150)] (14:114-14:136)
                  identifier [randomInRange] (14:114-14:127)
                  arguments [(90, 150)] (14:127-14:136)
                    ( [(] (14:127-14:128)
                    number [90] (14:128-14:130)
                    , [,] (14:130-14:131)
                    number [150] (14:132-14:135)
                    ) [)] (14:135-14:136)
              } [}] (14:137-14:138)
            ] []] (15:0-15:1)
          ) [)] (15:1-15:2)
    ; [;] (15:2-15:3)
  comment [// 2. Time Patterns Data] (17:0-17:24)
  lexical_declaration [const generateTimePatternData = () => ([
  { time: '00:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '04:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '08:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '12:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '16:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '20:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }
]);] (18:0-25:3)
    const [const] (18:0-18:5)
    variable_declarator [generateTimePatternData = () => ([
  { time: '00:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '04:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '08:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '12:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '16:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '20:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }
])] (18:6-25:2)
      identifier [generateTimePatternData] (18:6-18:29)
      = [=] (18:30-18:31)
      arrow_function [() => ([
  { time: '00:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '04:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '08:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '12:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '16:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '20:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }
])] (18:32-25:2)
        formal_parameters [()] (18:32-18:34)
          ( [(] (18:32-18:33)
          ) [)] (18:33-18:34)
        => [=>] (18:35-18:37)
        parenthesized_expression [([
  { time: '00:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '04:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '08:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '12:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '16:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '20:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }
])] (18:38-25:2)
          ( [(] (18:38-18:39)
          array [[
  { time: '00:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '04:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '08:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '12:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '16:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) },
  { time: '20:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }
]] (18:39-25:1)
            [ [[] (18:39-18:40)
            object [{ time: '00:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }] (19:2-19:185)
              { [{] (19:2-19:3)
              pair [time: '00:00'] (19:4-19:17)
                property_identifier [time] (19:4-19:8)
                : [:] (19:8-19:9)
                string ['00:00'] (19:10-19:17)
                  ' ['] (19:10-19:11)
                  string_fragment [00:00] (19:11-19:16)
                  ' ['] (19:16-19:17)
              , [,] (19:17-19:18)
              pair [engagement: randomInRange(1000, 3500)] (19:19-19:56)
                property_identifier [engagement] (19:19-19:29)
                : [:] (19:29-19:30)
                call_expression [randomInRange(1000, 3500)] (19:31-19:56)
                  identifier [randomInRange] (19:31-19:44)
                  arguments [(1000, 3500)] (19:44-19:56)
                    ( [(] (19:44-19:45)
                    number [1000] (19:45-19:49)
                    , [,] (19:49-19:50)
                    number [3500] (19:51-19:55)
                    ) [)] (19:55-19:56)
              , [,] (19:56-19:57)
              pair [viral: randomInRange(2000, 7000)] (19:58-19:90)
                property_identifier [viral] (19:58-19:63)
                : [:] (19:63-19:64)
                call_expression [randomInRange(2000, 7000)] (19:65-19:90)
                  identifier [randomInRange] (19:65-19:78)
                  arguments [(2000, 7000)] (19:78-19:90)
                    ( [(] (19:78-19:79)
                    number [2000] (19:79-19:83)
                    , [,] (19:83-19:84)
                    number [7000] (19:85-19:89)
                    ) [)] (19:89-19:90)
              , [,] (19:90-19:91)
              pair [competitorEngagement: randomInRange(1200, 3700)] (19:92-19:139)
                property_identifier [competitorEngagement] (19:92-19:112)
                : [:] (19:112-19:113)
                call_expression [randomInRange(1200, 3700)] (19:114-19:139)
                  identifier [randomInRange] (19:114-19:127)
                  arguments [(1200, 3700)] (19:127-19:139)
                    ( [(] (19:127-19:128)
                    number [1200] (19:128-19:132)
                    , [,] (19:132-19:133)
                    number [3700] (19:134-19:138)
                    ) [)] (19:138-19:139)
              , [,] (19:139-19:140)
              pair [competitorViral: randomInRange(2200, 7200)] (19:141-19:183)
                property_identifier [competitorViral] (19:141-19:156)
                : [:] (19:156-19:157)
                call_expression [randomInRange(2200, 7200)] (19:158-19:183)
                  identifier [randomInRange] (19:158-19:171)
                  arguments [(2200, 7200)] (19:171-19:183)
                    ( [(] (19:171-19:172)
                    number [2200] (19:172-19:176)
                    , [,] (19:176-19:177)
                    number [7200] (19:178-19:182)
                    ) [)] (19:182-19:183)
              } [}] (19:184-19:185)
            , [,] (19:185-19:186)
            object [{ time: '04:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }] (20:2-20:185)
              { [{] (20:2-20:3)
              pair [time: '04:00'] (20:4-20:17)
                property_identifier [time] (20:4-20:8)
                : [:] (20:8-20:9)
                string ['04:00'] (20:10-20:17)
                  ' ['] (20:10-20:11)
                  string_fragment [04:00] (20:11-20:16)
                  ' ['] (20:16-20:17)
              , [,] (20:17-20:18)
              pair [engagement: randomInRange(1000, 3500)] (20:19-20:56)
                property_identifier [engagement] (20:19-20:29)
                : [:] (20:29-20:30)
                call_expression [randomInRange(1000, 3500)] (20:31-20:56)
                  identifier [randomInRange] (20:31-20:44)
                  arguments [(1000, 3500)] (20:44-20:56)
                    ( [(] (20:44-20:45)
                    number [1000] (20:45-20:49)
                    , [,] (20:49-20:50)
                    number [3500] (20:51-20:55)
                    ) [)] (20:55-20:56)
              , [,] (20:56-20:57)
              pair [viral: randomInRange(2000, 7000)] (20:58-20:90)
                property_identifier [viral] (20:58-20:63)
                : [:] (20:63-20:64)
                call_expression [randomInRange(2000, 7000)] (20:65-20:90)
                  identifier [randomInRange] (20:65-20:78)
                  arguments [(2000, 7000)] (20:78-20:90)
                    ( [(] (20:78-20:79)
                    number [2000] (20:79-20:83)
                    , [,] (20:83-20:84)
                    number [7000] (20:85-20:89)
                    ) [)] (20:89-20:90)
              , [,] (20:90-20:91)
              pair [competitorEngagement: randomInRange(1200, 3700)] (20:92-20:139)
                property_identifier [competitorEngagement] (20:92-20:112)
                : [:] (20:112-20:113)
                call_expression [randomInRange(1200, 3700)] (20:114-20:139)
                  identifier [randomInRange] (20:114-20:127)
                  arguments [(1200, 3700)] (20:127-20:139)
                    ( [(] (20:127-20:128)
                    number [1200] (20:128-20:132)
                    , [,] (20:132-20:133)
                    number [3700] (20:134-20:138)
                    ) [)] (20:138-20:139)
              , [,] (20:139-20:140)
              pair [competitorViral: randomInRange(2200, 7200)] (20:141-20:183)
                property_identifier [competitorViral] (20:141-20:156)
                : [:] (20:156-20:157)
                call_expression [randomInRange(2200, 7200)] (20:158-20:183)
                  identifier [randomInRange] (20:158-20:171)
                  arguments [(2200, 7200)] (20:171-20:183)
                    ( [(] (20:171-20:172)
                    number [2200] (20:172-20:176)
                    , [,] (20:176-20:177)
                    number [7200] (20:178-20:182)
                    ) [)] (20:182-20:183)
              } [}] (20:184-20:185)
            , [,] (20:185-20:186)
            object [{ time: '08:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }] (21:2-21:185)
              { [{] (21:2-21:3)
              pair [time: '08:00'] (21:4-21:17)
                property_identifier [time] (21:4-21:8)
                : [:] (21:8-21:9)
                string ['08:00'] (21:10-21:17)
                  ' ['] (21:10-21:11)
                  string_fragment [08:00] (21:11-21:16)
                  ' ['] (21:16-21:17)
              , [,] (21:17-21:18)
              pair [engagement: randomInRange(1000, 3500)] (21:19-21:56)
                property_identifier [engagement] (21:19-21:29)
                : [:] (21:29-21:30)
                call_expression [randomInRange(1000, 3500)] (21:31-21:56)
                  identifier [randomInRange] (21:31-21:44)
                  arguments [(1000, 3500)] (21:44-21:56)
                    ( [(] (21:44-21:45)
                    number [1000] (21:45-21:49)
                    , [,] (21:49-21:50)
                    number [3500] (21:51-21:55)
                    ) [)] (21:55-21:56)
              , [,] (21:56-21:57)
              pair [viral: randomInRange(2000, 7000)] (21:58-21:90)
                property_identifier [viral] (21:58-21:63)
                : [:] (21:63-21:64)
                call_expression [randomInRange(2000, 7000)] (21:65-21:90)
                  identifier [randomInRange] (21:65-21:78)
                  arguments [(2000, 7000)] (21:78-21:90)
                    ( [(] (21:78-21:79)
                    number [2000] (21:79-21:83)
                    , [,] (21:83-21:84)
                    number [7000] (21:85-21:89)
                    ) [)] (21:89-21:90)
              , [,] (21:90-21:91)
              pair [competitorEngagement: randomInRange(1200, 3700)] (21:92-21:139)
                property_identifier [competitorEngagement] (21:92-21:112)
                : [:] (21:112-21:113)
                call_expression [randomInRange(1200, 3700)] (21:114-21:139)
                  identifier [randomInRange] (21:114-21:127)
                  arguments [(1200, 3700)] (21:127-21:139)
                    ( [(] (21:127-21:128)
                    number [1200] (21:128-21:132)
                    , [,] (21:132-21:133)
                    number [3700] (21:134-21:138)
                    ) [)] (21:138-21:139)
              , [,] (21:139-21:140)
              pair [competitorViral: randomInRange(2200, 7200)] (21:141-21:183)
                property_identifier [competitorViral] (21:141-21:156)
                : [:] (21:156-21:157)
                call_expression [randomInRange(2200, 7200)] (21:158-21:183)
                  identifier [randomInRange] (21:158-21:171)
                  arguments [(2200, 7200)] (21:171-21:183)
                    ( [(] (21:171-21:172)
                    number [2200] (21:172-21:176)
                    , [,] (21:176-21:177)
                    number [7200] (21:178-21:182)
                    ) [)] (21:182-21:183)
              } [}] (21:184-21:185)
            , [,] (21:185-21:186)
            object [{ time: '12:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }] (22:2-22:185)
              { [{] (22:2-22:3)
              pair [time: '12:00'] (22:4-22:17)
                property_identifier [time] (22:4-22:8)
                : [:] (22:8-22:9)
                string ['12:00'] (22:10-22:17)
                  ' ['] (22:10-22:11)
                  string_fragment [12:00] (22:11-22:16)
                  ' ['] (22:16-22:17)
              , [,] (22:17-22:18)
              pair [engagement: randomInRange(1000, 3500)] (22:19-22:56)
                property_identifier [engagement] (22:19-22:29)
                : [:] (22:29-22:30)
                call_expression [randomInRange(1000, 3500)] (22:31-22:56)
                  identifier [randomInRange] (22:31-22:44)
                  arguments [(1000, 3500)] (22:44-22:56)
                    ( [(] (22:44-22:45)
                    number [1000] (22:45-22:49)
                    , [,] (22:49-22:50)
                    number [3500] (22:51-22:55)
                    ) [)] (22:55-22:56)
              , [,] (22:56-22:57)
              pair [viral: randomInRange(2000, 7000)] (22:58-22:90)
                property_identifier [viral] (22:58-22:63)
                : [:] (22:63-22:64)
                call_expression [randomInRange(2000, 7000)] (22:65-22:90)
                  identifier [randomInRange] (22:65-22:78)
                  arguments [(2000, 7000)] (22:78-22:90)
                    ( [(] (22:78-22:79)
                    number [2000] (22:79-22:83)
                    , [,] (22:83-22:84)
                    number [7000] (22:85-22:89)
                    ) [)] (22:89-22:90)
              , [,] (22:90-22:91)
              pair [competitorEngagement: randomInRange(1200, 3700)] (22:92-22:139)
                property_identifier [competitorEngagement] (22:92-22:112)
                : [:] (22:112-22:113)
                call_expression [randomInRange(1200, 3700)] (22:114-22:139)
                  identifier [randomInRange] (22:114-22:127)
                  arguments [(1200, 3700)] (22:127-22:139)
                    ( [(] (22:127-22:128)
                    number [1200] (22:128-22:132)
                    , [,] (22:132-22:133)
                    number [3700] (22:134-22:138)
                    ) [)] (22:138-22:139)
              , [,] (22:139-22:140)
              pair [competitorViral: randomInRange(2200, 7200)] (22:141-22:183)
                property_identifier [competitorViral] (22:141-22:156)
                : [:] (22:156-22:157)
                call_expression [randomInRange(2200, 7200)] (22:158-22:183)
                  identifier [randomInRange] (22:158-22:171)
                  arguments [(2200, 7200)] (22:171-22:183)
                    ( [(] (22:171-22:172)
                    number [2200] (22:172-22:176)
                    , [,] (22:176-22:177)
                    number [7200] (22:178-22:182)
                    ) [)] (22:182-22:183)
              } [}] (22:184-22:185)
            , [,] (22:185-22:186)
            object [{ time: '16:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }] (23:2-23:185)
              { [{] (23:2-23:3)
              pair [time: '16:00'] (23:4-23:17)
                property_identifier [time] (23:4-23:8)
                : [:] (23:8-23:9)
                string ['16:00'] (23:10-23:17)
                  ' ['] (23:10-23:11)
                  string_fragment [16:00] (23:11-23:16)
                  ' ['] (23:16-23:17)
              , [,] (23:17-23:18)
              pair [engagement: randomInRange(1000, 3500)] (23:19-23:56)
                property_identifier [engagement] (23:19-23:29)
                : [:] (23:29-23:30)
                call_expression [randomInRange(1000, 3500)] (23:31-23:56)
                  identifier [randomInRange] (23:31-23:44)
                  arguments [(1000, 3500)] (23:44-23:56)
                    ( [(] (23:44-23:45)
                    number [1000] (23:45-23:49)
                    , [,] (23:49-23:50)
                    number [3500] (23:51-23:55)
                    ) [)] (23:55-23:56)
              , [,] (23:56-23:57)
              pair [viral: randomInRange(2000, 7000)] (23:58-23:90)
                property_identifier [viral] (23:58-23:63)
                : [:] (23:63-23:64)
                call_expression [randomInRange(2000, 7000)] (23:65-23:90)
                  identifier [randomInRange] (23:65-23:78)
                  arguments [(2000, 7000)] (23:78-23:90)
                    ( [(] (23:78-23:79)
                    number [2000] (23:79-23:83)
                    , [,] (23:83-23:84)
                    number [7000] (23:85-23:89)
                    ) [)] (23:89-23:90)
              , [,] (23:90-23:91)
              pair [competitorEngagement: randomInRange(1200, 3700)] (23:92-23:139)
                property_identifier [competitorEngagement] (23:92-23:112)
                : [:] (23:112-23:113)
                call_expression [randomInRange(1200, 3700)] (23:114-23:139)
                  identifier [randomInRange] (23:114-23:127)
                  arguments [(1200, 3700)] (23:127-23:139)
                    ( [(] (23:127-23:128)
                    number [1200] (23:128-23:132)
                    , [,] (23:132-23:133)
                    number [3700] (23:134-23:138)
                    ) [)] (23:138-23:139)
              , [,] (23:139-23:140)
              pair [competitorViral: randomInRange(2200, 7200)] (23:141-23:183)
                property_identifier [competitorViral] (23:141-23:156)
                : [:] (23:156-23:157)
                call_expression [randomInRange(2200, 7200)] (23:158-23:183)
                  identifier [randomInRange] (23:158-23:171)
                  arguments [(2200, 7200)] (23:171-23:183)
                    ( [(] (23:171-23:172)
                    number [2200] (23:172-23:176)
                    , [,] (23:176-23:177)
                    number [7200] (23:178-23:182)
                    ) [)] (23:182-23:183)
              } [}] (23:184-23:185)
            , [,] (23:185-23:186)
            object [{ time: '20:00', engagement: randomInRange(1000, 3500), viral: randomInRange(2000, 7000), competitorEngagement: randomInRange(1200, 3700), competitorViral: randomInRange(2200, 7200) }] (24:2-24:185)
              { [{] (24:2-24:3)
              pair [time: '20:00'] (24:4-24:17)
                property_identifier [time] (24:4-24:8)
                : [:] (24:8-24:9)
                string ['20:00'] (24:10-24:17)
                  ' ['] (24:10-24:11)
                  string_fragment [20:00] (24:11-24:16)
                  ' ['] (24:16-24:17)
              , [,] (24:17-24:18)
              pair [engagement: randomInRange(1000, 3500)] (24:19-24:56)
                property_identifier [engagement] (24:19-24:29)
                : [:] (24:29-24:30)
                call_expression [randomInRange(1000, 3500)] (24:31-24:56)
                  identifier [randomInRange] (24:31-24:44)
                  arguments [(1000, 3500)] (24:44-24:56)
                    ( [(] (24:44-24:45)
                    number [1000] (24:45-24:49)
                    , [,] (24:49-24:50)
                    number [3500] (24:51-24:55)
                    ) [)] (24:55-24:56)
              , [,] (24:56-24:57)
              pair [viral: randomInRange(2000, 7000)] (24:58-24:90)
                property_identifier [viral] (24:58-24:63)
                : [:] (24:63-24:64)
                call_expression [randomInRange(2000, 7000)] (24:65-24:90)
                  identifier [randomInRange] (24:65-24:78)
                  arguments [(2000, 7000)] (24:78-24:90)
                    ( [(] (24:78-24:79)
                    number [2000] (24:79-24:83)
                    , [,] (24:83-24:84)
                    number [7000] (24:85-24:89)
                    ) [)] (24:89-24:90)
              , [,] (24:90-24:91)
              pair [competitorEngagement: randomInRange(1200, 3700)] (24:92-24:139)
                property_identifier [competitorEngagement] (24:92-24:112)
                : [:] (24:112-24:113)
                call_expression [randomInRange(1200, 3700)] (24:114-24:139)
                  identifier [randomInRange] (24:114-24:127)
                  arguments [(1200, 3700)] (24:127-24:139)
                    ( [(] (24:127-24:128)
                    number [1200] (24:128-24:132)
                    , [,] (24:132-24:133)
                    number [3700] (24:134-24:138)
                    ) [)] (24:138-24:139)
              , [,] (24:139-24:140)
              pair [competitorViral: randomInRange(2200, 7200)] (24:141-24:183)
                property_identifier [competitorViral] (24:141-24:156)
                : [:] (24:156-24:157)
                call_expression [randomInRange(2200, 7200)] (24:158-24:183)
                  identifier [randomInRange] (24:158-24:171)
                  arguments [(2200, 7200)] (24:171-24:183)
                    ( [(] (24:171-24:172)
                    number [2200] (24:172-24:176)
                    , [,] (24:176-24:177)
                    number [7200] (24:178-24:182)
                    ) [)] (24:182-24:183)
              } [}] (24:184-24:185)
            ] []] (25:0-25:1)
          ) [)] (25:1-25:2)
    ; [;] (25:2-25:3)
  comment [// 3. Platform Performance Data] (27:0-27:31)
  lexical_declaration [const generatePlatformData = () => ([
  { date: '2024-01', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-02', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-03', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-04', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-05', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) }
]);] (28:0-34:3)
    const [const] (28:0-28:5)
    variable_declarator [generatePlatformData = () => ([
  { date: '2024-01', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-02', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-03', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-04', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-05', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) }
])] (28:6-34:2)
      identifier [generatePlatformData] (28:6-28:26)
      = [=] (28:27-28:28)
      arrow_function [() => ([
  { date: '2024-01', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-02', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-03', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-04', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-05', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) }
])] (28:29-34:2)
        formal_parameters [()] (28:29-28:31)
          ( [(] (28:29-28:30)
          ) [)] (28:30-28:31)
        => [=>] (28:32-28:34)
        parenthesized_expression [([
  { date: '2024-01', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-02', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-03', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-04', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-05', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) }
])] (28:35-34:2)
          ( [(] (28:35-28:36)
          array [[
  { date: '2024-01', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-02', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-03', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-04', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) },
  { date: '2024-05', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) }
]] (28:36-34:1)
            [ [[] (28:36-28:37)
            object [{ date: '2024-01', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) }] (29:2-29:226)
              { [{] (29:2-29:3)
              pair [date: '2024-01'] (29:4-29:19)
                property_identifier [date] (29:4-29:8)
                : [:] (29:8-29:9)
                string ['2024-01'] (29:10-29:19)
                  ' ['] (29:10-29:11)
                  string_fragment [2024-01] (29:11-29:18)
                  ' ['] (29:18-29:19)
              , [,] (29:19-29:20)
              pair [youtube: randomInRange(1500, 4500)] (29:21-29:55)
                property_identifier [youtube] (29:21-29:28)
                : [:] (29:28-29:29)
                call_expression [randomInRange(1500, 4500)] (29:30-29:55)
                  identifier [randomInRange] (29:30-29:43)
                  arguments [(1500, 4500)] (29:43-29:55)
                    ( [(] (29:43-29:44)
                    number [1500] (29:44-29:48)
                    , [,] (29:48-29:49)
                    number [4500] (29:50-29:54)
                    ) [)] (29:54-29:55)
              , [,] (29:55-29:56)
              pair [instagram: randomInRange(1000, 10000)] (29:57-29:94)
                property_identifier [instagram] (29:57-29:66)
                : [:] (29:66-29:67)
                call_expression [randomInRange(1000, 10000)] (29:68-29:94)
                  identifier [randomInRange] (29:68-29:81)
                  arguments [(1000, 10000)] (29:81-29:94)
                    ( [(] (29:81-29:82)
                    number [1000] (29:82-29:86)
                    , [,] (29:86-29:87)
                    number [10000] (29:88-29:93)
                    ) [)] (29:93-29:94)
              , [,] (29:94-29:95)
              pair [reddit: randomInRange(1800, 2500)] (29:96-29:129)
                property_identifier [reddit] (29:96-29:102)
                : [:] (29:102-29:103)
                call_expression [randomInRange(1800, 2500)] (29:104-29:129)
                  identifier [randomInRange] (29:104-29:117)
                  arguments [(1800, 2500)] (29:117-29:129)
                    ( [(] (29:117-29:118)
                    number [1800] (29:118-29:122)
                    , [,] (29:122-29:123)
                    number [2500] (29:124-29:128)
                    ) [)] (29:128-29:129)
              , [,] (29:129-29:130)
              pair [competitorYoutube: randomInRange(1700, 4700)] (29:131-29:175)
                property_identifier [competitorYoutube] (29:131-29:148)
                : [:] (29:148-29:149)
                call_expression [randomInRange(1700, 4700)] (29:150-29:175)
                  identifier [randomInRange] (29:150-29:163)
                  arguments [(1700, 4700)] (29:163-29:175)
                    ( [(] (29:163-29:164)
                    number [1700] (29:164-29:168)
                    , [,] (29:168-29:169)
                    number [4700] (29:170-29:174)
                    ) [)] (29:174-29:175)
              , [,] (29:175-29:176)
              pair [competitorInstagram: randomInRange(1200, 10200)] (29:177-29:224)
                property_identifier [competitorInstagram] (29:177-29:196)
                : [:] (29:196-29:197)
                call_expression [randomInRange(1200, 10200)] (29:198-29:224)
                  identifier [randomInRange] (29:198-29:211)
                  arguments [(1200, 10200)] (29:211-29:224)
                    ( [(] (29:211-29:212)
                    number [1200] (29:212-29:216)
                    , [,] (29:216-29:217)
                    number [10200] (29:218-29:223)
                    ) [)] (29:223-29:224)
              } [}] (29:225-29:226)
            , [,] (29:226-29:227)
            object [{ date: '2024-02', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) }] (30:2-30:226)
              { [{] (30:2-30:3)
              pair [date: '2024-02'] (30:4-30:19)
                property_identifier [date] (30:4-30:8)
                : [:] (30:8-30:9)
                string ['2024-02'] (30:10-30:19)
                  ' ['] (30:10-30:11)
                  string_fragment [2024-02] (30:11-30:18)
                  ' ['] (30:18-30:19)
              , [,] (30:19-30:20)
              pair [youtube: randomInRange(1500, 4500)] (30:21-30:55)
                property_identifier [youtube] (30:21-30:28)
                : [:] (30:28-30:29)
                call_expression [randomInRange(1500, 4500)] (30:30-30:55)
                  identifier [randomInRange] (30:30-30:43)
                  arguments [(1500, 4500)] (30:43-30:55)
                    ( [(] (30:43-30:44)
                    number [1500] (30:44-30:48)
                    , [,] (30:48-30:49)
                    number [4500] (30:50-30:54)
                    ) [)] (30:54-30:55)
              , [,] (30:55-30:56)
              pair [instagram: randomInRange(1000, 10000)] (30:57-30:94)
                property_identifier [instagram] (30:57-30:66)
                : [:] (30:66-30:67)
                call_expression [randomInRange(1000, 10000)] (30:68-30:94)
                  identifier [randomInRange] (30:68-30:81)
                  arguments [(1000, 10000)] (30:81-30:94)
                    ( [(] (30:81-30:82)
                    number [1000] (30:82-30:86)
                    , [,] (30:86-30:87)
                    number [10000] (30:88-30:93)
                    ) [)] (30:93-30:94)
              , [,] (30:94-30:95)
              pair [reddit: randomInRange(1800, 2500)] (30:96-30:129)
                property_identifier [reddit] (30:96-30:102)
                : [:] (30:102-30:103)
                call_expression [randomInRange(1800, 2500)] (30:104-30:129)
                  identifier [randomInRange] (30:104-30:117)
                  arguments [(1800, 2500)] (30:117-30:129)
                    ( [(] (30:117-30:118)
                    number [1800] (30:118-30:122)
                    , [,] (30:122-30:123)
                    number [2500] (30:124-30:128)
                    ) [)] (30:128-30:129)
              , [,] (30:129-30:130)
              pair [competitorYoutube: randomInRange(1700, 4700)] (30:131-30:175)
                property_identifier [competitorYoutube] (30:131-30:148)
                : [:] (30:148-30:149)
                call_expression [randomInRange(1700, 4700)] (30:150-30:175)
                  identifier [randomInRange] (30:150-30:163)
                  arguments [(1700, 4700)] (30:163-30:175)
                    ( [(] (30:163-30:164)
                    number [1700] (30:164-30:168)
                    , [,] (30:168-30:169)
                    number [4700] (30:170-30:174)
                    ) [)] (30:174-30:175)
              , [,] (30:175-30:176)
              pair [competitorInstagram: randomInRange(1200, 10200)] (30:177-30:224)
                property_identifier [competitorInstagram] (30:177-30:196)
                : [:] (30:196-30:197)
                call_expression [randomInRange(1200, 10200)] (30:198-30:224)
                  identifier [randomInRange] (30:198-30:211)
                  arguments [(1200, 10200)] (30:211-30:224)
                    ( [(] (30:211-30:212)
                    number [1200] (30:212-30:216)
                    , [,] (30:216-30:217)
                    number [10200] (30:218-30:223)
                    ) [)] (30:223-30:224)
              } [}] (30:225-30:226)
            , [,] (30:226-30:227)
            object [{ date: '2024-03', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) }] (31:2-31:226)
              { [{] (31:2-31:3)
              pair [date: '2024-03'] (31:4-31:19)
                property_identifier [date] (31:4-31:8)
                : [:] (31:8-31:9)
                string ['2024-03'] (31:10-31:19)
                  ' ['] (31:10-31:11)
                  string_fragment [2024-03] (31:11-31:18)
                  ' ['] (31:18-31:19)
              , [,] (31:19-31:20)
              pair [youtube: randomInRange(1500, 4500)] (31:21-31:55)
                property_identifier [youtube] (31:21-31:28)
                : [:] (31:28-31:29)
                call_expression [randomInRange(1500, 4500)] (31:30-31:55)
                  identifier [randomInRange] (31:30-31:43)
                  arguments [(1500, 4500)] (31:43-31:55)
                    ( [(] (31:43-31:44)
                    number [1500] (31:44-31:48)
                    , [,] (31:48-31:49)
                    number [4500] (31:50-31:54)
                    ) [)] (31:54-31:55)
              , [,] (31:55-31:56)
              pair [instagram: randomInRange(1000, 10000)] (31:57-31:94)
                property_identifier [instagram] (31:57-31:66)
                : [:] (31:66-31:67)
                call_expression [randomInRange(1000, 10000)] (31:68-31:94)
                  identifier [randomInRange] (31:68-31:81)
                  arguments [(1000, 10000)] (31:81-31:94)
                    ( [(] (31:81-31:82)
                    number [1000] (31:82-31:86)
                    , [,] (31:86-31:87)
                    number [10000] (31:88-31:93)
                    ) [)] (31:93-31:94)
              , [,] (31:94-31:95)
              pair [reddit: randomInRange(1800, 2500)] (31:96-31:129)
                property_identifier [reddit] (31:96-31:102)
                : [:] (31:102-31:103)
                call_expression [randomInRange(1800, 2500)] (31:104-31:129)
                  identifier [randomInRange] (31:104-31:117)
                  arguments [(1800, 2500)] (31:117-31:129)
                    ( [(] (31:117-31:118)
                    number [1800] (31:118-31:122)
                    , [,] (31:122-31:123)
                    number [2500] (31:124-31:128)
                    ) [)] (31:128-31:129)
              , [,] (31:129-31:130)
              pair [competitorYoutube: randomInRange(1700, 4700)] (31:131-31:175)
                property_identifier [competitorYoutube] (31:131-31:148)
                : [:] (31:148-31:149)
                call_expression [randomInRange(1700, 4700)] (31:150-31:175)
                  identifier [randomInRange] (31:150-31:163)
                  arguments [(1700, 4700)] (31:163-31:175)
                    ( [(] (31:163-31:164)
                    number [1700] (31:164-31:168)
                    , [,] (31:168-31:169)
                    number [4700] (31:170-31:174)
                    ) [)] (31:174-31:175)
              , [,] (31:175-31:176)
              pair [competitorInstagram: randomInRange(1200, 10200)] (31:177-31:224)
                property_identifier [competitorInstagram] (31:177-31:196)
                : [:] (31:196-31:197)
                call_expression [randomInRange(1200, 10200)] (31:198-31:224)
                  identifier [randomInRange] (31:198-31:211)
                  arguments [(1200, 10200)] (31:211-31:224)
                    ( [(] (31:211-31:212)
                    number [1200] (31:212-31:216)
                    , [,] (31:216-31:217)
                    number [10200] (31:218-31:223)
                    ) [)] (31:223-31:224)
              } [}] (31:225-31:226)
            , [,] (31:226-31:227)
            object [{ date: '2024-04', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) }] (32:2-32:226)
              { [{] (32:2-32:3)
              pair [date: '2024-04'] (32:4-32:19)
                property_identifier [date] (32:4-32:8)
                : [:] (32:8-32:9)
                string ['2024-04'] (32:10-32:19)
                  ' ['] (32:10-32:11)
                  string_fragment [2024-04] (32:11-32:18)
                  ' ['] (32:18-32:19)
              , [,] (32:19-32:20)
              pair [youtube: randomInRange(1500, 4500)] (32:21-32:55)
                property_identifier [youtube] (32:21-32:28)
                : [:] (32:28-32:29)
                call_expression [randomInRange(1500, 4500)] (32:30-32:55)
                  identifier [randomInRange] (32:30-32:43)
                  arguments [(1500, 4500)] (32:43-32:55)
                    ( [(] (32:43-32:44)
                    number [1500] (32:44-32:48)
                    , [,] (32:48-32:49)
                    number [4500] (32:50-32:54)
                    ) [)] (32:54-32:55)
              , [,] (32:55-32:56)
              pair [instagram: randomInRange(1000, 10000)] (32:57-32:94)
                property_identifier [instagram] (32:57-32:66)
                : [:] (32:66-32:67)
                call_expression [randomInRange(1000, 10000)] (32:68-32:94)
                  identifier [randomInRange] (32:68-32:81)
                  arguments [(1000, 10000)] (32:81-32:94)
                    ( [(] (32:81-32:82)
                    number [1000] (32:82-32:86)
                    , [,] (32:86-32:87)
                    number [10000] (32:88-32:93)
                    ) [)] (32:93-32:94)
              , [,] (32:94-32:95)
              pair [reddit: randomInRange(1800, 2500)] (32:96-32:129)
                property_identifier [reddit] (32:96-32:102)
                : [:] (32:102-32:103)
                call_expression [randomInRange(1800, 2500)] (32:104-32:129)
                  identifier [randomInRange] (32:104-32:117)
                  arguments [(1800, 2500)] (32:117-32:129)
                    ( [(] (32:117-32:118)
                    number [1800] (32:118-32:122)
                    , [,] (32:122-32:123)
                    number [2500] (32:124-32:128)
                    ) [)] (32:128-32:129)
              , [,] (32:129-32:130)
              pair [competitorYoutube: randomInRange(1700, 4700)] (32:131-32:175)
                property_identifier [competitorYoutube] (32:131-32:148)
                : [:] (32:148-32:149)
                call_expression [randomInRange(1700, 4700)] (32:150-32:175)
                  identifier [randomInRange] (32:150-32:163)
                  arguments [(1700, 4700)] (32:163-32:175)
                    ( [(] (32:163-32:164)
                    number [1700] (32:164-32:168)
                    , [,] (32:168-32:169)
                    number [4700] (32:170-32:174)
                    ) [)] (32:174-32:175)
              , [,] (32:175-32:176)
              pair [competitorInstagram: randomInRange(1200, 10200)] (32:177-32:224)
                property_identifier [competitorInstagram] (32:177-32:196)
                : [:] (32:196-32:197)
                call_expression [randomInRange(1200, 10200)] (32:198-32:224)
                  identifier [randomInRange] (32:198-32:211)
                  arguments [(1200, 10200)] (32:211-32:224)
                    ( [(] (32:211-32:212)
                    number [1200] (32:212-32:216)
                    , [,] (32:216-32:217)
                    number [10200] (32:218-32:223)
                    ) [)] (32:223-32:224)
              } [}] (32:225-32:226)
            , [,] (32:226-32:227)
            object [{ date: '2024-05', youtube: randomInRange(1500, 4500), instagram: randomInRange(1000, 10000), reddit: randomInRange(1800, 2500), competitorYoutube: randomInRange(1700, 4700), competitorInstagram: randomInRange(1200, 10200) }] (33:2-33:226)
              { [{] (33:2-33:3)
              pair [date: '2024-05'] (33:4-33:19)
                property_identifier [date] (33:4-33:8)
                : [:] (33:8-33:9)
                string ['2024-05'] (33:10-33:19)
                  ' ['] (33:10-33:11)
                  string_fragment [2024-05] (33:11-33:18)
                  ' ['] (33:18-33:19)
              , [,] (33:19-33:20)
              pair [youtube: randomInRange(1500, 4500)] (33:21-33:55)
                property_identifier [youtube] (33:21-33:28)
                : [:] (33:28-33:29)
                call_expression [randomInRange(1500, 4500)] (33:30-33:55)
                  identifier [randomInRange] (33:30-33:43)
                  arguments [(1500, 4500)] (33:43-33:55)
                    ( [(] (33:43-33:44)
                    number [1500] (33:44-33:48)
                    , [,] (33:48-33:49)
                    number [4500] (33:50-33:54)
                    ) [)] (33:54-33:55)
              , [,] (33:55-33:56)
              pair [instagram: randomInRange(1000, 10000)] (33:57-33:94)
                property_identifier [instagram] (33:57-33:66)
                : [:] (33:66-33:67)
                call_expression [randomInRange(1000, 10000)] (33:68-33:94)
                  identifier [randomInRange] (33:68-33:81)
                  arguments [(1000, 10000)] (33:81-33:94)
                    ( [(] (33:81-33:82)
                    number [1000] (33:82-33:86)
                    , [,] (33:86-33:87)
                    number [10000] (33:88-33:93)
                    ) [)] (33:93-33:94)
              , [,] (33:94-33:95)
              pair [reddit: randomInRange(1800, 2500)] (33:96-33:129)
                property_identifier [reddit] (33:96-33:102)
                : [:] (33:102-33:103)
                call_expression [randomInRange(1800, 2500)] (33:104-33:129)
                  identifier [randomInRange] (33:104-33:117)
                  arguments [(1800, 2500)] (33:117-33:129)
                    ( [(] (33:117-33:118)
                    number [1800] (33:118-33:122)
                    , [,] (33:122-33:123)
                    number [2500] (33:124-33:128)
                    ) [)] (33:128-33:129)
              , [,] (33:129-33:130)
              pair [competitorYoutube: randomInRange(1700, 4700)] (33:131-33:175)
                property_identifier [competitorYoutube] (33:131-33:148)
                : [:] (33:148-33:149)
                call_expression [randomInRange(1700, 4700)] (33:150-33:175)
                  identifier [randomInRange] (33:150-33:163)
                  arguments [(1700, 4700)] (33:163-33:175)
                    ( [(] (33:163-33:164)
                    number [1700] (33:164-33:168)
                    , [,] (33:168-33:169)
                    number [4700] (33:170-33:174)
                    ) [)] (33:174-33:175)
              , [,] (33:175-33:176)
              pair [competitorInstagram: randomInRange(1200, 10200)] (33:177-33:224)
                property_identifier [competitorInstagram] (33:177-33:196)
                : [:] (33:196-33:197)
                call_expression [randomInRange(1200, 10200)] (33:198-33:224)
                  identifier [randomInRange] (33:198-33:211)
                  arguments [(1200, 10200)] (33:211-33:224)
                    ( [(] (33:211-33:212)
                    number [1200] (33:212-33:216)
                    , [,] (33:216-33:217)
                    number [10200] (33:218-33:223)
                    ) [)] (33:223-33:224)
              } [}] (33:225-33:226)
            ] []] (34:0-34:1)
          ) [)] (34:1-34:2)
    ; [;] (34:2-34:3)
  comment [// 4. CTA Funnel Data] (36:0-36:21)
  lexical_declaration [const generateFunnelData = () => {
  const baseValue = randomInRange(800, 1200);
  const dropRate = 0.7; // Each stage reduces by ~30%
  return [
    { stage: 'Impressions', value: baseValue, competitorValue: Math.round(baseValue * 0.8) },
    { stage: 'Clicks', value: Math.round(baseValue * dropRate), competitorValue: Math.round(baseValue * dropRate * 0.8) },
    { stage: 'Sign-ups', value: Math.round(baseValue * dropRate * dropRate), competitorValue: Math.round(baseValue * dropRate * dropRate * 0.8) },
    { stage: 'Purchases', value: Math.round(baseValue * Math.pow(dropRate, 3)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 3) * 0.8) },
    { stage: 'Retention', value: Math.round(baseValue * Math.pow(dropRate, 4)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 4) * 0.8) }
  ];
};] (37:0-47:2)
    const [const] (37:0-37:5)
    variable_declarator [generateFunnelData = () => {
  const baseValue = randomInRange(800, 1200);
  const dropRate = 0.7; // Each stage reduces by ~30%
  return [
    { stage: 'Impressions', value: baseValue, competitorValue: Math.round(baseValue * 0.8) },
    { stage: 'Clicks', value: Math.round(baseValue * dropRate), competitorValue: Math.round(baseValue * dropRate * 0.8) },
    { stage: 'Sign-ups', value: Math.round(baseValue * dropRate * dropRate), competitorValue: Math.round(baseValue * dropRate * dropRate * 0.8) },
    { stage: 'Purchases', value: Math.round(baseValue * Math.pow(dropRate, 3)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 3) * 0.8) },
    { stage: 'Retention', value: Math.round(baseValue * Math.pow(dropRate, 4)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 4) * 0.8) }
  ];
}] (37:6-47:1)
      identifier [generateFunnelData] (37:6-37:24)
      = [=] (37:25-37:26)
      arrow_function [() => {
  const baseValue = randomInRange(800, 1200);
  const dropRate = 0.7; // Each stage reduces by ~30%
  return [
    { stage: 'Impressions', value: baseValue, competitorValue: Math.round(baseValue * 0.8) },
    { stage: 'Clicks', value: Math.round(baseValue * dropRate), competitorValue: Math.round(baseValue * dropRate * 0.8) },
    { stage: 'Sign-ups', value: Math.round(baseValue * dropRate * dropRate), competitorValue: Math.round(baseValue * dropRate * dropRate * 0.8) },
    { stage: 'Purchases', value: Math.round(baseValue * Math.pow(dropRate, 3)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 3) * 0.8) },
    { stage: 'Retention', value: Math.round(baseValue * Math.pow(dropRate, 4)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 4) * 0.8) }
  ];
}] (37:27-47:1)
        formal_parameters [()] (37:27-37:29)
          ( [(] (37:27-37:28)
          ) [)] (37:28-37:29)
        => [=>] (37:30-37:32)
        statement_block [{
  const baseValue = randomInRange(800, 1200);
  const dropRate = 0.7; // Each stage reduces by ~30%
  return [
    { stage: 'Impressions', value: baseValue, competitorValue: Math.round(baseValue * 0.8) },
    { stage: 'Clicks', value: Math.round(baseValue * dropRate), competitorValue: Math.round(baseValue * dropRate * 0.8) },
    { stage: 'Sign-ups', value: Math.round(baseValue * dropRate * dropRate), competitorValue: Math.round(baseValue * dropRate * dropRate * 0.8) },
    { stage: 'Purchases', value: Math.round(baseValue * Math.pow(dropRate, 3)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 3) * 0.8) },
    { stage: 'Retention', value: Math.round(baseValue * Math.pow(dropRate, 4)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 4) * 0.8) }
  ];
}] (37:33-47:1)
          { [{] (37:33-37:34)
          lexical_declaration [const baseValue = randomInRange(800, 1200);] (38:2-38:45)
            const [const] (38:2-38:7)
            variable_declarator [baseValue = randomInRange(800, 1200)] (38:8-38:44)
              identifier [baseValue] (38:8-38:17)
              = [=] (38:18-38:19)
              call_expression [randomInRange(800, 1200)] (38:20-38:44)
                identifier [randomInRange] (38:20-38:33)
                arguments [(800, 1200)] (38:33-38:44)
                  ( [(] (38:33-38:34)
                  number [800] (38:34-38:37)
                  , [,] (38:37-38:38)
                  number [1200] (38:39-38:43)
                  ) [)] (38:43-38:44)
            ; [;] (38:44-38:45)
          lexical_declaration [const dropRate = 0.7;] (39:2-39:23)
            const [const] (39:2-39:7)
            variable_declarator [dropRate = 0.7] (39:8-39:22)
              identifier [dropRate] (39:8-39:16)
              = [=] (39:17-39:18)
              number [0.7] (39:19-39:22)
            ; [;] (39:22-39:23)
          comment [// Each stage reduces by ~30%] (39:24-39:53)
          return_statement [return [
    { stage: 'Impressions', value: baseValue, competitorValue: Math.round(baseValue * 0.8) },
    { stage: 'Clicks', value: Math.round(baseValue * dropRate), competitorValue: Math.round(baseValue * dropRate * 0.8) },
    { stage: 'Sign-ups', value: Math.round(baseValue * dropRate * dropRate), competitorValue: Math.round(baseValue * dropRate * dropRate * 0.8) },
    { stage: 'Purchases', value: Math.round(baseValue * Math.pow(dropRate, 3)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 3) * 0.8) },
    { stage: 'Retention', value: Math.round(baseValue * Math.pow(dropRate, 4)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 4) * 0.8) }
  ];] (40:2-46:4)
            return [return] (40:2-40:8)
            array [[
    { stage: 'Impressions', value: baseValue, competitorValue: Math.round(baseValue * 0.8) },
    { stage: 'Clicks', value: Math.round(baseValue * dropRate), competitorValue: Math.round(baseValue * dropRate * 0.8) },
    { stage: 'Sign-ups', value: Math.round(baseValue * dropRate * dropRate), competitorValue: Math.round(baseValue * dropRate * dropRate * 0.8) },
    { stage: 'Purchases', value: Math.round(baseValue * Math.pow(dropRate, 3)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 3) * 0.8) },
    { stage: 'Retention', value: Math.round(baseValue * Math.pow(dropRate, 4)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 4) * 0.8) }
  ]] (40:9-46:3)
              [ [[] (40:9-40:10)
              object [{ stage: 'Impressions', value: baseValue, competitorValue: Math.round(baseValue * 0.8) }] (41:4-41:92)
                { [{] (41:4-41:5)
                pair [stage: 'Impressions'] (41:6-41:26)
                  property_identifier [stage] (41:6-41:11)
                  : [:] (41:11-41:12)
                  string ['Impressions'] (41:13-41:26)
                    ' ['] (41:13-41:14)
                    string_fragment [Impressions] (41:14-41:25)
                    ' ['] (41:25-41:26)
                , [,] (41:26-41:27)
                pair [value: baseValue] (41:28-41:44)
                  property_identifier [value] (41:28-41:33)
                  : [:] (41:33-41:34)
                  identifier [baseValue] (41:35-41:44)
                , [,] (41:44-41:45)
                pair [competitorValue: Math.round(baseValue * 0.8)] (41:46-41:90)
                  property_identifier [competitorValue] (41:46-41:61)
                  : [:] (41:61-41:62)
                  call_expression [Math.round(baseValue * 0.8)] (41:63-41:90)
                    member_expression [Math.round] (41:63-41:73)
                      identifier [Math] (41:63-41:67)
                      . [.] (41:67-41:68)
                      property_identifier [round] (41:68-41:73)
                    arguments [(baseValue * 0.8)] (41:73-41:90)
                      ( [(] (41:73-41:74)
                      binary_expression [baseValue * 0.8] (41:74-41:89)
                        identifier [baseValue] (41:74-41:83)
                        * [*] (41:84-41:85)
                        number [0.8] (41:86-41:89)
                      ) [)] (41:89-41:90)
                } [}] (41:91-41:92)
              , [,] (41:92-41:93)
              object [{ stage: 'Clicks', value: Math.round(baseValue * dropRate), competitorValue: Math.round(baseValue * dropRate * 0.8) }] (42:4-42:121)
                { [{] (42:4-42:5)
                pair [stage: 'Clicks'] (42:6-42:21)
                  property_identifier [stage] (42:6-42:11)
                  : [:] (42:11-42:12)
                  string ['Clicks'] (42:13-42:21)
                    ' ['] (42:13-42:14)
                    string_fragment [Clicks] (42:14-42:20)
                    ' ['] (42:20-42:21)
                , [,] (42:21-42:22)
                pair [value: Math.round(baseValue * dropRate)] (42:23-42:62)
                  property_identifier [value] (42:23-42:28)
                  : [:] (42:28-42:29)
                  call_expression [Math.round(baseValue * dropRate)] (42:30-42:62)
                    member_expression [Math.round] (42:30-42:40)
                      identifier [Math] (42:30-42:34)
                      . [.] (42:34-42:35)
                      property_identifier [round] (42:35-42:40)
                    arguments [(baseValue * dropRate)] (42:40-42:62)
                      ( [(] (42:40-42:41)
                      binary_expression [baseValue * dropRate] (42:41-42:61)
                        identifier [baseValue] (42:41-42:50)
                        * [*] (42:51-42:52)
                        identifier [dropRate] (42:53-42:61)
                      ) [)] (42:61-42:62)
                , [,] (42:62-42:63)
                pair [competitorValue: Math.round(baseValue * dropRate * 0.8)] (42:64-42:119)
                  property_identifier [competitorValue] (42:64-42:79)
                  : [:] (42:79-42:80)
                  call_expression [Math.round(baseValue * dropRate * 0.8)] (42:81-42:119)
                    member_expression [Math.round] (42:81-42:91)
                      identifier [Math] (42:81-42:85)
                      . [.] (42:85-42:86)
                      property_identifier [round] (42:86-42:91)
                    arguments [(baseValue * dropRate * 0.8)] (42:91-42:119)
                      ( [(] (42:91-42:92)
                      binary_expression [baseValue * dropRate * 0.8] (42:92-42:118)
                        binary_expression [baseValue * dropRate] (42:92-42:112)
                          identifier [baseValue] (42:92-42:101)
                          * [*] (42:102-42:103)
                          identifier [dropRate] (42:104-42:112)
                        * [*] (42:113-42:114)
                        number [0.8] (42:115-42:118)
                      ) [)] (42:118-42:119)
                } [}] (42:120-42:121)
              , [,] (42:121-42:122)
              object [{ stage: 'Sign-ups', value: Math.round(baseValue * dropRate * dropRate), competitorValue: Math.round(baseValue * dropRate * dropRate * 0.8) }] (43:4-43:145)
                { [{] (43:4-43:5)
                pair [stage: 'Sign-ups'] (43:6-43:23)
                  property_identifier [stage] (43:6-43:11)
                  : [:] (43:11-43:12)
                  string ['Sign-ups'] (43:13-43:23)
                    ' ['] (43:13-43:14)
                    string_fragment [Sign-ups] (43:14-43:22)
                    ' ['] (43:22-43:23)
                , [,] (43:23-43:24)
                pair [value: Math.round(baseValue * dropRate * dropRate)] (43:25-43:75)
                  property_identifier [value] (43:25-43:30)
                  : [:] (43:30-43:31)
                  call_expression [Math.round(baseValue * dropRate * dropRate)] (43:32-43:75)
                    member_expression [Math.round] (43:32-43:42)
                      identifier [Math] (43:32-43:36)
                      . [.] (43:36-43:37)
                      property_identifier [round] (43:37-43:42)
                    arguments [(baseValue * dropRate * dropRate)] (43:42-43:75)
                      ( [(] (43:42-43:43)
                      binary_expression [baseValue * dropRate * dropRate] (43:43-43:74)
                        binary_expression [baseValue * dropRate] (43:43-43:63)
                          identifier [baseValue] (43:43-43:52)
                          * [*] (43:53-43:54)
                          identifier [dropRate] (43:55-43:63)
                        * [*] (43:64-43:65)
                        identifier [dropRate] (43:66-43:74)
                      ) [)] (43:74-43:75)
                , [,] (43:75-43:76)
                pair [competitorValue: Math.round(baseValue * dropRate * dropRate * 0.8)] (43:77-43:143)
                  property_identifier [competitorValue] (43:77-43:92)
                  : [:] (43:92-43:93)
                  call_expression [Math.round(baseValue * dropRate * dropRate * 0.8)] (43:94-43:143)
                    member_expression [Math.round] (43:94-43:104)
                      identifier [Math] (43:94-43:98)
                      . [.] (43:98-43:99)
                      property_identifier [round] (43:99-43:104)
                    arguments [(baseValue * dropRate * dropRate * 0.8)] (43:104-43:143)
                      ( [(] (43:104-43:105)
                      binary_expression [baseValue * dropRate * dropRate * 0.8] (43:105-43:142)
                        binary_expression [baseValue * dropRate * dropRate] (43:105-43:136)
                          binary_expression [baseValue * dropRate] (43:105-43:125)
                            identifier [baseValue] (43:105-43:114)
                            * [*] (43:115-43:116)
                            identifier [dropRate] (43:117-43:125)
                          * [*] (43:126-43:127)
                          identifier [dropRate] (43:128-43:136)
                        * [*] (43:137-43:138)
                        number [0.8] (43:139-43:142)
                      ) [)] (43:142-43:143)
                } [}] (43:144-43:145)
              , [,] (43:145-43:146)
              object [{ stage: 'Purchases', value: Math.round(baseValue * Math.pow(dropRate, 3)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 3) * 0.8) }] (44:4-44:150)
                { [{] (44:4-44:5)
                pair [stage: 'Purchases'] (44:6-44:24)
                  property_identifier [stage] (44:6-44:11)
                  : [:] (44:11-44:12)
                  string ['Purchases'] (44:13-44:24)
                    ' ['] (44:13-44:14)
                    string_fragment [Purchases] (44:14-44:23)
                    ' ['] (44:23-44:24)
                , [,] (44:24-44:25)
                pair [value: Math.round(baseValue * Math.pow(dropRate, 3))] (44:26-44:78)
                  property_identifier [value] (44:26-44:31)
                  : [:] (44:31-44:32)
                  call_expression [Math.round(baseValue * Math.pow(dropRate, 3))] (44:33-44:78)
                    member_expression [Math.round] (44:33-44:43)
                      identifier [Math] (44:33-44:37)
                      . [.] (44:37-44:38)
                      property_identifier [round] (44:38-44:43)
                    arguments [(baseValue * Math.pow(dropRate, 3))] (44:43-44:78)
                      ( [(] (44:43-44:44)
                      binary_expression [baseValue * Math.pow(dropRate, 3)] (44:44-44:77)
                        identifier [baseValue] (44:44-44:53)
                        * [*] (44:54-44:55)
                        call_expression [Math.pow(dropRate, 3)] (44:56-44:77)
                          member_expression [Math.pow] (44:56-44:64)
                            identifier [Math] (44:56-44:60)
                            . [.] (44:60-44:61)
                            property_identifier [pow] (44:61-44:64)
                          arguments [(dropRate, 3)] (44:64-44:77)
                            ( [(] (44:64-44:65)
                            identifier [dropRate] (44:65-44:73)
                            , [,] (44:73-44:74)
                            number [3] (44:75-44:76)
                            ) [)] (44:76-44:77)
                      ) [)] (44:77-44:78)
                , [,] (44:78-44:79)
                pair [competitorValue: Math.round(baseValue * Math.pow(dropRate, 3) * 0.8)] (44:80-44:148)
                  property_identifier [competitorValue] (44:80-44:95)
                  : [:] (44:95-44:96)
                  call_expression [Math.round(baseValue * Math.pow(dropRate, 3) * 0.8)] (44:97-44:148)
                    member_expression [Math.round] (44:97-44:107)
                      identifier [Math] (44:97-44:101)
                      . [.] (44:101-44:102)
                      property_identifier [round] (44:102-44:107)
                    arguments [(baseValue * Math.pow(dropRate, 3) * 0.8)] (44:107-44:148)
                      ( [(] (44:107-44:108)
                      binary_expression [baseValue * Math.pow(dropRate, 3) * 0.8] (44:108-44:147)
                        binary_expression [baseValue * Math.pow(dropRate, 3)] (44:108-44:141)
                          identifier [baseValue] (44:108-44:117)
                          * [*] (44:118-44:119)
                          call_expression [Math.pow(dropRate, 3)] (44:120-44:141)
                            member_expression [Math.pow] (44:120-44:128)
                              identifier [Math] (44:120-44:124)
                              . [.] (44:124-44:125)
                              property_identifier [pow] (44:125-44:128)
                            arguments [(dropRate, 3)] (44:128-44:141)
                              ( [(] (44:128-44:129)
                              identifier [dropRate] (44:129-44:137)
                              , [,] (44:137-44:138)
                              number [3] (44:139-44:140)
                              ) [)] (44:140-44:141)
                        * [*] (44:142-44:143)
                        number [0.8] (44:144-44:147)
                      ) [)] (44:147-44:148)
                } [}] (44:149-44:150)
              , [,] (44:150-44:151)
              object [{ stage: 'Retention', value: Math.round(baseValue * Math.pow(dropRate, 4)), competitorValue: Math.round(baseValue * Math.pow(dropRate, 4) * 0.8) }] (45:4-45:150)
                { [{] (45:4-45:5)
                pair [stage: 'Retention'] (45:6-45:24)
                  property_identifier [stage] (45:6-45:11)
                  : [:] (45:11-45:12)
                  string ['Retention'] (45:13-45:24)
                    ' ['] (45:13-45:14)
                    string_fragment [Retention] (45:14-45:23)
                    ' ['] (45:23-45:24)
                , [,] (45:24-45:25)
                pair [value: Math.round(baseValue * Math.pow(dropRate, 4))] (45:26-45:78)
                  property_identifier [value] (45:26-45:31)
                  : [:] (45:31-45:32)
                  call_expression [Math.round(baseValue * Math.pow(dropRate, 4))] (45:33-45:78)
                    member_expression [Math.round] (45:33-45:43)
                      identifier [Math] (45:33-45:37)
                      . [.] (45:37-45:38)
                      property_identifier [round] (45:38-45:43)
                    arguments [(baseValue * Math.pow(dropRate, 4))] (45:43-45:78)
                      ( [(] (45:43-45:44)
                      binary_expression [baseValue * Math.pow(dropRate, 4)] (45:44-45:77)
                        identifier [baseValue] (45:44-45:53)
                        * [*] (45:54-45:55)
                        call_expression [Math.pow(dropRate, 4)] (45:56-45:77)
                          member_expression [Math.pow] (45:56-45:64)
                            identifier [Math] (45:56-45:60)
                            . [.] (45:60-45:61)
                            property_identifier [pow] (45:61-45:64)
                          arguments [(dropRate, 4)] (45:64-45:77)
                            ( [(] (45:64-45:65)
                            identifier [dropRate] (45:65-45:73)
                            , [,] (45:73-45:74)
                            number [4] (45:75-45:76)
                            ) [)] (45:76-45:77)
                      ) [)] (45:77-45:78)
                , [,] (45:78-45:79)
                pair [competitorValue: Math.round(baseValue * Math.pow(dropRate, 4) * 0.8)] (45:80-45:148)
                  property_identifier [competitorValue] (45:80-45:95)
                  : [:] (45:95-45:96)
                  call_expression [Math.round(baseValue * Math.pow(dropRate, 4) * 0.8)] (45:97-45:148)
                    member_expression [Math.round] (45:97-45:107)
                      identifier [Math] (45:97-45:101)
                      . [.] (45:101-45:102)
                      property_identifier [round] (45:102-45:107)
                    arguments [(baseValue * Math.pow(dropRate, 4) * 0.8)] (45:107-45:148)
                      ( [(] (45:107-45:108)
                      binary_expression [baseValue * Math.pow(dropRate, 4) * 0.8] (45:108-45:147)
                        binary_expression [baseValue * Math.pow(dropRate, 4)] (45:108-45:141)
                          identifier [baseValue] (45:108-45:117)
                          * [*] (45:118-45:119)
                          call_expression [Math.pow(dropRate, 4)] (45:120-45:141)
                            member_expression [Math.pow] (45:120-45:128)
                              identifier [Math] (45:120-45:124)
                              . [.] (45:124-45:125)
                              property_identifier [pow] (45:125-45:128)
                            arguments [(dropRate, 4)] (45:128-45:141)
                              ( [(] (45:128-45:129)
                              identifier [dropRate] (45:129-45:137)
                              , [,] (45:137-45:138)
                              number [4] (45:139-45:140)
                              ) [)] (45:140-45:141)
                        * [*] (45:142-45:143)
                        number [0.8] (45:144-45:147)
                      ) [)] (45:147-45:148)
                } [}] (45:149-45:150)
              ] []] (46:2-46:3)
            ; [;] (46:3-46:4)
          } [}] (47:0-47:1)
    ; [;] (47:1-47:2)
  comment [// 5. ROI Comparison Data] (49:0-49:25)
  lexical_declaration [const generateROIData = () => ([
  { month: 'Jan', ...generateMonthlyROI() },
  { month: 'Feb', ...generateMonthlyROI() },
  { month: 'Mar', ...generateMonthlyROI() },
  { month: 'Apr', ...generateMonthlyROI() },
  { month: 'May', ...generateMonthlyROI() }
]);] (50:0-56:3)
    const [const] (50:0-50:5)
    variable_declarator [generateROIData = () => ([
  { month: 'Jan', ...generateMonthlyROI() },
  { month: 'Feb', ...generateMonthlyROI() },
  { month: 'Mar', ...generateMonthlyROI() },
  { month: 'Apr', ...generateMonthlyROI() },
  { month: 'May', ...generateMonthlyROI() }
])] (50:6-56:2)
      identifier [generateROIData] (50:6-50:21)
      = [=] (50:22-50:23)
      arrow_function [() => ([
  { month: 'Jan', ...generateMonthlyROI() },
  { month: 'Feb', ...generateMonthlyROI() },
  { month: 'Mar', ...generateMonthlyROI() },
  { month: 'Apr', ...generateMonthlyROI() },
  { month: 'May', ...generateMonthlyROI() }
])] (50:24-56:2)
        formal_parameters [()] (50:24-50:26)
          ( [(] (50:24-50:25)
          ) [)] (50:25-50:26)
        => [=>] (50:27-50:29)
        parenthesized_expression [([
  { month: 'Jan', ...generateMonthlyROI() },
  { month: 'Feb', ...generateMonthlyROI() },
  { month: 'Mar', ...generateMonthlyROI() },
  { month: 'Apr', ...generateMonthlyROI() },
  { month: 'May', ...generateMonthlyROI() }
])] (50:30-56:2)
          ( [(] (50:30-50:31)
          array [[
  { month: 'Jan', ...generateMonthlyROI() },
  { month: 'Feb', ...generateMonthlyROI() },
  { month: 'Mar', ...generateMonthlyROI() },
  { month: 'Apr', ...generateMonthlyROI() },
  { month: 'May', ...generateMonthlyROI() }
]] (50:31-56:1)
            [ [[] (50:31-50:32)
            object [{ month: 'Jan', ...generateMonthlyROI() }] (51:2-51:43)
              { [{] (51:2-51:3)
              pair [month: 'Jan'] (51:4-51:16)
                property_identifier [month] (51:4-51:9)
                : [:] (51:9-51:10)
                string ['Jan'] (51:11-51:16)
                  ' ['] (51:11-51:12)
                  string_fragment [Jan] (51:12-51:15)
                  ' ['] (51:15-51:16)
              , [,] (51:16-51:17)
              spread_element [...generateMonthlyROI()] (51:18-51:41)
                ... [...] (51:18-51:21)
                call_expression [generateMonthlyROI()] (51:21-51:41)
                  identifier [generateMonthlyROI] (51:21-51:39)
                  arguments [()] (51:39-51:41)
                    ( [(] (51:39-51:40)
                    ) [)] (51:40-51:41)
              } [}] (51:42-51:43)
            , [,] (51:43-51:44)
            object [{ month: 'Feb', ...generateMonthlyROI() }] (52:2-52:43)
              { [{] (52:2-52:3)
              pair [month: 'Feb'] (52:4-52:16)
                property_identifier [month] (52:4-52:9)
                : [:] (52:9-52:10)
                string ['Feb'] (52:11-52:16)
                  ' ['] (52:11-52:12)
                  string_fragment [Feb] (52:12-52:15)
                  ' ['] (52:15-52:16)
              , [,] (52:16-52:17)
              spread_element [...generateMonthlyROI()] (52:18-52:41)
                ... [...] (52:18-52:21)
                call_expression [generateMonthlyROI()] (52:21-52:41)
                  identifier [generateMonthlyROI] (52:21-52:39)
                  arguments [()] (52:39-52:41)
                    ( [(] (52:39-52:40)
                    ) [)] (52:40-52:41)
              } [}] (52:42-52:43)
            , [,] (52:43-52:44)
            object [{ month: 'Mar', ...generateMonthlyROI() }] (53:2-53:43)
              { [{] (53:2-53:3)
              pair [month: 'Mar'] (53:4-53:16)
                property_identifier [month] (53:4-53:9)
                : [:] (53:9-53:10)
                string ['Mar'] (53:11-53:16)
                  ' ['] (53:11-53:12)
                  string_fragment [Mar] (53:12-53:15)
                  ' ['] (53:15-53:16)
              , [,] (53:16-53:17)
              spread_element [...generateMonthlyROI()] (53:18-53:41)
                ... [...] (53:18-53:21)
                call_expression [generateMonthlyROI()] (53:21-53:41)
                  identifier [generateMonthlyROI] (53:21-53:39)
                  arguments [()] (53:39-53:41)
                    ( [(] (53:39-53:40)
                    ) [)] (53:40-53:41)
              } [}] (53:42-53:43)
            , [,] (53:43-53:44)
            object [{ month: 'Apr', ...generateMonthlyROI() }] (54:2-54:43)
              { [{] (54:2-54:3)
              pair [month: 'Apr'] (54:4-54:16)
                property_identifier [month] (54:4-54:9)
                : [:] (54:9-54:10)
                string ['Apr'] (54:11-54:16)
                  ' ['] (54:11-54:12)
                  string_fragment [Apr] (54:12-54:15)
                  ' ['] (54:15-54:16)
              , [,] (54:16-54:17)
              spread_element [...generateMonthlyROI()] (54:18-54:41)
                ... [...] (54:18-54:21)
                call_expression [generateMonthlyROI()] (54:21-54:41)
                  identifier [generateMonthlyROI] (54:21-54:39)
                  arguments [()] (54:39-54:41)
                    ( [(] (54:39-54:40)
                    ) [)] (54:40-54:41)
              } [}] (54:42-54:43)
            , [,] (54:43-54:44)
            object [{ month: 'May', ...generateMonthlyROI() }] (55:2-55:43)
              { [{] (55:2-55:3)
              pair [month: 'May'] (55:4-55:16)
                property_identifier [month] (55:4-55:9)
                : [:] (55:9-55:10)
                string ['May'] (55:11-55:16)
                  ' ['] (55:11-55:12)
                  string_fragment [May] (55:12-55:15)
                  ' ['] (55:15-55:16)
              , [,] (55:16-55:17)
              spread_element [...generateMonthlyROI()] (55:18-55:41)
                ... [...] (55:18-55:21)
                call_expression [generateMonthlyROI()] (55:21-55:41)
                  identifier [generateMonthlyROI] (55:21-55:39)
                  arguments [()] (55:39-55:41)
                    ( [(] (55:39-55:40)
                    ) [)] (55:40-55:41)
              } [}] (55:42-55:43)
            ] []] (56:0-56:1)
          ) [)] (56:1-56:2)
    ; [;] (56:2-56:3)
  comment [// Helper function for ROI data generation] (58:0-58:42)
  lexical_declaration [const generateMonthlyROI = () => {
  const cost = randomInRange(300, 600);
  const revenue = cost + randomInRange(100, 400);
  const profit = revenue - cost;
  const competitorCost = cost + randomInRange(-50, 50);
  const competitorRevenue = competitorCost + randomInRange(50, 350);
  const competitorProfit = competitorRevenue - competitorCost;
  return {
    cost,
    revenue,
    profit,
    competitorCost,
    competitorRevenue,
    competitorProfit
  };
};] (59:0-74:2)
    const [const] (59:0-59:5)
    variable_declarator [generateMonthlyROI = () => {
  const cost = randomInRange(300, 600);
  const revenue = cost + randomInRange(100, 400);
  const profit = revenue - cost;
  const competitorCost = cost + randomInRange(-50, 50);
  const competitorRevenue = competitorCost + randomInRange(50, 350);
  const competitorProfit = competitorRevenue - competitorCost;
  return {
    cost,
    revenue,
    profit,
    competitorCost,
    competitorRevenue,
    competitorProfit
  };
}] (59:6-74:1)
      identifier [generateMonthlyROI] (59:6-59:24)
      = [=] (59:25-59:26)
      arrow_function [() => {
  const cost = randomInRange(300, 600);
  const revenue = cost + randomInRange(100, 400);
  const profit = revenue - cost;
  const competitorCost = cost + randomInRange(-50, 50);
  const competitorRevenue = competitorCost + randomInRange(50, 350);
  const competitorProfit = competitorRevenue - competitorCost;
  return {
    cost,
    revenue,
    profit,
    competitorCost,
    competitorRevenue,
    competitorProfit
  };
}] (59:27-74:1)
        formal_parameters [()] (59:27-59:29)
          ( [(] (59:27-59:28)
          ) [)] (59:28-59:29)
        => [=>] (59:30-59:32)
        statement_block [{
  const cost = randomInRange(300, 600);
  const revenue = cost + randomInRange(100, 400);
  const profit = revenue - cost;
  const competitorCost = cost + randomInRange(-50, 50);
  const competitorRevenue = competitorCost + randomInRange(50, 350);
  const competitorProfit = competitorRevenue - competitorCost;
  return {
    cost,
    revenue,
    profit,
    competitorCost,
    competitorRevenue,
    competitorProfit
  };
}] (59:33-74:1)
          { [{] (59:33-59:34)
          lexical_declaration [const cost = randomInRange(300, 600);] (60:2-60:39)
            const [const] (60:2-60:7)
            variable_declarator [cost = randomInRange(300, 600)] (60:8-60:38)
              identifier [cost] (60:8-60:12)
              = [=] (60:13-60:14)
              call_expression [randomInRange(300, 600)] (60:15-60:38)
                identifier [randomInRange] (60:15-60:28)
                arguments [(300, 600)] (60:28-60:38)
                  ( [(] (60:28-60:29)
                  number [300] (60:29-60:32)
                  , [,] (60:32-60:33)
                  number [600] (60:34-60:37)
                  ) [)] (60:37-60:38)
            ; [;] (60:38-60:39)
          lexical_declaration [const revenue = cost + randomInRange(100, 400);] (61:2-61:49)
            const [const] (61:2-61:7)
            variable_declarator [revenue = cost + randomInRange(100, 400)] (61:8-61:48)
              identifier [revenue] (61:8-61:15)
              = [=] (61:16-61:17)
              binary_expression [cost + randomInRange(100, 400)] (61:18-61:48)
                identifier [cost] (61:18-61:22)
                + [+] (61:23-61:24)
                call_expression [randomInRange(100, 400)] (61:25-61:48)
                  identifier [randomInRange] (61:25-61:38)
                  arguments [(100, 400)] (61:38-61:48)
                    ( [(] (61:38-61:39)
                    number [100] (61:39-61:42)
                    , [,] (61:42-61:43)
                    number [400] (61:44-61:47)
                    ) [)] (61:47-61:48)
            ; [;] (61:48-61:49)
          lexical_declaration [const profit = revenue - cost;] (62:2-62:32)
            const [const] (62:2-62:7)
            variable_declarator [profit = revenue - cost] (62:8-62:31)
              identifier [profit] (62:8-62:14)
              = [=] (62:15-62:16)
              binary_expression [revenue - cost] (62:17-62:31)
                identifier [revenue] (62:17-62:24)
                - [-] (62:25-62:26)
                identifier [cost] (62:27-62:31)
            ; [;] (62:31-62:32)
          lexical_declaration [const competitorCost = cost + randomInRange(-50, 50);] (63:2-63:55)
            const [const] (63:2-63:7)
            variable_declarator [competitorCost = cost + randomInRange(-50, 50)] (63:8-63:54)
              identifier [competitorCost] (63:8-63:22)
              = [=] (63:23-63:24)
              binary_expression [cost + randomInRange(-50, 50)] (63:25-63:54)
                identifier [cost] (63:25-63:29)
                + [+] (63:30-63:31)
                call_expression [randomInRange(-50, 50)] (63:32-63:54)
                  identifier [randomInRange] (63:32-63:45)
                  arguments [(-50, 50)] (63:45-63:54)
                    ( [(] (63:45-63:46)
                    unary_expression [-50] (63:46-63:49)
                      - [-] (63:46-63:47)
                      number [50] (63:47-63:49)
                    , [,] (63:49-63:50)
                    number [50] (63:51-63:53)
                    ) [)] (63:53-63:54)
            ; [;] (63:54-63:55)
          lexical_declaration [const competitorRevenue = competitorCost + randomInRange(50, 350);] (64:2-64:68)
            const [const] (64:2-64:7)
            variable_declarator [competitorRevenue = competitorCost + randomInRange(50, 350)] (64:8-64:67)
              identifier [competitorRevenue] (64:8-64:25)
              = [=] (64:26-64:27)
              binary_expression [competitorCost + randomInRange(50, 350)] (64:28-64:67)
                identifier [competitorCost] (64:28-64:42)
                + [+] (64:43-64:44)
                call_expression [randomInRange(50, 350)] (64:45-64:67)
                  identifier [randomInRange] (64:45-64:58)
                  arguments [(50, 350)] (64:58-64:67)
                    ( [(] (64:58-64:59)
                    number [50] (64:59-64:61)
                    , [,] (64:61-64:62)
                    number [350] (64:63-64:66)
                    ) [)] (64:66-64:67)
            ; [;] (64:67-64:68)
          lexical_declaration [const competitorProfit = competitorRevenue - competitorCost;] (65:2-65:62)
            const [const] (65:2-65:7)
            variable_declarator [competitorProfit = competitorRevenue - competitorCost] (65:8-65:61)
              identifier [competitorProfit] (65:8-65:24)
              = [=] (65:25-65:26)
              binary_expression [competitorRevenue - competitorCost] (65:27-65:61)
                identifier [competitorRevenue] (65:27-65:44)
                - [-] (65:45-65:46)
                identifier [competitorCost] (65:47-65:61)
            ; [;] (65:61-65:62)
          return_statement [return {
    cost,
    revenue,
    profit,
    competitorCost,
    competitorRevenue,
    competitorProfit
  };] (66:2-73:4)
            return [return] (66:2-66:8)
            object [{
    cost,
    revenue,
    profit,
    competitorCost,
    competitorRevenue,
    competitorProfit
  }] (66:9-73:3)
              { [{] (66:9-66:10)
              shorthand_property_identifier [cost] (67:4-67:8)
              , [,] (67:8-67:9)
              shorthand_property_identifier [revenue] (68:4-68:11)
              , [,] (68:11-68:12)
              shorthand_property_identifier [profit] (69:4-69:10)
              , [,] (69:10-69:11)
              shorthand_property_identifier [competitorCost] (70:4-70:18)
              , [,] (70:18-70:19)
              shorthand_property_identifier [competitorRevenue] (71:4-71:21)
              , [,] (71:21-71:22)
              shorthand_property_identifier [competitorProfit] (72:4-72:20)
              } [}] (73:2-73:3)
            ; [;] (73:3-73:4)
          } [}] (74:0-74:1)
    ; [;] (74:1-74:2)
  export [export] (76:0-76:6)
  const [const] (76:7-76:12)
  identifier [PerformanceRadar] (76:13-76:29)
  = [=] (76:30-76:31)
  formal_parameters [({ showCompetitor = false })] (76:32-76:60)
    ( [(] (76:32-76:33)
    required_parameter [{ showCompetitor = false }] (76:33-76:59)
      object_pattern [{ showCompetitor = false }] (76:33-76:59)
        { [{] (76:33-76:34)
        object_assignment_pattern [showCompetitor = false] (76:35-76:57)
          shorthand_property_identifier_pattern [showCompetitor] (76:35-76:49)
          = [=] (76:50-76:51)
          false [false] (76:52-76:57)
        } [}] (76:58-76:59)
    ) [)] (76:59-76:60)
  => [=>] (76:61-76:63)
  { [{] (76:64-76:65)
  lexical_declaration [const [activeRadar, setActiveRadar] = useState(null);] (77:2-77:55)
    const [const] (77:2-77:7)
    variable_declarator [[activeRadar, setActiveRadar] = useState(null)] (77:8-77:54)
      array_pattern [[activeRadar, setActiveRadar]] (77:8-77:37)
        [ [[] (77:8-77:9)
        identifier [activeRadar] (77:9-77:20)
        , [,] (77:20-77:21)
        identifier [setActiveRadar] (77:22-77:36)
        ] []] (77:36-77:37)
      = [=] (77:38-77:39)
      call_expression [useState(null)] (77:40-77:54)
        identifier [useState] (77:40-77:48)
        arguments [(null)] (77:48-77:54)
          ( [(] (77:48-77:49)
          null [null] (77:49-77:53)
          ) [)] (77:53-77:54)
    ; [;] (77:54-77:55)
  lexical_declaration [const [data, setData] = useState([]);] (78:2-78:39)
    const [const] (78:2-78:7)
    variable_declarator [[data, setData] = useState([])] (78:8-78:38)
      array_pattern [[data, setData]] (78:8-78:23)
        [ [[] (78:8-78:9)
        identifier [data] (78:9-78:13)
        , [,] (78:13-78:14)
        identifier [setData] (78:15-78:22)
        ] []] (78:22-78:23)
      = [=] (78:24-78:25)
      call_expression [useState([])] (78:26-78:38)
        identifier [useState] (78:26-78:34)
        arguments [([])] (78:34-78:38)
          ( [(] (78:34-78:35)
          array [[]] (78:35-78:37)
            [ [[] (78:35-78:36)
            ] []] (78:36-78:37)
          ) [)] (78:37-78:38)
    ; [;] (78:38-78:39)
  expression_statement [useEffect(() => {
    setData(generateRadarData());
  }, []);] (80:2-82:9)
    call_expression [useEffect(() => {
    setData(generateRadarData());
  }, [])] (80:2-82:8)
      identifier [useEffect] (80:2-80:11)
      arguments [(() => {
    setData(generateRadarData());
  }, [])] (80:11-82:8)
        ( [(] (80:11-80:12)
        arrow_function [() => {
    setData(generateRadarData());
  }] (80:12-82:3)
          formal_parameters [()] (80:12-80:14)
            ( [(] (80:12-80:13)
            ) [)] (80:13-80:14)
          => [=>] (80:15-80:17)
          statement_block [{
    setData(generateRadarData());
  }] (80:18-82:3)
            { [{] (80:18-80:19)
            expression_statement [setData(generateRadarData());] (81:4-81:33)
              call_expression [setData(generateRadarData())] (81:4-81:32)
                identifier [setData] (81:4-81:11)
                arguments [(generateRadarData())] (81:11-81:32)
                  ( [(] (81:11-81:12)
                  call_expression [generateRadarData()] (81:12-81:31)
                    identifier [generateRadarData] (81:12-81:29)
                    arguments [()] (81:29-81:31)
                      ( [(] (81:29-81:30)
                      ) [)] (81:30-81:31)
                  ) [)] (81:31-81:32)
              ; [;] (81:32-81:33)
            } [}] (82:2-82:3)
        , [,] (82:3-82:4)
        array [[]] (82:5-82:7)
          [ [[] (82:5-82:6)
          ] []] (82:6-82:7)
        ) [)] (82:7-82:8)
    ; [;] (82:8-82:9)
  lexical_declaration [const handleMouseEnter = (platform) => {
    setActiveRadar(platform);
  };] (84:2-86:4)
    const [const] (84:2-84:7)
    variable_declarator [handleMouseEnter = (platform) => {
    setActiveRadar(platform);
  }] (84:8-86:3)
      identifier [handleMouseEnter] (84:8-84:24)
      = [=] (84:25-84:26)
      arrow_function [(platform) => {
    setActiveRadar(platform);
  }] (84:27-86:3)
        formal_parameters [(platform)] (84:27-84:37)
          ( [(] (84:27-84:28)
          required_parameter [platform] (84:28-84:36)
            identifier [platform] (84:28-84:36)
          ) [)] (84:36-84:37)
        => [=>] (84:38-84:40)
        statement_block [{
    setActiveRadar(platform);
  }] (84:41-86:3)
          { [{] (84:41-84:42)
          expression_statement [setActiveRadar(platform);] (85:4-85:29)
            call_expression [setActiveRadar(platform)] (85:4-85:28)
              identifier [setActiveRadar] (85:4-85:18)
              arguments [(platform)] (85:18-85:28)
                ( [(] (85:18-85:19)
                identifier [platform] (85:19-85:27)
                ) [)] (85:27-85:28)
            ; [;] (85:28-85:29)
          } [}] (86:2-86:3)
    ; [;] (86:3-86:4)
  lexical_declaration [const handleMouseLeave = () => {
    setActiveRadar(null);
  };] (88:2-90:4)
    const [const] (88:2-88:7)
    variable_declarator [handleMouseLeave = () => {
    setActiveRadar(null);
  }] (88:8-90:3)
      identifier [handleMouseLeave] (88:8-88:24)
      = [=] (88:25-88:26)
      arrow_function [() => {
    setActiveRadar(null);
  }] (88:27-90:3)
        formal_parameters [()] (88:27-88:29)
          ( [(] (88:27-88:28)
          ) [)] (88:28-88:29)
        => [=>] (88:30-88:32)
        statement_block [{
    setActiveRadar(null);
  }] (88:33-90:3)
          { [{] (88:33-88:34)
          expression_statement [setActiveRadar(null);] (89:4-89:25)
            call_expression [setActiveRadar(null)] (89:4-89:24)
              identifier [setActiveRadar] (89:4-89:18)
              arguments [(null)] (89:18-89:24)
                ( [(] (89:18-89:19)
                null [null] (89:19-89:23)
                ) [)] (89:23-89:24)
            ; [;] (89:24-89:25)
          } [}] (90:2-90:3)
    ; [;] (90:3-90:4)
  return [return] (92:2-92:8)
  ( [(] (92:9-92:10)
  type_arguments [<div] (93:4-93:8)
    < [<] (93:4-93:5)
    type_identifier [div] (93:5-93:8)
    > [] (93:8-93:8)
  identifier [className] (93:9-93:18)
  = [=] (93:18-93:19)
  string ["h-96 w-full"] (93:19-93:32)
    " ["] (93:19-93:20)
    string_fragment [h-96 w-full] (93:20-93:31)
    " ["] (93:31-93:32)
  > [>] (93:32-93:33)
  ERROR [<ResponsiveContainer width="100%" height="100%">
        <RadarChart cx="50%" cy="50%" outerRadius="80%" data={data}>] (94:6-95:68)
    type_parameters [<ResponsiveContainer width="100%" height="100%">] (94:6-94:54)
      < [<] (94:6-94:7)
      type_parameter [ResponsiveContainer width="100%" height="100%"] (94:7-94:53)
        type_identifier [ResponsiveContainer] (94:7-94:26)
        ERROR [width] (94:27-94:32)
          identifier [width] (94:27-94:32)
        default_type [="100%" height="100%"] (94:32-94:53)
          = [=] (94:32-94:33)
          ERROR ["100%" height=] (94:33-94:47)
            literal_type ["100%"] (94:33-94:39)
              string ["100%"] (94:33-94:39)
                " ["] (94:33-94:34)
                string_fragment [100%] (94:34-94:38)
                " ["] (94:38-94:39)
            identifier [height] (94:40-94:46)
            = [=] (94:46-94:47)
          literal_type ["100%"] (94:47-94:53)
            string ["100%"] (94:47-94:53)
              " ["] (94:47-94:48)
              string_fragment [100%] (94:48-94:52)
              " ["] (94:52-94:53)
      > [>] (94:53-94:54)
    type_parameters [<RadarChart cx="50%" cy="50%" outerRadius="80%" data={data}>] (95:8-95:68)
      < [<] (95:8-95:9)
      type_parameter [RadarChart cx="50%" cy="50%" outerRadius="80%" data={data] (95:9-95:66)
        type_identifier [RadarChart] (95:9-95:19)
        ERROR [cx] (95:20-95:22)
          identifier [cx] (95:20-95:22)
        default_type [="50%" cy="50%" outerRadius="80%" data={data] (95:22-95:66)
          = [=] (95:22-95:23)
          ERROR ["50%" cy="50%" outerRadius="80%" data={] (95:23-95:62)
            literal_type ["50%"] (95:23-95:28)
              string ["50%"] (95:23-95:28)
                " ["] (95:23-95:24)
                string_fragment [50%] (95:24-95:27)
                " ["] (95:27-95:28)
            identifier [cy] (95:29-95:31)
            = [=] (95:31-95:32)
            literal_type ["50%"] (95:32-95:37)
              string ["50%"] (95:32-95:37)
                " ["] (95:32-95:33)
                string_fragment [50%] (95:33-95:36)
                " ["] (95:36-95:37)
            type_identifier [outerRadius] (95:38-95:49)
            = [=] (95:49-95:50)
            literal_type ["80%"] (95:50-95:55)
              string ["80%"] (95:50-95:55)
                " ["] (95:50-95:51)
                string_fragment [80%] (95:51-95:54)
                " ["] (95:54-95:55)
            identifier [data] (95:56-95:60)
            = [=] (95:60-95:61)
            { [{] (95:61-95:62)
          type_identifier [data] (95:62-95:66)
      ERROR [}] (95:66-95:67)
        } [}] (95:66-95:67)
      > [>] (95:67-95:68)
  type_arguments [<PolarGrid] (96:10-96:20)
    < [<] (96:10-96:11)
    type_identifier [PolarGrid] (96:11-96:20)
    > [] (96:20-96:20)
  identifier [strokeDasharray] (96:21-96:36)
  = [=] (96:36-96:37)
  string ["3 3"] (96:37-96:42)
    " ["] (96:37-96:38)
    string_fragment [3 3] (96:38-96:41)
    " ["] (96:41-96:42)
  / [/] (96:43-96:44)
  ERROR [>
          <PolarAngleAxis
            dataKey="metric"
            tick={{ fill: '#666', fontSize: 14 }}
          />
          <PolarRadiusAxis angle={30} domain={[0, 150]} />
          
          <Tooltip 
            animationDuration={200}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '6px',
              padding: '8px',
              border: '1px solid #ccc'
            }}
          />] (96:44-111:12)
    > [>] (96:44-96:45)
    < [<] (97:10-97:11)
    type_parameter [PolarAngleAxis
            dataKey="metric"
            tick={{ fill: '#666'] (97:11-99:32)
      type_identifier [PolarAngleAxis] (97:11-97:25)
      ERROR [dataKey] (98:12-98:19)
        identifier [dataKey] (98:12-98:19)
      default_type [="metric"
            tick={{ fill: '#666'] (98:19-99:32)
        = [=] (98:19-98:20)
        ERROR ["metric"
            tick={{ fill:] (98:20-99:25)
          literal_type ["metric"] (98:20-98:28)
            string ["metric"] (98:20-98:28)
              " ["] (98:20-98:21)
              string_fragment [metric] (98:21-98:27)
              " ["] (98:27-98:28)
          identifier [tick] (99:12-99:16)
          = [=] (99:16-99:17)
          { [{] (99:17-99:18)
          { [{] (99:18-99:19)
          identifier [fill] (99:20-99:24)
          : [:] (99:24-99:25)
        literal_type ['#666'] (99:26-99:32)
          string ['#666'] (99:26-99:32)
            ' ['] (99:26-99:27)
            string_fragment [#666] (99:27-99:31)
            ' ['] (99:31-99:32)
    , [,] (99:32-99:33)
    type_parameter [fontSize: 14] (99:34-99:46)
      type_identifier [fontSize] (99:34-99:42)
      constraint [: 14] (99:42-99:46)
        : [:] (99:42-99:43)
        literal_type [14] (99:44-99:46)
          number [14] (99:44-99:46)
    } [}] (99:47-99:48)
    } [}] (99:48-99:49)
    / [/] (100:10-100:11)
    regex_pattern [>] (100:11-100:12)
    < [<] (101:10-101:11)
    type_parameter [PolarRadiusAxis angle={30} domain={[0, 150]] (101:11-101:54)
      type_identifier [PolarRadiusAxis] (101:11-101:26)
      ERROR [angle] (101:27-101:32)
        identifier [angle] (101:27-101:32)
      default_type [={30} domain={[0, 150]] (101:32-101:54)
        = [=] (101:32-101:33)
        lookup_type [{30} domain={[0, 150]] (101:33-101:54)
          object_type [{30}] (101:33-101:37)
            { [{] (101:33-101:34)
            property_signature [30] (101:34-101:36)
              number [30] (101:34-101:36)
            } [}] (101:36-101:37)
          ERROR [domain={] (101:38-101:46)
            identifier [domain] (101:38-101:44)
            = [=] (101:44-101:45)
            { [{] (101:45-101:46)
          [ [[] (101:46-101:47)
          ERROR [0,] (101:47-101:49)
            literal_type [0] (101:47-101:48)
              number [0] (101:47-101:48)
            , [,] (101:48-101:49)
          literal_type [150] (101:50-101:53)
            number [150] (101:50-101:53)
          ] []] (101:53-101:54)
    } [}] (101:54-101:55)
    / [/] (101:56-101:57)
    regex_pattern [>] (101:57-101:58)
    type_parameters [<Tooltip 
            animationDuration={200}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '6px',
              padding: '8px',
              border: '1px solid #ccc'
            }}
          />] (103:10-111:12)
      < [<] (103:10-103:11)
      ERROR [Tooltip] (103:11-103:18)
        identifier [Tooltip] (103:11-103:18)
      type_parameter [animationDuration={200}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)'] (104:12-106:57)
        type_identifier [animationDuration] (104:12-104:29)
        default_type [={200}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)'] (104:29-106:57)
          = [=] (104:29-104:30)
          ERROR [{200}
            contentStyle={{
              backgroundColor:] (104:30-106:30)
            object_type [{200}] (104:30-104:35)
              { [{] (104:30-104:31)
              property_signature [200] (104:31-104:34)
                number [200] (104:31-104:34)
              } [}] (104:34-104:35)
            identifier [contentStyle] (105:12-105:24)
            = [=] (105:24-105:25)
            { [{] (105:25-105:26)
            { [{] (105:26-105:27)
            type_identifier [backgroundColor] (106:14-106:29)
            : [:] (106:29-106:30)
          literal_type ['rgba(255, 255, 255, 0.9)'] (106:31-106:57)
            string ['rgba(255, 255, 255, 0.9)'] (106:31-106:57)
              ' ['] (106:31-106:32)
              string_fragment [rgba(255, 255, 255, 0.9)] (106:32-106:56)
              ' ['] (106:56-106:57)
      , [,] (106:57-106:58)
      type_parameter [borderRadius: '6px'] (107:14-107:33)
        type_identifier [borderRadius] (107:14-107:26)
        constraint [: '6px'] (107:26-107:33)
          : [:] (107:26-107:27)
          literal_type ['6px'] (107:28-107:33)
            string ['6px'] (107:28-107:33)
              ' ['] (107:28-107:29)
              string_fragment [6px] (107:29-107:32)
              ' ['] (107:32-107:33)
      , [,] (107:33-107:34)
      type_parameter [padding: '8px'] (108:14-108:28)
        type_identifier [padding] (108:14-108:21)
        constraint [: '8px'] (108:21-108:28)
          : [:] (108:21-108:22)
          literal_type ['8px'] (108:23-108:28)
            string ['8px'] (108:23-108:28)
              ' ['] (108:23-108:24)
              string_fragment [8px] (108:24-108:27)
              ' ['] (108:27-108:28)
      , [,] (108:28-108:29)
      type_parameter [border: '1px solid #ccc'] (109:14-109:38)
        type_identifier [border] (109:14-109:20)
        constraint [: '1px solid #ccc'] (109:20-109:38)
          : [:] (109:20-109:21)
          literal_type ['1px solid #ccc'] (109:22-109:38)
            string ['1px solid #ccc'] (109:22-109:38)
              ' ['] (109:22-109:23)
              string_fragment [1px solid #ccc] (109:23-109:37)
              ' ['] (109:37-109:38)
      ERROR [}}
          /] (110:12-111:11)
        } [}] (110:12-110:13)
        } [}] (110:13-110:14)
        / [/] (111:10-111:11)
      > [>] (111:11-111:12)
  type_arguments [<Legend] (113:10-113:17)
    < [<] (113:10-113:11)
    type_identifier [Legend] (113:11-113:17)
    > [] (113:17-113:17)
  identifier [wrapperStyle] (114:12-114:24)
  = [=] (114:24-114:25)
  { [{] (114:25-114:26)
  { [{] (114:26-114:27)
  property_identifier [paddingTop] (115:14-115:24)
  : [:] (115:24-115:25)
  ERROR ['20px'
            }}] (115:26-116:14)
    string ['20px'] (115:26-115:32)
      ' ['] (115:26-115:27)
      string_fragment [20px] (115:27-115:31)
      ' ['] (115:31-115:32)
    } [}] (116:12-116:13)
    } [}] (116:13-116:14)
  identifier [onMouseEnter] (117:12-117:24)
  = [=] (117:24-117:25)
  ERROR [{] (117:25-117:26)
    { [{] (117:25-117:26)
  formal_parameters [(entry)] (117:26-117:33)
    ( [(] (117:26-117:27)
    required_parameter [entry] (117:27-117:32)
      identifier [entry] (117:27-117:32)
    ) [)] (117:32-117:33)
  => [=>] (117:34-117:36)
  ERROR [handleMouseEnter(entry.dataKey)}] (117:37-117:69)
    call_expression [handleMouseEnter(entry.dataKey)] (117:37-117:68)
      identifier [handleMouseEnter] (117:37-117:53)
      arguments [(entry.dataKey)] (117:53-117:68)
        ( [(] (117:53-117:54)
        member_expression [entry.dataKey] (117:54-117:67)
          identifier [entry] (117:54-117:59)
          . [.] (117:59-117:60)
          property_identifier [dataKey] (117:60-117:67)
        ) [)] (117:67-117:68)
    } [}] (117:68-117:69)
  identifier [onMouseLeave] (118:12-118:24)
  = [=] (118:24-118:25)
  object [{handleMouseLeave}] (118:25-118:43)
    { [{] (118:25-118:26)
    shorthand_property_identifier [handleMouseLeave] (118:26-118:42)
    } [}] (118:42-118:43)
  / [/] (119:10-119:11)
  ERROR [>

          <Radar
            name="YouTube"
            dataKey="A"
            stroke="#F0B28A"
            fill="#F0B28A"
            fillOpacity={activeRadar && activeRadar !== 'A' ? 0.2 : 0.6}
            strokeWidth={activeRadar === 'A' ? 3 : 1}
            onMouseEnter={() => handleMouseEnter('A')}
            onMouseLeave={handleMouseLeave}
            animationBegin={0}
            animationDuration={500}
            animationEasing="linear"
          />

          <Radar
            name="Instagram"
            dataKey="B"] (119:11-137:23)
    > [>] (119:11-119:12)
    type_parameters [<Radar
            name="YouTube"
            dataKey="A"
            stroke="#F0B28A"
            fill="#F0B28A"
            fillOpacity={activeRadar && activeRadar !== 'A' ? 0.2 : 0.6}
            strokeWidth={activeRadar === 'A' ? 3 : 1}
            onMouseEnter={() => handleMouseEnter('A')}
            onMouseLeave={handleMouseLeave}
            animationBegin={0}
            animationDuration={500}
            animationEasing="linear"
          />] (121:10-133:12)
      < [<] (121:10-121:11)
      type_parameter [Radar
            name="YouTube"
            dataKey="A"
            stroke="#F0B28A"
            fill="#F0B28A"
            fillOpacity={activeRadar && activeRadar !== 'A' ? 0.2 : 0.6}
            strokeWidth={activeRadar === 'A' ? 3 : 1}
            onMouseEnter={() => handleMouseEnter('A')}
            onMouseLeave={handleMouseLeave}
            animationBegin={0}
            animationDuration={500}
            animationEasing="linear"] (121:11-132:36)
        type_identifier [Radar] (121:11-121:16)
        ERROR [name] (122:12-122:16)
          identifier [name] (122:12-122:16)
        default_type [="YouTube"
            dataKey="A"
            stroke="#F0B28A"
            fill="#F0B28A"
            fillOpacity={activeRadar && activeRadar !== 'A' ? 0.2 : 0.6}
            strokeWidth={activeRadar === 'A' ? 3 : 1}
            onMouseEnter={() => handleMouseEnter('A')}
            onMouseLeave={handleMouseLeave}
            animationBegin={0}
            animationDuration={500}
            animationEasing="linear"] (122:16-132:36)
          = [=] (122:16-122:17)
          ERROR ["YouTube"
            dataKey="A"
            stroke="#F0B28A"
            fill="#F0B28A"
            fillOpacity={activeRadar && activeRadar !== 'A' ? 0.2 : 0.6}
            strokeWidth={activeRadar === 'A' ? 3 : 1}
            onMouseEnter={() => handleMouseEnter('A')}
            onMouseLeave={handleMouseLeave}
            animationBegin={0}
            animationDuration={500}
            animationEasing=] (122:17-132:28)
            literal_type ["YouTube"] (122:17-122:26)
              string ["YouTube"] (122:17-122:26)
                " ["] (122:17-122:18)
                string_fragment [YouTube] (122:18-122:25)
                " ["] (122:25-122:26)
            identifier [dataKey] (123:12-123:19)
            = [=] (123:19-123:20)
            literal_type ["A"] (123:20-123:23)
              string ["A"] (123:20-123:23)
                " ["] (123:20-123:21)
                string_fragment [A] (123:21-123:22)
                " ["] (123:22-123:23)
            type_identifier [stroke] (124:12-124:18)
            = [=] (124:18-124:19)
            literal_type ["#F0B28A"] (124:19-124:28)
              string ["#F0B28A"] (124:19-124:28)
                " ["] (124:19-124:20)
                string_fragment [#F0B28A] (124:20-124:27)
                " ["] (124:27-124:28)
            identifier [fill] (125:12-125:16)
            = [=] (125:16-125:17)
            literal_type ["#F0B28A"] (125:17-125:26)
              string ["#F0B28A"] (125:17-125:26)
                " ["] (125:17-125:18)
                string_fragment [#F0B28A] (125:18-125:25)
                " ["] (125:25-125:26)
            type_identifier [fillOpacity] (126:12-126:23)
            = [=] (126:23-126:24)
            { [{] (126:24-126:25)
            property_identifier [activeRadar] (126:25-126:36)
            intersection_type [&& activeRadar !== 'A'] (126:37-126:59)
              & [&] (126:37-126:38)
              intersection_type [& activeRadar !== 'A'] (126:38-126:59)
                & [&] (126:38-126:39)
                ERROR [activeRadar !==] (126:40-126:55)
                  identifier [activeRadar] (126:40-126:51)
                  ! [!] (126:52-126:53)
                  == [==] (126:53-126:55)
                literal_type ['A'] (126:56-126:59)
                  string ['A'] (126:56-126:59)
                    ' ['] (126:56-126:57)
                    string_fragment [A] (126:57-126:58)
                    ' ['] (126:58-126:59)
            flow_maybe_type [? 0.2] (126:60-126:65)
              ? [?] (126:60-126:61)
              literal_type [0.2] (126:62-126:65)
                number [0.2] (126:62-126:65)
            : [:] (126:66-126:67)
            literal_type [0.6] (126:68-126:71)
              number [0.6] (126:68-126:71)
            } [}] (126:71-126:72)
            type_identifier [strokeWidth] (127:12-127:23)
            = [=] (127:23-127:24)
            object_type [{activeRadar === 'A' ? 3 : 1}] (127:24-127:53)
              { [{] (127:24-127:25)
              ERROR [activeRadar === 'A' ?] (127:25-127:46)
                property_identifier [activeRadar] (127:25-127:36)
                = [=] (127:37-127:38)
                == [==] (127:38-127:40)
                property_signature ['A' ?] (127:41-127:46)
                  string ['A'] (127:41-127:44)
                    ' ['] (127:41-127:42)
                    string_fragment [A] (127:42-127:43)
                    ' ['] (127:43-127:44)
                  ? [?] (127:45-127:46)
              property_signature [3 : 1] (127:47-127:52)
                number [3] (127:47-127:48)
                type_annotation [: 1] (127:49-127:52)
                  : [:] (127:49-127:50)
                  literal_type [1] (127:51-127:52)
                    number [1] (127:51-127:52)
              } [}] (127:52-127:53)
            identifier [onMouseEnter] (128:12-128:24)
            = [=] (128:24-128:25)
            { [{] (128:25-128:26)
            function_type [() => handleMouseEnter('A')] (128:26-128:53)
              formal_parameters [()] (128:26-128:28)
                ( [(] (128:26-128:27)
                ) [)] (128:27-128:28)
              => [=>] (128:29-128:31)
              ERROR [handleMouseEnter] (128:32-128:48)
                identifier [handleMouseEnter] (128:32-128:48)
              parenthesized_type [('A')] (128:48-128:53)
                ( [(] (128:48-128:49)
                literal_type ['A'] (128:49-128:52)
                  string ['A'] (128:49-128:52)
                    ' ['] (128:49-128:50)
                    string_fragment [A] (128:50-128:51)
                    ' ['] (128:51-128:52)
                ) [)] (128:52-128:53)
            } [}] (128:53-128:54)
            type_identifier [onMouseLeave] (129:12-129:24)
            = [=] (129:24-129:25)
            object_type [{handleMouseLeave}] (129:25-129:43)
              { [{] (129:25-129:26)
              property_signature [handleMouseLeave] (129:26-129:42)
                property_identifier [handleMouseLeave] (129:26-129:42)
              } [}] (129:42-129:43)
            identifier [animationBegin] (130:12-130:26)
            = [=] (130:26-130:27)
            { [{] (130:27-130:28)
            literal_type [0] (130:28-130:29)
              number [0] (130:28-130:29)
            } [}] (130:29-130:30)
            type_identifier [animationDuration] (131:12-131:29)
            = [=] (131:29-131:30)
            object_type [{500}] (131:30-131:35)
              { [{] (131:30-131:31)
              property_signature [500] (131:31-131:34)
                number [500] (131:31-131:34)
              } [}] (131:34-131:35)
            type_identifier [animationEasing] (132:12-132:27)
            = [=] (132:27-132:28)
          literal_type ["linear"] (132:28-132:36)
            string ["linear"] (132:28-132:36)
              " ["] (132:28-132:29)
              string_fragment [linear] (132:29-132:35)
              " ["] (132:35-132:36)
      ERROR [/] (133:10-133:11)
        / [/] (133:10-133:11)
      > [>] (133:11-133:12)
    < [<] (135:10-135:11)
    identifier [Radar] (135:11-135:16)
    identifier [name] (136:12-136:16)
    = [=] (136:16-136:17)
    " ["] (136:17-136:18)
    identifier [Instagram] (136:18-136:27)
    " ["] (136:27-136:28)
    identifier [dataKey] (137:12-137:19)
    = [=] (137:19-137:20)
    " ["] (137:20-137:21)
    identifier [B] (137:21-137:22)
    " ["] (137:22-137:23)
  identifier [stroke] (138:12-138:18)
  = [=] (138:18-138:19)
  ERROR ["#8A8FF0"] (138:19-138:28)
    string ["#8A8FF0"] (138:19-138:28)
      " ["] (138:19-138:20)
      string_fragment [#8A8FF0] (138:20-138:27)
      " ["] (138:27-138:28)
  identifier [fill] (139:12-139:16)
  = [=] (139:16-139:17)
  ERROR ["#8A8FF0"] (139:17-139:26)
    string ["#8A8FF0"] (139:17-139:26)
      " ["] (139:17-139:18)
      string_fragment [#8A8FF0] (139:18-139:25)
      " ["] (139:25-139:26)
  identifier [fillOpacity] (140:12-140:23)
  = [=] (140:23-140:24)
  binary_expression [{activeRadar && activeRadar !== 'B'] (140:24-140:59)
    object [{activeRadar] (140:24-140:36)
      { [{] (140:24-140:25)
      shorthand_property_identifier [activeRadar] (140:25-140:36)
      } [] (140:36-140:36)
    && [&&] (140:37-140:39)
    binary_expression [activeRadar !== 'B'] (140:40-140:59)
      identifier [activeRadar] (140:40-140:51)
      !== [!==] (140:52-140:55)
      string ['B'] (140:56-140:59)
        ' ['] (140:56-140:57)
        string_fragment [B] (140:57-140:58)
        ' ['] (140:58-140:59)
  ? [?] (140:60-140:61)
  number [0.2] (140:62-140:65)
  : [:] (140:66-140:67)
  ERROR [0.6}] (140:68-140:72)
    number [0.6] (140:68-140:71)
    } [}] (140:71-140:72)
  identifier [strokeWidth] (141:12-141:23)
  = [=] (141:23-141:24)
  object_pattern [{activeRadar === 'B' ? 3 : 1}] (141:24-141:53)
    { [{] (141:24-141:25)
    object_assignment_pattern [activeRadar === 'B' ? 3 : 1] (141:25-141:52)
      shorthand_property_identifier_pattern [activeRadar] (141:25-141:36)
      = [=] (141:37-141:38)
      ERROR [==] (141:38-141:40)
        = [=] (141:38-141:39)
        = [=] (141:39-141:40)
      ternary_expression ['B' ? 3 : 1] (141:41-141:52)
        string ['B'] (141:41-141:44)
          ' ['] (141:41-141:42)
          string_fragment [B] (141:42-141:43)
          ' ['] (141:43-141:44)
        ? [?] (141:45-141:46)
        number [3] (141:47-141:48)
        : [:] (141:49-141:50)
        number [1] (141:51-141:52)
    } [}] (141:52-141:53)
  ERROR [onMouseEnter] (142:12-142:24)
    identifier [onMouseEnter] (142:12-142:24)
  = [=] (142:24-142:25)
  ERROR [{] (142:25-142:26)
    { [{] (142:25-142:26)
  formal_parameters [()] (142:26-142:28)
    ( [(] (142:26-142:27)
    ) [)] (142:27-142:28)
  => [=>] (142:29-142:31)
  ERROR [handleMouseEnter('B')}] (142:32-142:54)
    call_expression [handleMouseEnter('B')] (142:32-142:53)
      identifier [handleMouseEnter] (142:32-142:48)
      arguments [('B')] (142:48-142:53)
        ( [(] (142:48-142:49)
        string ['B'] (142:49-142:52)
          ' ['] (142:49-142:50)
          string_fragment [B] (142:50-142:51)
          ' ['] (142:51-142:52)
        ) [)] (142:52-142:53)
    } [}] (142:53-142:54)
  identifier [onMouseLeave] (143:12-143:24)
  = [=] (143:24-143:25)
  object_pattern [{handleMouseLeave}] (143:25-143:43)
    { [{] (143:25-143:26)
    shorthand_property_identifier_pattern [handleMouseLeave] (143:26-143:42)
    } [}] (143:42-143:43)
  ERROR [animationBegin] (144:12-144:26)
    identifier [animationBegin] (144:12-144:26)
  = [=] (144:26-144:27)
  { [{] (144:27-144:28)
  ERROR [0}] (144:28-144:30)
    number [0] (144:28-144:29)
    } [}] (144:29-144:30)
  identifier [animationDuration] (145:12-145:29)
  = [=] (145:29-145:30)
  { [{] (145:30-145:31)
  ERROR [500}] (145:31-145:35)
    number [500] (145:31-145:34)
    } [}] (145:34-145:35)
  identifier [animationEasing] (146:12-146:27)
  = [=] (146:27-146:28)
  binary_expression ["linear"
          />

          {showCompetitor] (146:28-149:25)
    string ["linear"] (146:28-146:36)
      " ["] (146:28-146:29)
      string_fragment [linear] (146:29-146:35)
      " ["] (146:35-146:36)
    / [/] (147:10-147:11)
    ERROR [>] (147:11-147:12)
      > [>] (147:11-147:12)
    object [{showCompetitor] (149:10-149:25)
      { [{] (149:10-149:11)
      shorthand_property_identifier [showCompetitor] (149:11-149:25)
      } [] (149:25-149:25)
  && [&&] (149:26-149:28)
  ( [(] (149:29-149:30)
  ERROR [<>
              <Radar
                name="Competitor YouTube"
                dataKey="CompA"
                stroke="#FF4D4D"
                fill="#FF4D4D"
                fillOpacity={activeRadar && activeRadar !== 'CompA' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompA' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompA')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"
              />
              
              <Radar
                name="Competitor Instagram"
                dataKey="CompB"
                stroke="#FF8080"
                fill="#FF8080"
                fillOpacity={activeRadar && activeRadar !== 'CompB' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompB' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompB')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"
              />
            </>
          )}
        </RadarChart>
      </ResponsiveContainer>
    </div>
  );
};

    import React, { useState } from 'react';
    import {
      ResponsiveContainer,
      ComposedChart,
      LineChart,
      Area,
      Scatter,
      Line,
      XAxis,
      YAxis,
      CartesianGrid,
      Tooltip,
      Legend,
      TooltipProps
    } from 'recharts';
    import { NameType, ValueType } from 'recharts/types/component/DefaultTooltipContent';
    
    // Types for data structures
    interface TimePatternData] (150:12-204:29)
    type_parameters [<>
              <Radar
                name="Competitor YouTube"
                dataKey="CompA"
                stroke="#FF4D4D"
                fill="#FF4D4D"
                fillOpacity={activeRadar && activeRadar !== 'CompA' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompA' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompA')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"
              />
              
              <Radar
                name="Competitor Instagram"
                dataKey="CompB"
                stroke="#FF8080"
                fill="#FF8080"
                fillOpacity={activeRadar && activeRadar !== 'CompB' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompB' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompB')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"
              />] (150:12-177:16)
      < [<] (150:12-150:13)
      ERROR [>
              <Radar
                name="Competitor YouTube"
                dataKey="CompA"
                stroke="#FF4D4D"
                fill="#FF4D4D"
                fillOpacity={activeRadar && activeRadar !== 'CompA' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompA' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompA')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"
              />
              
              <Radar] (150:13-165:20)
        > [>] (150:13-150:14)
        type_parameters [<Radar
                name="Competitor YouTube"
                dataKey="CompA"
                stroke="#FF4D4D"
                fill="#FF4D4D"
                fillOpacity={activeRadar && activeRadar !== 'CompA' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompA' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompA')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"
              />] (151:14-163:16)
          < [<] (151:14-151:15)
          type_parameter [Radar
                name="Competitor YouTube"
                dataKey="CompA"
                stroke="#FF4D4D"
                fill="#FF4D4D"
                fillOpacity={activeRadar && activeRadar !== 'CompA' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompA' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompA')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"] (151:15-162:40)
            type_identifier [Radar] (151:15-151:20)
            ERROR [name] (152:16-152:20)
              identifier [name] (152:16-152:20)
            default_type [="Competitor YouTube"
                dataKey="CompA"
                stroke="#FF4D4D"
                fill="#FF4D4D"
                fillOpacity={activeRadar && activeRadar !== 'CompA' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompA' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompA')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"] (152:20-162:40)
              = [=] (152:20-152:21)
              ERROR ["Competitor YouTube"
                dataKey="CompA"
                stroke="#FF4D4D"
                fill="#FF4D4D"
                fillOpacity={activeRadar && activeRadar !== 'CompA' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompA' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompA')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing=] (152:21-162:32)
                literal_type ["Competitor YouTube"] (152:21-152:41)
                  string ["Competitor YouTube"] (152:21-152:41)
                    " ["] (152:21-152:22)
                    string_fragment [Competitor YouTube] (152:22-152:40)
                    " ["] (152:40-152:41)
                identifier [dataKey] (153:16-153:23)
                = [=] (153:23-153:24)
                literal_type ["CompA"] (153:24-153:31)
                  string ["CompA"] (153:24-153:31)
                    " ["] (153:24-153:25)
                    string_fragment [CompA] (153:25-153:30)
                    " ["] (153:30-153:31)
                identifier [stroke] (154:16-154:22)
                = [=] (154:22-154:23)
                literal_type ["#FF4D4D"] (154:23-154:32)
                  string ["#FF4D4D"] (154:23-154:32)
                    " ["] (154:23-154:24)
                    string_fragment [#FF4D4D] (154:24-154:31)
                    " ["] (154:31-154:32)
                identifier [fill] (155:16-155:20)
                = [=] (155:20-155:21)
                literal_type ["#FF4D4D"] (155:21-155:30)
                  string ["#FF4D4D"] (155:21-155:30)
                    " ["] (155:21-155:22)
                    string_fragment [#FF4D4D] (155:22-155:29)
                    " ["] (155:29-155:30)
                type_identifier [fillOpacity] (156:16-156:27)
                = [=] (156:27-156:28)
                { [{] (156:28-156:29)
                property_identifier [activeRadar] (156:29-156:40)
                intersection_type [&& activeRadar !== 'CompA'] (156:41-156:67)
                  & [&] (156:41-156:42)
                  intersection_type [& activeRadar !== 'CompA'] (156:42-156:67)
                    & [&] (156:42-156:43)
                    ERROR [activeRadar !==] (156:44-156:59)
                      identifier [activeRadar] (156:44-156:55)
                      ! [!] (156:56-156:57)
                      == [==] (156:57-156:59)
                    literal_type ['CompA'] (156:60-156:67)
                      string ['CompA'] (156:60-156:67)
                        ' ['] (156:60-156:61)
                        string_fragment [CompA] (156:61-156:66)
                        ' ['] (156:66-156:67)
                flow_maybe_type [? 0.2] (156:68-156:73)
                  ? [?] (156:68-156:69)
                  literal_type [0.2] (156:70-156:73)
                    number [0.2] (156:70-156:73)
                : [:] (156:74-156:75)
                literal_type [0.6] (156:76-156:79)
                  number [0.6] (156:76-156:79)
                } [}] (156:79-156:80)
                type_identifier [strokeWidth] (157:16-157:27)
                = [=] (157:27-157:28)
                object_type [{activeRadar === 'CompA' ? 3 : 1}] (157:28-157:61)
                  { [{] (157:28-157:29)
                  ERROR [activeRadar === 'CompA' ?] (157:29-157:54)
                    property_identifier [activeRadar] (157:29-157:40)
                    = [=] (157:41-157:42)
                    == [==] (157:42-157:44)
                    property_signature ['CompA' ?] (157:45-157:54)
                      string ['CompA'] (157:45-157:52)
                        ' ['] (157:45-157:46)
                        string_fragment [CompA] (157:46-157:51)
                        ' ['] (157:51-157:52)
                      ? [?] (157:53-157:54)
                  property_signature [3 : 1] (157:55-157:60)
                    number [3] (157:55-157:56)
                    type_annotation [: 1] (157:57-157:60)
                      : [:] (157:57-157:58)
                      literal_type [1] (157:59-157:60)
                        number [1] (157:59-157:60)
                  } [}] (157:60-157:61)
                identifier [onMouseEnter] (158:16-158:28)
                = [=] (158:28-158:29)
                { [{] (158:29-158:30)
                function_type [() => handleMouseEnter('CompA')] (158:30-158:61)
                  formal_parameters [()] (158:30-158:32)
                    ( [(] (158:30-158:31)
                    ) [)] (158:31-158:32)
                  => [=>] (158:33-158:35)
                  ERROR [handleMouseEnter] (158:36-158:52)
                    identifier [handleMouseEnter] (158:36-158:52)
                  parenthesized_type [('CompA')] (158:52-158:61)
                    ( [(] (158:52-158:53)
                    literal_type ['CompA'] (158:53-158:60)
                      string ['CompA'] (158:53-158:60)
                        ' ['] (158:53-158:54)
                        string_fragment [CompA] (158:54-158:59)
                        ' ['] (158:59-158:60)
                    ) [)] (158:60-158:61)
                } [}] (158:61-158:62)
                type_identifier [onMouseLeave] (159:16-159:28)
                = [=] (159:28-159:29)
                object_type [{handleMouseLeave}] (159:29-159:47)
                  { [{] (159:29-159:30)
                  property_signature [handleMouseLeave] (159:30-159:46)
                    property_identifier [handleMouseLeave] (159:30-159:46)
                  } [}] (159:46-159:47)
                identifier [animationBegin] (160:16-160:30)
                = [=] (160:30-160:31)
                { [{] (160:31-160:32)
                literal_type [0] (160:32-160:33)
                  number [0] (160:32-160:33)
                } [}] (160:33-160:34)
                type_identifier [animationDuration] (161:16-161:33)
                = [=] (161:33-161:34)
                object_type [{500}] (161:34-161:39)
                  { [{] (161:34-161:35)
                  property_signature [500] (161:35-161:38)
                    number [500] (161:35-161:38)
                  } [}] (161:38-161:39)
                type_identifier [animationEasing] (162:16-162:31)
                = [=] (162:31-162:32)
              literal_type ["linear"] (162:32-162:40)
                string ["linear"] (162:32-162:40)
                  " ["] (162:32-162:33)
                  string_fragment [linear] (162:33-162:39)
                  " ["] (162:39-162:40)
          ERROR [/] (163:14-163:15)
            / [/] (163:14-163:15)
          > [>] (163:15-163:16)
        < [<] (165:14-165:15)
        identifier [Radar] (165:15-165:20)
      type_parameter [name="Competitor Instagram"
                dataKey="CompB"
                stroke="#FF8080"
                fill="#FF8080"
                fillOpacity={activeRadar && activeRadar !== 'CompB' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompB' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompB')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"] (166:16-176:40)
        type_identifier [name] (166:16-166:20)
        default_type [="Competitor Instagram"
                dataKey="CompB"
                stroke="#FF8080"
                fill="#FF8080"
                fillOpacity={activeRadar && activeRadar !== 'CompB' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompB' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompB')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing="linear"] (166:20-176:40)
          = [=] (166:20-166:21)
          ERROR ["Competitor Instagram"
                dataKey="CompB"
                stroke="#FF8080"
                fill="#FF8080"
                fillOpacity={activeRadar && activeRadar !== 'CompB' ? 0.2 : 0.6}
                strokeWidth={activeRadar === 'CompB' ? 3 : 1}
                onMouseEnter={() => handleMouseEnter('CompB')}
                onMouseLeave={handleMouseLeave}
                animationBegin={0}
                animationDuration={500}
                animationEasing=] (166:21-176:32)
            literal_type ["Competitor Instagram"] (166:21-166:43)
              string ["Competitor Instagram"] (166:21-166:43)
                " ["] (166:21-166:22)
                string_fragment [Competitor Instagram] (166:22-166:42)
                " ["] (166:42-166:43)
            identifier [dataKey] (167:16-167:23)
            = [=] (167:23-167:24)
            literal_type ["CompB"] (167:24-167:31)
              string ["CompB"] (167:24-167:31)
                " ["] (167:24-167:25)
                string_fragment [CompB] (167:25-167:30)
                " ["] (167:30-167:31)
            identifier [stroke] (168:16-168:22)
            = [=] (168:22-168:23)
            literal_type ["#FF8080"] (168:23-168:32)
              string ["#FF8080"] (168:23-168:32)
                " ["] (168:23-168:24)
                string_fragment [#FF8080] (168:24-168:31)
                " ["] (168:31-168:32)
            identifier [fill] (169:16-169:20)
            = [=] (169:20-169:21)
            literal_type ["#FF8080"] (169:21-169:30)
              string ["#FF8080"] (169:21-169:30)
                " ["] (169:21-169:22)
                string_fragment [#FF8080] (169:22-169:29)
                " ["] (169:29-169:30)
            type_identifier [fillOpacity] (170:16-170:27)
            = [=] (170:27-170:28)
            { [{] (170:28-170:29)
            property_identifier [activeRadar] (170:29-170:40)
            intersection_type [&& activeRadar !== 'CompB'] (170:41-170:67)
              & [&] (170:41-170:42)
              intersection_type [& activeRadar !== 'CompB'] (170:42-170:67)
                & [&] (170:42-170:43)
                ERROR [activeRadar !==] (170:44-170:59)
                  identifier [activeRadar] (170:44-170:55)
                  ! [!] (170:56-170:57)
                  == [==] (170:57-170:59)
                literal_type ['CompB'] (170:60-170:67)
                  string ['CompB'] (170:60-170:67)
                    ' ['] (170:60-170:61)
                    string_fragment [CompB] (170:61-170:66)
                    ' ['] (170:66-170:67)
            flow_maybe_type [? 0.2] (170:68-170:73)
              ? [?] (170:68-170:69)
              literal_type [0.2] (170:70-170:73)
                number [0.2] (170:70-170:73)
            : [:] (170:74-170:75)
            literal_type [0.6] (170:76-170:79)
              number [0.6] (170:76-170:79)
            } [}] (170:79-170:80)
            type_identifier [strokeWidth] (171:16-171:27)
            = [=] (171:27-171:28)
            object_type [{activeRadar === 'CompB' ? 3 : 1}] (171:28-171:61)
              { [{] (171:28-171:29)
              ERROR [activeRadar === 'CompB' ?] (171:29-171:54)
                property_identifier [activeRadar] (171:29-171:40)
                = [=] (171:41-171:42)
                == [==] (171:42-171:44)
                property_signature ['CompB' ?] (171:45-171:54)
                  string ['CompB'] (171:45-171:52)
                    ' ['] (171:45-171:46)
                    string_fragment [CompB] (171:46-171:51)
                    ' ['] (171:51-171:52)
                  ? [?] (171:53-171:54)
              property_signature [3 : 1] (171:55-171:60)
                number [3] (171:55-171:56)
                type_annotation [: 1] (171:57-171:60)
                  : [:] (171:57-171:58)
                  literal_type [1] (171:59-171:60)
                    number [1] (171:59-171:60)
              } [}] (171:60-171:61)
            identifier [onMouseEnter] (172:16-172:28)
            = [=] (172:28-172:29)
            { [{] (172:29-172:30)
            function_type [() => handleMouseEnter('CompB')] (172:30-172:61)
              formal_parameters [()] (172:30-172:32)
                ( [(] (172:30-172:31)
                ) [)] (172:31-172:32)
              => [=>] (172:33-172:35)
              ERROR [handleMouseEnter] (172:36-172:52)
                identifier [handleMouseEnter] (172:36-172:52)
              parenthesized_type [('CompB')] (172:52-172:61)
                ( [(] (172:52-172:53)
                literal_type ['CompB'] (172:53-172:60)
                  string ['CompB'] (172:53-172:60)
                    ' ['] (172:53-172:54)
                    string_fragment [CompB] (172:54-172:59)
                    ' ['] (172:59-172:60)
                ) [)] (172:60-172:61)
            } [}] (172:61-172:62)
            type_identifier [onMouseLeave] (173:16-173:28)
            = [=] (173:28-173:29)
            object_type [{handleMouseLeave}] (173:29-173:47)
              { [{] (173:29-173:30)
              property_signature [handleMouseLeave] (173:30-173:46)
                property_identifier [handleMouseLeave] (173:30-173:46)
              } [}] (173:46-173:47)
            identifier [animationBegin] (174:16-174:30)
            = [=] (174:30-174:31)
            { [{] (174:31-174:32)
            literal_type [0] (174:32-174:33)
              number [0] (174:32-174:33)
            } [}] (174:33-174:34)
            type_identifier [animationDuration] (175:16-175:33)
            = [=] (175:33-175:34)
            object_type [{500}] (175:34-175:39)
              { [{] (175:34-175:35)
              property_signature [500] (175:35-175:38)
                number [500] (175:35-175:38)
              } [}] (175:38-175:39)
            type_identifier [animationEasing] (176:16-176:31)
            = [=] (176:31-176:32)
          literal_type ["linear"] (176:32-176:40)
            string ["linear"] (176:32-176:40)
              " ["] (176:32-176:33)
              string_fragment [linear] (176:33-176:39)
              " ["] (176:39-176:40)
      ERROR [/] (177:14-177:15)
        / [/] (177:14-177:15)
      > [>] (177:15-177:16)
    < [<] (178:12-178:13)
    / [/] (178:13-178:14)
    > [>] (178:14-178:15)
    ) [)] (179:10-179:11)
    } [}] (179:11-179:12)
    < [<] (180:8-180:9)
    / [/] (180:9-180:10)
    identifier [RadarChart] (180:10-180:20)
    > [>] (180:20-180:21)
    < [<] (181:6-181:7)
    / [/] (181:7-181:8)
    identifier [ResponsiveContainer] (181:8-181:27)
    > [>] (181:27-181:28)
    < [<] (182:4-182:5)
    / [/] (182:5-182:6)
    identifier [div] (182:6-182:9)
    > [>] (182:9-182:10)
    ) [)] (183:2-183:3)
    ; [;] (183:3-183:4)
    } [}] (184:0-184:1)
    ; [;] (184:1-184:2)
    import [import] (186:4-186:10)
    identifier [React] (186:11-186:16)
    , [,] (186:16-186:17)
    { [{] (186:18-186:19)
    identifier [useState] (186:20-186:28)
    } [}] (186:29-186:30)
    from [from] (186:31-186:35)
    ' ['] (186:36-186:37)
    identifier [react] (186:37-186:42)
    ' ['] (186:42-186:43)
    ; [;] (186:43-186:44)
    import [import] (187:4-187:10)
    object_pattern [{
      ResponsiveContainer,
      ComposedChart,
      LineChart,
      Area,
      Scatter,
      Line,
      XAxis,
      YAxis,
      CartesianGrid,
      Tooltip,
      Legend,
      TooltipProps
    }] (187:11-200:5)
      { [{] (187:11-187:12)
      shorthand_property_identifier_pattern [ResponsiveContainer] (188:6-188:25)
      , [,] (188:25-188:26)
      shorthand_property_identifier_pattern [ComposedChart] (189:6-189:19)
      , [,] (189:19-189:20)
      shorthand_property_identifier_pattern [LineChart] (190:6-190:15)
      , [,] (190:15-190:16)
      shorthand_property_identifier_pattern [Area] (191:6-191:10)
      , [,] (191:10-191:11)
      shorthand_property_identifier_pattern [Scatter] (192:6-192:13)
      , [,] (192:13-192:14)
      shorthand_property_identifier_pattern [Line] (193:6-193:10)
      , [,] (193:10-193:11)
      shorthand_property_identifier_pattern [XAxis] (194:6-194:11)
      , [,] (194:11-194:12)
      shorthand_property_identifier_pattern [YAxis] (195:6-195:11)
      , [,] (195:11-195:12)
      shorthand_property_identifier_pattern [CartesianGrid] (196:6-196:19)
      , [,] (196:19-196:20)
      shorthand_property_identifier_pattern [Tooltip] (197:6-197:13)
      , [,] (197:13-197:14)
      shorthand_property_identifier_pattern [Legend] (198:6-198:12)
      , [,] (198:12-198:13)
      shorthand_property_identifier_pattern [TooltipProps] (199:6-199:18)
      } [}] (200:4-200:5)
    identifier [from] (200:6-200:10)
    string ['recharts'] (200:11-200:21)
      ' ['] (200:11-200:12)
      string_fragment [recharts] (200:12-200:20)
      ' ['] (200:20-200:21)
    ; [;] (200:21-200:22)
    import [import] (201:4-201:10)
      import [import] (201:4-201:10)
    object_pattern [{ NameType, ValueType }] (201:11-201:34)
      { [{] (201:11-201:12)
      shorthand_property_identifier_pattern [NameType] (201:13-201:21)
      , [,] (201:21-201:22)
      shorthand_property_identifier_pattern [ValueType] (201:23-201:32)
      } [}] (201:33-201:34)
    identifier [from] (201:35-201:39)
    string ['recharts/types/component/DefaultTooltipContent'] (201:40-201:88)
      ' ['] (201:40-201:41)
      string_fragment [recharts/types/component/DefaultTooltipContent] (201:41-201:87)
      ' ['] (201:87-201:88)
    ; [;] (201:88-201:89)
    comment [// Types for data structures] (203:4-203:32)
    interface [interface] (204:4-204:13)
    identifier [TimePatternData] (204:14-204:29)
  object_pattern [{
      time: string;
      engagement: number;
      viral: number;
      competitorEngagement] (204:30-208:26)
    { [{] (204:30-204:31)
    pair_pattern [time: string;
      engagement: number;
      viral: number;
      competitorEngagement] (205:6-208:26)
      property_identifier [time] (205:6-205:10)
      : [:] (205:10-205:11)
      ERROR [string;
      engagement: number;
      viral: number;] (205:12-207:20)
        string [string] (205:12-205:18)
        ; [;] (205:18-205:19)
        identifier [engagement] (206:6-206:16)
        : [:] (206:16-206:17)
        number [number] (206:18-206:24)
        ; [;] (206:24-206:25)
        identifier [viral] (207:6-207:11)
        : [:] (207:11-207:12)
        number [number] (207:13-207:19)
        ; [;] (207:19-207:20)
      identifier [competitorEngagement] (208:6-208:26)
    } [] (208:26-208:26)
  ? [?] (208:26-208:27)
  type_annotation [: number;
      competitorViral?: number;
    }
    
    // Custom Tooltip Component
    const CustomTooltip] (208:27-213:23)
    : [:] (208:27-208:28)
    ERROR [number;
      competitorViral?: number;
    }
    
    // Custom Tooltip Component
    const] (208:29-213:9)
      predefined_type [number] (208:29-208:35)
        number [number] (208:29-208:35)
      ; [;] (208:35-208:36)
      type_identifier [competitorViral] (209:6-209:21)
      ? [?] (209:21-209:22)
      : [:] (209:22-209:23)
      predefined_type [number] (209:24-209:30)
        number [number] (209:24-209:30)
      ; [;] (209:30-209:31)
      } [}] (210:4-210:5)
      comment [// Custom Tooltip Component] (212:4-212:31)
      const [const] (213:4-213:9)
    type_identifier [CustomTooltip] (213:10-213:23)
  = [=] (213:24-213:25)
  formal_parameters [({
      active,
      payload,
      label
    }: TooltipProps<ValueType, NameType>)] (213:26-217:41)
    ( [(] (213:26-213:27)
    required_parameter [{
      active,
      payload,
      label
    }: TooltipProps<ValueType, NameType>] (213:27-217:40)
      object_pattern [{
      active,
      payload,
      label
    }] (213:27-217:5)
        { [{] (213:27-213:28)
        shorthand_property_identifier_pattern [active] (214:6-214:12)
        , [,] (214:12-214:13)
        shorthand_property_identifier_pattern [payload] (215:6-215:13)
        , [,] (215:13-215:14)
        shorthand_property_identifier_pattern [label] (216:6-216:11)
        } [}] (217:4-217:5)
      type_annotation [: TooltipProps<ValueType, NameType>] (217:5-217:40)
        : [:] (217:5-217:6)
        generic_type [TooltipProps<ValueType, NameType>] (217:7-217:40)
          type_identifier [TooltipProps] (217:7-217:19)
          type_arguments [<ValueType, NameType>] (217:19-217:40)
            < [<] (217:19-217:20)
            type_identifier [ValueType] (217:20-217:29)
            , [,] (217:29-217:30)
            type_identifier [NameType] (217:31-217:39)
            > [>] (217:39-217:40)
    ) [)] (217:40-217:41)
  => [=>] (217:42-217:44)
  { [{] (217:45-217:46)
  if_statement [if (active && payload && payload.length) {
        return (
          <div className="bg-white/90 rounded-lg p-4 shadow-lg border border-gray-200">
            <p className="font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))}
          </div>
        );
      }] (218:6-236:7)
    if [if] (218:6-218:8)
    parenthesized_expression [(active && payload && payload.length)] (218:9-218:46)
      ( [(] (218:9-218:10)
      binary_expression [active && payload && payload.length] (218:10-218:45)
        binary_expression [active && payload] (218:10-218:27)
          identifier [active] (218:10-218:16)
          && [&&] (218:17-218:19)
          identifier [payload] (218:20-218:27)
        && [&&] (218:28-218:30)
        member_expression [payload.length] (218:31-218:45)
          identifier [payload] (218:31-218:38)
          . [.] (218:38-218:39)
          property_identifier [length] (218:39-218:45)
      ) [)] (218:45-218:46)
    statement_block [{
        return (
          <div className="bg-white/90 rounded-lg p-4 shadow-lg border border-gray-200">
            <p className="font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))}
          </div>
        );
      }] (218:47-236:7)
      { [{] (218:47-218:48)
      return_statement [return (
          <div className="bg-white/90 rounded-lg p-4 shadow-lg border border-gray-200">
            <p className="font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))}
          </div>
        );] (219:8-235:10)
        return [return] (219:8-219:14)
        parenthesized_expression [(
          <div className="bg-white/90 rounded-lg p-4 shadow-lg border border-gray-200">
            <p className="font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))}
          </div>
        )] (219:15-235:9)
          ( [(] (219:15-219:16)
          binary_expression [<div className="bg-white/90 rounded-lg p-4 shadow-lg border border-gray-200">
            <p className="font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))}
          </div>] (220:10-234:16)
            type_assertion [<div className="bg-white/90 rounded-lg p-4 shadow-lg border border-gray-200">
            <p className="font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))] (220:10-233:14)
              type_arguments [<div] (220:10-220:14)
                < [<] (220:10-220:11)
                type_identifier [div] (220:11-220:14)
                > [] (220:14-220:14)
              assignment_expression [className="bg-white/90 rounded-lg p-4 shadow-lg border border-gray-200">
            <p className="font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))] (220:15-233:14)
                identifier [className] (220:15-220:24)
                = [=] (220:24-220:25)
                binary_expression ["bg-white/90 rounded-lg p-4 shadow-lg border border-gray-200">
            <p className="font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))] (220:25-233:14)
                  string ["bg-white/90 rounded-lg p-4 shadow-lg border border-gray-200"] (220:25-220:86)
                    " ["] (220:25-220:26)
                    string_fragment [bg-white/90 rounded-lg p-4 shadow-lg border border-gray-200] (220:26-220:85)
                    " ["] (220:85-220:86)
                  > [>] (220:86-220:87)
                  type_assertion [<p className="font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))] (221:12-233:14)
                    type_arguments [<p] (221:12-221:14)
                      < [<] (221:12-221:13)
                      type_identifier [p] (221:13-221:14)
                      > [] (221:14-221:14)
                    assignment_expression [className="font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))] (221:15-233:14)
                      identifier [className] (221:15-221:24)
                      = [=] (221:24-221:25)
                      binary_expression ["font-bold text-gray-700">{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))] (221:25-233:14)
                        string ["font-bold text-gray-700"] (221:25-221:50)
                          " ["] (221:25-221:26)
                          string_fragment [font-bold text-gray-700] (221:26-221:49)
                          " ["] (221:49-221:50)
                        > [>] (221:50-221:51)
                        binary_expression [{label}</p>
            {payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))] (221:51-233:14)
                          object [{label}] (221:51-221:58)
                            { [{] (221:51-221:52)
                            shorthand_property_identifier [label] (221:52-221:57)
                            } [}] (221:57-221:58)
                          < [<] (221:58-221:59)
                          ERROR [/p>
            {] (221:59-222:13)
                            / [/] (221:59-221:60)
                            regex_pattern [p>] (221:60-221:62)
                            { [{] (222:12-222:13)
                          call_expression [payload.map((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))] (222:13-233:14)
                            member_expression [payload.map] (222:13-222:24)
                              identifier [payload] (222:13-222:20)
                              . [.] (222:20-222:21)
                              property_identifier [map] (222:21-222:24)
                            arguments [((entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            ))] (222:24-233:14)
                              ( [(] (222:24-222:25)
                              arrow_function [(entry, index) => (
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            )] (222:25-233:13)
                                formal_parameters [(entry, index)] (222:25-222:39)
                                  ( [(] (222:25-222:26)
                                  required_parameter [entry] (222:26-222:31)
                                    identifier [entry] (222:26-222:31)
                                  , [,] (222:31-222:32)
                                  required_parameter [index] (222:33-222:38)
                                    identifier [index] (222:33-222:38)
                                  ) [)] (222:38-222:39)
                                => [=>] (222:40-222:42)
                                parenthesized_expression [(
              <div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>
            )] (222:43-233:13)
                                  ( [(] (222:43-222:44)
                                  ERROR [<div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >
                <span] (223:14-228:21)
                                    type_parameters [<div 
                key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color }}
              >] (223:14-227:15)
                                      < [<] (223:14-223:15)
                                      ERROR [div] (223:15-223:18)
                                        identifier [div] (223:15-223:18)
                                      type_parameter [key={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color] (224:16-226:43)
                                        type_identifier [key] (224:16-224:19)
                                        default_type [={`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color: entry.color] (224:19-226:43)
                                          = [=] (224:19-224:20)
                                          ERROR [{`tooltip-${index}`} 
                className="text-sm flex justify-between items-center"
                style={{ color:] (224:20-226:31)
                                            { [{] (224:20-224:21)
                                            template_literal_type [`tooltip-${index}`] (224:21-224:39)
                                              ` [`] (224:21-224:22)
                                              template_type [${index}] (224:30-224:38)
                                                ${ [${] (224:30-224:32)
                                                type_identifier [index] (224:32-224:37)
                                                } [}] (224:37-224:38)
                                              ` [`] (224:38-224:39)
                                            } [}] (224:39-224:40)
                                            type_identifier [className] (225:16-225:25)
                                            = [=] (225:25-225:26)
                                            literal_type ["text-sm flex justify-between items-center"] (225:26-225:69)
                                              string ["text-sm flex justify-between items-center"] (225:26-225:69)
                                                " ["] (225:26-225:27)
                                                string_fragment [text-sm flex justify-between items-center] (225:27-225:68)
                                                " ["] (225:68-225:69)
                                            identifier [style] (226:16-226:21)
                                            = [=] (226:21-226:22)
                                            { [{] (226:22-226:23)
                                            { [{] (226:23-226:24)
                                            type_identifier [color] (226:25-226:30)
                                            : [:] (226:30-226:31)
                                          nested_type_identifier [entry.color] (226:32-226:43)
                                            identifier [entry] (226:32-226:37)
                                            . [.] (226:37-226:38)
                                            type_identifier [color] (226:38-226:43)
                                      ERROR [}}] (226:44-226:46)
                                        } [}] (226:44-226:45)
                                        } [}] (226:45-226:46)
                                      > [>] (227:14-227:15)
                                    < [<] (228:16-228:17)
                                    identifier [span] (228:17-228:21)
                                  binary_expression [className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div>] (228:22-232:20)
                                    binary_expression [className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)}
                </span>
              </div] (228:22-232:19)
                                      binary_expression [className="mr-2">{entry.name}:</span>
                <span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)] (228:22-230:72)
                                        binary_expression [className="mr-2">{entry.name}:</span] (228:22-228:58)
                                          assignment_expression [className="mr-2">{entry.name}] (228:22-228:51)
                                            identifier [className] (228:22-228:31)
                                            = [=] (228:31-228:32)
                                            binary_expression ["mr-2">{entry.name}] (228:32-228:51)
                                              string ["mr-2"] (228:32-228:38)
                                                " ["] (228:32-228:33)
                                                string_fragment [mr-2] (228:33-228:37)
                                                " ["] (228:37-228:38)
                                              > [>] (228:38-228:39)
                                              object [{entry.name}] (228:39-228:51)
                                                { [{] (228:39-228:40)
                                                ERROR [entry.] (228:40-228:46)
                                                  identifier [entry] (228:40-228:45)
                                                  . [.] (228:45-228:46)
                                                shorthand_property_identifier [name] (228:46-228:50)
                                                } [}] (228:50-228:51)
                                          ERROR [:<] (228:51-228:53)
                                            : [:] (228:51-228:52)
                                            < [<] (228:52-228:53)
                                          / [/] (228:53-228:54)
                                          identifier [span] (228:54-228:58)
                                        > [>] (228:58-228:59)
                                        type_assertion [<span className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)] (229:16-230:72)
                                          type_arguments [<span] (229:16-229:21)
                                            < [<] (229:16-229:17)
                                            type_identifier [span] (229:17-229:21)
                                            > [] (229:21-229:21)
                                          assignment_expression [className="font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)] (229:22-230:72)
                                            identifier [className] (229:22-229:31)
                                            = [=] (229:31-229:32)
                                            call_expression ["font-semibold">
                  {new Intl.NumberFormat().format(entry.value as number)] (229:32-230:72)
                                              member_expression ["font-semibold">
                  {new Intl.NumberFormat().format] (229:32-230:49)
                                                call_expression ["font-semibold">
                  {new Intl.NumberFormat()] (229:32-230:42)
                                                  member_expression ["font-semibold">
                  {new Intl.NumberFormat] (229:32-230:40)
                                                    string ["font-semibold"] (229:32-229:47)
                                                      " ["] (229:32-229:33)
                                                      string_fragment [font-semibold] (229:33-229:46)
                                                      " ["] (229:46-229:47)
                                                    ERROR [>
                  {new Intl] (229:47-230:27)
                                                      > [>] (229:47-229:48)
                                                      { [{] (230:18-230:19)
                                                      identifier [new] (230:19-230:22)
                                                      identifier [Intl] (230:23-230:27)
                                                    . [.] (230:27-230:28)
                                                    property_identifier [NumberFormat] (230:28-230:40)
                                                  arguments [()] (230:40-230:42)
                                                    ( [(] (230:40-230:41)
                                                    ) [)] (230:41-230:42)
                                                . [.] (230:42-230:43)
                                                property_identifier [format] (230:43-230:49)
                                              arguments [(entry.value as number)] (230:49-230:72)
                                                ( [(] (230:49-230:50)
                                                as_expression [entry.value as number] (230:50-230:71)
                                                  member_expression [entry.value] (230:50-230:61)
                                                    identifier [entry] (230:50-230:55)
                                                    . [.] (230:55-230:56)
                                                    property_identifier [value] (230:56-230:61)
                                                  as [as] (230:62-230:64)
                                                  predefined_type [number] (230:65-230:71)
                                                    number [number] (230:65-230:71)
                                                ) [)] (230:71-230:72)
                                      ERROR [}] (230:72-230:73)
                                        } [}] (230:72-230:73)
                                      < [<] (231:16-231:17)
                                      regex [/span>
              </div] (231:17-232:19)
                                        / [/] (231:17-231:18)
                                        regex_pattern [span>] (231:18-231:23)
                                        ERROR [<] (232:14-232:15)
                                          < [<] (232:14-232:15)
                                        / [/] (232:15-232:16)
                                        regex_flags [div] (232:16-232:19)
                                    > [>] (232:19-232:20)
                                    identifier [] (232:20-232:20)
                                  ) [)] (233:12-233:13)
                              ) [)] (233:13-233:14)
            ERROR [}] (233:14-233:15)
              } [}] (233:14-233:15)
            < [<] (234:10-234:11)
            regex [/div>] (234:11-234:16)
              / [/] (234:11-234:12)
              regex_pattern [div>] (234:12-234:16)
              / [] (234:16-234:16)
          ) [)] (235:8-235:9)
        ; [;] (235:9-235:10)
      } [}] (236:6-236:7)
  return_statement [return null;] (237:6-237:18)
    return [return] (237:6-237:12)
    null [null] (237:13-237:17)
    ; [;] (237:17-237:18)
  ERROR [}] (238:4-238:5)
    } [}] (238:4-238:5)
  empty_statement [;] (238:5-238:6)
    ; [;] (238:5-238:6)
  interface_declaration [interface TimePatternProps {
      showCompetitor?: boolean;
    }] (240:4-242:5)
    interface [interface] (240:4-240:13)
    type_identifier [TimePatternProps] (240:14-240:30)
    object_type [{
      showCompetitor?: boolean;
    }] (240:31-242:5)
      { [{] (240:31-240:32)
      property_signature [showCompetitor?: boolean] (241:6-241:30)
        property_identifier [showCompetitor] (241:6-241:20)
        ? [?] (241:20-241:21)
        type_annotation [: boolean] (241:21-241:30)
          : [:] (241:21-241:22)
          predefined_type [boolean] (241:23-241:30)
            boolean [boolean] (241:23-241:30)
      ; [;] (241:30-241:31)
      } [}] (242:4-242:5)
  export [export] (244:4-244:10)
  const [const] (244:11-244:16)
  identifier [TimePatterns] (244:17-244:29)
  type_annotation [: React.FC<TimePatternProps>] (244:29-244:57)
    : [:] (244:29-244:30)
    generic_type [React.FC<TimePatternProps>] (244:31-244:57)
      nested_type_identifier [React.FC] (244:31-244:39)
        identifier [React] (244:31-244:36)
        . [.] (244:36-244:37)
        type_identifier [FC] (244:37-244:39)
      type_arguments [<TimePatternProps>] (244:39-244:57)
        < [<] (244:39-244:40)
        type_identifier [TimePatternProps] (244:40-244:56)
        > [>] (244:56-244:57)
  = [=] (244:58-244:59)
  formal_parameters [({ showCompetitor = false })] (244:60-244:88)
    ( [(] (244:60-244:61)
    required_parameter [{ showCompetitor = false }] (244:61-244:87)
      object_pattern [{ showCompetitor = false }] (244:61-244:87)
        { [{] (244:61-244:62)
        object_assignment_pattern [showCompetitor = false] (244:63-244:85)
          shorthand_property_identifier_pattern [showCompetitor] (244:63-244:77)
          = [=] (244:78-244:79)
          false [false] (244:80-244:85)
        } [}] (244:86-244:87)
    ) [)] (244:87-244:88)
  => [=>] (244:89-244:91)
  { [{] (244:92-244:93)
  lexical_declaration [const [activeType, setActiveType] = useState<string | null>(null);] (245:6-245:72)
    const [const] (245:6-245:11)
    variable_declarator [[activeType, setActiveType] = useState<string | null>(null)] (245:12-245:71)
      array_pattern [[activeType, setActiveType]] (245:12-245:39)
        [ [[] (245:12-245:13)
        identifier [activeType] (245:13-245:23)
        , [,] (245:23-245:24)
        identifier [setActiveType] (245:25-245:38)
        ] []] (245:38-245:39)
      = [=] (245:40-245:41)
      call_expression [useState<string | null>(null)] (245:42-245:71)
        identifier [useState] (245:42-245:50)
        type_arguments [<string | null>] (245:50-245:65)
          < [<] (245:50-245:51)
          union_type [string | null] (245:51-245:64)
            predefined_type [string] (245:51-245:57)
              string [string] (245:51-245:57)
            | [|] (245:58-245:59)
            literal_type [null] (245:60-245:64)
              null [null] (245:60-245:64)
          > [>] (245:64-245:65)
        arguments [(null)] (245:65-245:71)
          ( [(] (245:65-245:66)
          null [null] (245:66-245:70)
          ) [)] (245:70-245:71)
    ; [;] (245:71-245:72)
  lexical_declaration [const [data, setData] = useState<TimePatternData[]>([]);] (246:6-246:62)
    const [const] (246:6-246:11)
    variable_declarator [[data, setData] = useState<TimePatternData[]>([])] (246:12-246:61)
      array_pattern [[data, setData]] (246:12-246:27)
        [ [[] (246:12-246:13)
        identifier [data] (246:13-246:17)
        , [,] (246:17-246:18)
        identifier [setData] (246:19-246:26)
        ] []] (246:26-246:27)
      = [=] (246:28-246:29)
      call_expression [useState<TimePatternData[]>([])] (246:30-246:61)
        identifier [useState] (246:30-246:38)
        type_arguments [<TimePatternData[]>] (246:38-246:57)
          < [<] (246:38-246:39)
          array_type [TimePatternData[]] (246:39-246:56)
            type_identifier [TimePatternData] (246:39-246:54)
            [ [[] (246:54-246:55)
            ] []] (246:55-246:56)
          > [>] (246:56-246:57)
        arguments [([])] (246:57-246:61)
          ( [(] (246:57-246:58)
          array [[]] (246:58-246:60)
            [ [[] (246:58-246:59)
            ] []] (246:59-246:60)
          ) [)] (246:60-246:61)
    ; [;] (246:61-246:62)
  expression_statement [useEffect(() => {
        setData(generateTimePatternData());
      }, []);] (248:6-250:13)
    call_expression [useEffect(() => {
        setData(generateTimePatternData());
      }, [])] (248:6-250:12)
      identifier [useEffect] (248:6-248:15)
      arguments [(() => {
        setData(generateTimePatternData());
      }, [])] (248:15-250:12)
        ( [(] (248:15-248:16)
        arrow_function [() => {
        setData(generateTimePatternData());
      }] (248:16-250:7)
          formal_parameters [()] (248:16-248:18)
            ( [(] (248:16-248:17)
            ) [)] (248:17-248:18)
          => [=>] (248:19-248:21)
          statement_block [{
        setData(generateTimePatternData());
      }] (248:22-250:7)
            { [{] (248:22-248:23)
            expression_statement [setData(generateTimePatternData());] (249:8-249:43)
              call_expression [setData(generateTimePatternData())] (249:8-249:42)
                identifier [setData] (249:8-249:15)
                arguments [(generateTimePatternData())] (249:15-249:42)
                  ( [(] (249:15-249:16)
                  call_expression [generateTimePatternData()] (249:16-249:41)
                    identifier [generateTimePatternData] (249:16-249:39)
                    arguments [()] (249:39-249:41)
                      ( [(] (249:39-249:40)
                      ) [)] (249:40-249:41)
                  ) [)] (249:41-249:42)
              ; [;] (249:42-249:43)
            } [}] (250:6-250:7)
        , [,] (250:7-250:8)
        array [[]] (250:9-250:11)
          [ [[] (250:9-250:10)
          ] []] (250:10-250:11)
        ) [)] (250:11-250:12)
    ; [;] (250:12-250:13)
  lexical_declaration [const handleMouseEnter = (type: string) => {
        setActiveType(type);
      };] (252:6-254:8)
    const [const] (252:6-252:11)
    variable_declarator [handleMouseEnter = (type: string) => {
        setActiveType(type);
      }] (252:12-254:7)
      identifier [handleMouseEnter] (252:12-252:28)
      = [=] (252:29-252:30)
      arrow_function [(type: string) => {
        setActiveType(type);
      }] (252:31-254:7)
        formal_parameters [(type: string)] (252:31-252:45)
          ( [(] (252:31-252:32)
          required_parameter [type: string] (252:32-252:44)
            identifier [type] (252:32-252:36)
            type_annotation [: string] (252:36-252:44)
              : [:] (252:36-252:37)
              predefined_type [string] (252:38-252:44)
                string [string] (252:38-252:44)
          ) [)] (252:44-252:45)
        => [=>] (252:46-252:48)
        statement_block [{
        setActiveType(type);
      }] (252:49-254:7)
          { [{] (252:49-252:50)
          expression_statement [setActiveType(type);] (253:8-253:28)
            call_expression [setActiveType(type)] (253:8-253:27)
              identifier [setActiveType] (253:8-253:21)
              arguments [(type)] (253:21-253:27)
                ( [(] (253:21-253:22)
                identifier [type] (253:22-253:26)
                ) [)] (253:26-253:27)
            ; [;] (253:27-253:28)
          } [}] (254:6-254:7)
    ; [;] (254:7-254:8)
  lexical_declaration [const handleMouseLeave = () => {
        setActiveType(null);
      };] (256:6-258:8)
    const [const] (256:6-256:11)
    variable_declarator [handleMouseLeave = () => {
        setActiveType(null);
      }] (256:12-258:7)
      identifier [handleMouseLeave] (256:12-256:28)
      = [=] (256:29-256:30)
      arrow_function [() => {
        setActiveType(null);
      }] (256:31-258:7)
        formal_parameters [()] (256:31-256:33)
          ( [(] (256:31-256:32)
          ) [)] (256:32-256:33)
        => [=>] (256:34-256:36)
        statement_block [{
        setActiveType(null);
      }] (256:37-258:7)
          { [{] (256:37-256:38)
          expression_statement [setActiveType(null);] (257:8-257:28)
            call_expression [setActiveType(null)] (257:8-257:27)
              identifier [setActiveType] (257:8-257:21)
              arguments [(null)] (257:21-257:27)
                ( [(] (257:21-257:22)
                null [null] (257:22-257:26)
                ) [)] (257:26-257:27)
            ; [;] (257:27-257:28)
          } [}] (258:6-258:7)
    ; [;] (258:7-258:8)
  return [return] (260:6-260:12)
  ( [(] (260:13-260:14)
  type_arguments [<div] (261:8-261:12)
    < [<] (261:8-261:9)
    type_identifier [div] (261:9-261:12)
    > [] (261:12-261:12)
  identifier [className] (261:13-261:22)
  = [=] (261:22-261:23)
  string ["h-96 w-full"] (261:23-261:36)
    " ["] (261:23-261:24)
    string_fragment [h-96 w-full] (261:24-261:35)
    " ["] (261:35-261:36)
  > [>] (261:36-261:37)
  ERROR [<ResponsiveContainer width="100%" height="100%">] (262:10-262:58)
    type_parameters [<ResponsiveContainer width="100%" height="100%">] (262:10-262:58)
      < [<] (262:10-262:11)
      type_parameter [ResponsiveContainer width="100%" height="100%"] (262:11-262:57)
        type_identifier [ResponsiveContainer] (262:11-262:30)
        ERROR [width] (262:31-262:36)
          identifier [width] (262:31-262:36)
        default_type [="100%" height="100%"] (262:36-262:57)
          = [=] (262:36-262:37)
          ERROR ["100%" height=] (262:37-262:51)
            literal_type ["100%"] (262:37-262:43)
              string ["100%"] (262:37-262:43)
                " ["] (262:37-262:38)
                string_fragment [100%] (262:38-262:42)
                " ["] (262:42-262:43)
            identifier [height] (262:44-262:50)
            = [=] (262:50-262:51)
          literal_type ["100%"] (262:51-262:57)
            string ["100%"] (262:51-262:57)
              " ["] (262:51-262:52)
              string_fragment [100%] (262:52-262:56)
              " ["] (262:56-262:57)
      > [>] (262:57-262:58)
  type_arguments [<ComposedChart] (263:12-263:26)
    < [<] (263:12-263:13)
    type_identifier [ComposedChart] (263:13-263:26)
    > [] (263:26-263:26)
  identifier [data] (263:27-263:31)
  = [=] (263:31-263:32)
  object [{data}] (263:32-263:38)
    { [{] (263:32-263:33)
    shorthand_property_identifier [data] (263:33-263:37)
    } [}] (263:37-263:38)
  > [>] (263:38-263:39)
  type_arguments [<defs>] (264:14-264:20)
    < [<] (264:14-264:15)
    type_identifier [defs] (264:15-264:19)
    > [>] (264:19-264:20)
  ERROR [<linearGradient id="engagementGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#E98AF0" stopOpacity={0.8}/>
                  <stop offset="95%" stopColor="#E98AF0" stopOpacity={0.2}] (265:16-267:74)
    type_parameters [<linearGradient id="engagementGradient" x1="0" y1="0" x2="0" y2="1">] (265:16-265:84)
      < [<] (265:16-265:17)
      type_parameter [linearGradient id="engagementGradient" x1="0" y1="0" x2="0" y2="1"] (265:17-265:83)
        type_identifier [linearGradient] (265:17-265:31)
        ERROR [id] (265:32-265:34)
          identifier [id] (265:32-265:34)
        default_type [="engagementGradient" x1="0" y1="0" x2="0" y2="1"] (265:34-265:83)
          = [=] (265:34-265:35)
          ERROR ["engagementGradient" x1="0" y1="0" x2="0" y2=] (265:35-265:80)
            literal_type ["engagementGradient"] (265:35-265:55)
              string ["engagementGradient"] (265:35-265:55)
                " ["] (265:35-265:36)
                string_fragment [engagementGradient] (265:36-265:54)
                " ["] (265:54-265:55)
            identifier [x1] (265:56-265:58)
            = [=] (265:58-265:59)
            literal_type ["0"] (265:59-265:62)
              string ["0"] (265:59-265:62)
                " ["] (265:59-265:60)
                string_fragment [0] (265:60-265:61)
                " ["] (265:61-265:62)
            identifier [y1] (265:63-265:65)
            = [=] (265:65-265:66)
            literal_type ["0"] (265:66-265:69)
              string ["0"] (265:66-265:69)
                " ["] (265:66-265:67)
                string_fragment [0] (265:67-265:68)
                " ["] (265:68-265:69)
            identifier [x2] (265:70-265:72)
            = [=] (265:72-265:73)
            literal_type ["0"] (265:73-265:76)
              string ["0"] (265:73-265:76)
                " ["] (265:73-265:74)
                string_fragment [0] (265:74-265:75)
                " ["] (265:75-265:76)
            identifier [y2] (265:77-265:79)
            = [=] (265:79-265:80)
          literal_type ["1"] (265:80-265:83)
            string ["1"] (265:80-265:83)
              " ["] (265:80-265:81)
              string_fragment [1] (265:81-265:82)
              " ["] (265:82-265:83)
      > [>] (265:83-265:84)
    < [<] (266:18-266:19)
    ERROR [stop] (266:19-266:23)
      identifier [stop] (266:19-266:23)
    type_parameter [offset="5%" stopColor="#E98AF0" stopOpacity={0.8}] (266:24-266:73)
      type_identifier [offset] (266:24-266:30)
      default_type [="5%" stopColor="#E98AF0" stopOpacity={0.8}] (266:30-266:73)
        = [=] (266:30-266:31)
        ERROR ["5%" stopColor="#E98AF0" stopOpacity=] (266:31-266:68)
          literal_type ["5%"] (266:31-266:35)
            string ["5%"] (266:31-266:35)
              " ["] (266:31-266:32)
              string_fragment [5%] (266:32-266:34)
              " ["] (266:34-266:35)
          identifier [stopColor] (266:36-266:45)
          = [=] (266:45-266:46)
          literal_type ["#E98AF0"] (266:46-266:55)
            string ["#E98AF0"] (266:46-266:55)
              " ["] (266:46-266:47)
              string_fragment [#E98AF0] (266:47-266:54)
              " ["] (266:54-266:55)
          type_identifier [stopOpacity] (266:56-266:67)
          = [=] (266:67-266:68)
        object_type [{0.8}] (266:68-266:73)
          { [{] (266:68-266:69)
          property_signature [0.8] (266:69-266:72)
            number [0.8] (266:69-266:72)
          } [}] (266:72-266:73)
    / [/] (266:73-266:74)
    regex_pattern [>] (266:74-266:75)
    < [<] (267:18-267:19)
    ERROR [stop] (267:19-267:23)
      identifier [stop] (267:19-267:23)
    type_parameter [offset="95%" stopColor="#E98AF0" stopOpacity={0.2}] (267:24-267:74)
      type_identifier [offset] (267:24-267:30)
      default_type [="95%" stopColor="#E98AF0" stopOpacity={0.2}] (267:30-267:74)
        = [=] (267:30-267:31)
        ERROR ["95%" stopColor="#E98AF0" stopOpacity=] (267:31-267:69)
          literal_type ["95%"] (267:31-267:36)
            string ["95%"] (267:31-267:36)
              " ["] (267:31-267:32)
              string_fragment [95%] (267:32-267:35)
              " ["] (267:35-267:36)
          identifier [stopColor] (267:37-267:46)
          = [=] (267:46-267:47)
          literal_type ["#E98AF0"] (267:47-267:56)
            string ["#E98AF0"] (267:47-267:56)
              " ["] (267:47-267:48)
              string_fragment [#E98AF0] (267:48-267:55)
              " ["] (267:55-267:56)
          type_identifier [stopOpacity] (267:57-267:68)
          = [=] (267:68-267:69)
        object_type [{0.2}] (267:69-267:74)
          { [{] (267:69-267:70)
          property_signature [0.2] (267:70-267:73)
            number [0.2] (267:70-267:73)
          } [}] (267:73-267:74)
  regex [/>] (267:74-267:76)
    / [/] (267:74-267:75)
    regex_pattern [>] (267:75-267:76)
    / [] (267:76-267:76)
  < [<] (268:16-268:17)
  regex [/linearGradient>] (268:17-268:33)
    / [/] (268:17-268:18)
    regex_pattern [linearGradient>] (268:18-268:33)
    / [] (268:33-268:33)
  < [<] (269:16-269:17)
  identifier [linearGradient] (269:17-269:31)
  ERROR [id="competitorEngagementGradient" x1="0" y1="0" x2="0" y2] (269:32-269:89)
    identifier [id] (269:32-269:34)
    = [=] (269:34-269:35)
    string ["competitorEngagementGradient"] (269:35-269:65)
      " ["] (269:35-269:36)
      string_fragment [competitorEngagementGradient] (269:36-269:64)
      " ["] (269:64-269:65)
    identifier [x1] (269:66-269:68)
    = [=] (269:68-269:69)
    string ["0"] (269:69-269:72)
      " ["] (269:69-269:70)
      string_fragment [0] (269:70-269:71)
      " ["] (269:71-269:72)
    identifier [y1] (269:73-269:75)
    = [=] (269:75-269:76)
    string ["0"] (269:76-269:79)
      " ["] (269:76-269:77)
      string_fragment [0] (269:77-269:78)
      " ["] (269:78-269:79)
    identifier [x2] (269:80-269:82)
    = [=] (269:82-269:83)
    string ["0"] (269:83-269:86)
      " ["] (269:83-269:84)
      string_fragment [0] (269:84-269:85)
      " ["] (269:85-269:86)
    identifier [y2] (269:87-269:89)
  = [=] (269:89-269:90)
  binary_expression ["1">
                  <stop offset="5%" stopColor="#FF0000" stopOpacity={0.8}/>
                  <stop offset="95%" stopColor="#FF0000" stopOpacity={0.2}/>
                </linearGradient>
              </defs] (269:90-273:20)
    string ["1"] (269:90-269:93)
      " ["] (269:90-269:91)
      string_fragment [1] (269:91-269:92)
      " ["] (269:92-269:93)
    > [>] (269:93-269:94)
    ERROR [<stop offset="5%" stopColor="#FF0000" stopOpacity={0.8}/>
                  <stop offset="95%" stopColor="#FF0000" stopOpacity={0.2}] (270:18-271:74)
      type_parameters [<stop offset="5%" stopColor="#FF0000" stopOpacity={0.8}/>] (270:18-270:75)
        < [<] (270:18-270:19)
        ERROR [stop] (270:19-270:23)
          identifier [stop] (270:19-270:23)
        type_parameter [offset="5%" stopColor="#FF0000" stopOpacity={0.8}] (270:24-270:73)
          type_identifier [offset] (270:24-270:30)
          default_type [="5%" stopColor="#FF0000" stopOpacity={0.8}] (270:30-270:73)
            = [=] (270:30-270:31)
            ERROR ["5%" stopColor="#FF0000" stopOpacity=] (270:31-270:68)
              literal_type ["5%"] (270:31-270:35)
                string ["5%"] (270:31-270:35)
                  " ["] (270:31-270:32)
                  string_fragment [5%] (270:32-270:34)
                  " ["] (270:34-270:35)
              identifier [stopColor] (270:36-270:45)
              = [=] (270:45-270:46)
              literal_type ["#FF0000"] (270:46-270:55)
                string ["#FF0000"] (270:46-270:55)
                  " ["] (270:46-270:47)
                  string_fragment [#FF0000] (270:47-270:54)
                  " ["] (270:54-270:55)
              type_identifier [stopOpacity] (270:56-270:67)
              = [=] (270:67-270:68)
            object_type [{0.8}] (270:68-270:73)
              { [{] (270:68-270:69)
              property_signature [0.8] (270:69-270:72)
                number [0.8] (270:69-270:72)
              } [}] (270:72-270:73)
        ERROR [/] (270:73-270:74)
          / [/] (270:73-270:74)
        > [>] (270:74-270:75)
      < [<] (271:18-271:19)
      ERROR [stop] (271:19-271:23)
        identifier [stop] (271:19-271:23)
      type_parameter [offset="95%" stopColor="#FF0000" stopOpacity={0.2}] (271:24-271:74)
        type_identifier [offset] (271:24-271:30)
        default_type [="95%" stopColor="#FF0000" stopOpacity={0.2}] (271:30-271:74)
          = [=] (271:30-271:31)
          ERROR ["95%" stopColor="#FF0000" stopOpacity=] (271:31-271:69)
            literal_type ["95%"] (271:31-271:36)
              string ["95%"] (271:31-271:36)
                " ["] (271:31-271:32)
                string_fragment [95%] (271:32-271:35)
                " ["] (271:35-271:36)
            identifier [stopColor] (271:37-271:46)
            = [=] (271:46-271:47)
            literal_type ["#FF0000"] (271:47-271:56)
              string ["#FF0000"] (271:47-271:56)
                " ["] (271:47-271:48)
                string_fragment [#FF0000] (271:48-271:55)
                " ["] (271:55-271:56)
            type_identifier [stopOpacity] (271:57-271:68)
            = [=] (271:68-271:69)
          object_type [{0.2}] (271:69-271:74)
            { [{] (271:69-271:70)
            property_signature [0.2] (271:70-271:73)
              number [0.2] (271:70-271:73)
            } [}] (271:73-271:74)
    binary_expression [/>
                </linearGradient>
              </defs] (271:74-273:20)
      regex [/>] (271:74-271:76)
        / [/] (271:74-271:75)
        regex_pattern [>] (271:75-271:76)
        / [] (271:76-271:76)
      < [<] (272:16-272:17)
      regex [/linearGradient>
              </defs] (272:17-273:20)
        / [/] (272:17-272:18)
        regex_pattern [linearGradient>] (272:18-272:33)
        ERROR [<] (273:14-273:15)
          < [<] (273:14-273:15)
        / [/] (273:15-273:16)
        regex_flags [defs] (273:16-273:20)
  > [>] (273:20-273:21)
  type_arguments [<CartesianGrid] (275:14-275:28)
    < [<] (275:14-275:15)
    type_identifier [CartesianGrid] (275:15-275:28)
    > [] (275:28-275:28)
  identifier [strokeDasharray] (275:29-275:44)
  = [=] (275:44-275:45)
  ERROR ["3 3"] (275:45-275:50)
    string ["3 3"] (275:45-275:50)
      " ["] (275:45-275:46)
      string_fragment [3 3] (275:46-275:49)
      " ["] (275:49-275:50)
  identifier [opacity] (275:51-275:58)
  = [=] (275:58-275:59)
  ERROR [{0.8} />
              <XAxis 
                dataKey="time" 
                tick={{ fill: '#666' }} 
                axisLine={{ stroke: '#999' }} 
              />] (275:59-280:16)
    { [{] (275:59-275:60)
    number [0.8] (275:60-275:63)
    } [}] (275:63-275:64)
    / [/] (275:65-275:66)
    regex_pattern [>] (275:66-275:67)
    < [<] (276:14-276:15)
    ERROR [XAxis] (276:15-276:20)
      identifier [XAxis] (276:15-276:20)
    type_parameter [dataKey="time" 
                tick={{ fill: '#666' }} 
                axisLine={{ stroke: '#999' }] (277:16-279:44)
      type_identifier [dataKey] (277:16-277:23)
      default_type [="time" 
                tick={{ fill: '#666' }} 
                axisLine={{ stroke: '#999' }] (277:23-279:44)
        = [=] (277:23-277:24)
        ERROR ["time" 
                tick={{ fill: '#666' }} 
                axisLine={] (277:24-279:26)
          literal_type ["time"] (277:24-277:30)
            string ["time"] (277:24-277:30)
              " ["] (277:24-277:25)
              string_fragment [time] (277:25-277:29)
              " ["] (277:29-277:30)
          identifier [tick] (278:16-278:20)
          = [=] (278:20-278:21)
          { [{] (278:21-278:22)
          { [{] (278:22-278:23)
          identifier [fill] (278:24-278:28)
          : [:] (278:28-278:29)
          literal_type ['#666'] (278:30-278:36)
            string ['#666'] (278:30-278:36)
              ' ['] (278:30-278:31)
              string_fragment [#666] (278:31-278:35)
              ' ['] (278:35-278:36)
          } [}] (278:37-278:38)
          } [}] (278:38-278:39)
          type_identifier [axisLine] (279:16-279:24)
          = [=] (279:24-279:25)
          { [{] (279:25-279:26)
        object_type [{ stroke: '#999' }] (279:26-279:44)
          { [{] (279:26-279:27)
          property_signature [stroke: '#999'] (279:28-279:42)
            property_identifier [stroke] (279:28-279:34)
            type_annotation [: '#999'] (279:34-279:42)
              : [:] (279:34-279:35)
              literal_type ['#999'] (279:36-279:42)
                string ['#999'] (279:36-279:42)
                  ' ['] (279:36-279:37)
                  string_fragment [#999] (279:37-279:41)
                  ' ['] (279:41-279:42)
          } [}] (279:43-279:44)
    } [}] (279:44-279:45)
    / [/] (280:14-280:15)
    regex_pattern [>] (280:15-280:16)
  type_arguments [<YAxis] (281:14-281:20)
    < [<] (281:14-281:15)
    type_identifier [YAxis] (281:15-281:20)
    > [] (281:20-281:20)
  identifier [tick] (282:16-282:20)
  = [=] (282:20-282:21)
  { [{] (282:21-282:22)
  { [{] (282:22-282:23)
  property_identifier [fill] (282:24-282:28)
  : [:] (282:28-282:29)
  ERROR ['#666' }}] (282:30-282:39)
    string ['#666'] (282:30-282:36)
      ' ['] (282:30-282:31)
      string_fragment [#666] (282:31-282:35)
      ' ['] (282:35-282:36)
    } [}] (282:37-282:38)
    } [}] (282:38-282:39)
  identifier [axisLine] (283:16-283:24)
  = [=] (283:24-283:25)
  { [{] (283:25-283:26)
  { [{] (283:26-283:27)
  property_identifier [stroke] (283:28-283:34)
  : [:] (283:34-283:35)
  binary_expression ['#999' }} 
              />
              
              <Tooltip content={<CustomTooltip />} /] (283:36-286:52)
    string ['#999'] (283:36-283:42)
      ' ['] (283:36-283:37)
      string_fragment [#999] (283:37-283:41)
      ' ['] (283:41-283:42)
    ERROR [}}] (283:43-283:45)
      } [}] (283:43-283:44)
      } [}] (283:44-283:45)
    / [/] (284:14-284:15)
    ERROR [>
              
              <Tooltip content={<CustomTooltip] (284:15-286:46)
      > [>] (284:15-284:16)
      < [<] (286:14-286:15)
      ERROR [Tooltip] (286:15-286:22)
        identifier [Tooltip] (286:15-286:22)
      identifier [content] (286:23-286:30)
      = [=] (286:30-286:31)
      { [{] (286:31-286:32)
      < [<] (286:32-286:33)
      identifier [CustomTooltip] (286:33-286:46)
    regex [/>} /] (286:47-286:52)
      / [/] (286:47-286:48)
      regex_pattern [>} ] (286:48-286:51)
      / [/] (286:51-286:52)
  > [>] (286:52-286:53)
  ERROR [<Legend 
                onMouseEnter={(e) => handleMouseEnter(e.dataKey)}
                onMouseLeave={handleMouseLeave}
              />
              
              <Area] (288:14-293:19)
    type_parameters [<Legend 
                onMouseEnter={(e) => handleMouseEnter(e.dataKey)}
                onMouseLeave={handleMouseLeave}
              />] (288:14-291:16)
      < [<] (288:14-288:15)
      ERROR [Legend] (288:15-288:21)
        identifier [Legend] (288:15-288:21)
      type_parameter [onMouseEnter={(e) => handleMouseEnter(e.dataKey)}] (289:16-289:65)
        type_identifier [onMouseEnter] (289:16-289:28)
        default_type [={(e) => handleMouseEnter(e.dataKey)}] (289:28-289:65)
          = [=] (289:28-289:29)
          object_type [{(e) => handleMouseEnter(e.dataKey)}] (289:29-289:65)
            { [{] (289:29-289:30)
            ERROR [(e) =>] (289:30-289:36)
              formal_parameters [(e)] (289:30-289:33)
                ( [(] (289:30-289:31)
                required_parameter [e] (289:31-289:32)
                  identifier [e] (289:31-289:32)
                ) [)] (289:32-289:33)
              => [=>] (289:34-289:36)
            method_signature [handleMouseEnter(e.dataKey)] (289:37-289:64)
              property_identifier [handleMouseEnter] (289:37-289:53)
              formal_parameters [(e.dataKey)] (289:53-289:64)
                ( [(] (289:53-289:54)
                required_parameter [e.dataKey] (289:54-289:63)
                  member_expression [e.dataKey] (289:54-289:63)
                    identifier [e] (289:54-289:55)
                    . [.] (289:55-289:56)
                    property_identifier [dataKey] (289:56-289:63)
                ) [)] (289:63-289:64)
            } [}] (289:64-289:65)
      ERROR [onMouseLeave={handleMouseLeave}
              /] (290:16-291:15)
        identifier [onMouseLeave] (290:16-290:28)
        = [=] (290:28-290:29)
        { [{] (290:29-290:30)
        identifier [handleMouseLeave] (290:30-290:46)
        } [}] (290:46-290:47)
        / [/] (291:14-291:15)
      > [>] (291:15-291:16)
    < [<] (293:14-293:15)
    identifier [Area] (293:15-293:19)
  type [type] (294:16-294:20)
  = [=] (294:20-294:21)
  member_expression ["monotone" 
                dataKey] (294:21-295:23)
    string ["monotone"] (294:21-294:31)
      " ["] (294:21-294:22)
      string_fragment [monotone] (294:22-294:30)
      " ["] (294:30-294:31)
    optional_chain [] (294:31-294:31)
      ?. [] (294:31-294:31)
    property_identifier [dataKey] (295:16-295:23)
  = [=] (295:23-295:24)
  member_expression ["engagement" 
                name] (295:24-296:20)
    string ["engagement"] (295:24-295:36)
      " ["] (295:24-295:25)
      string_fragment [engagement] (295:25-295:35)
      " ["] (295:35-295:36)
    optional_chain [] (295:36-295:36)
      ?. [] (295:36-295:36)
    property_identifier [name] (296:16-296:20)
  = [=] (296:20-296:21)
  member_expression ["Engagement"
                fill] (296:21-297:20)
    string ["Engagement"] (296:21-296:33)
      " ["] (296:21-296:22)
      string_fragment [Engagement] (296:22-296:32)
      " ["] (296:32-296:33)
    optional_chain [] (296:33-296:33)
      ?. [] (296:33-296:33)
    property_identifier [fill] (297:16-297:20)
  = [=] (297:20-297:21)
  member_expression ["url(#engagementGradient)"
                stroke] (297:21-298:22)
    string ["url(#engagementGradient)"] (297:21-297:47)
      " ["] (297:21-297:22)
      string_fragment [url(#engagementGradient)] (297:22-297:46)
      " ["] (297:46-297:47)
    optional_chain [] (297:47-297:47)
      ?. [] (297:47-297:47)
    property_identifier [stroke] (298:16-298:22)
  = [=] (298:22-298:23)
  ERROR ["#E98AF0"] (298:23-298:32)
    string ["#E98AF0"] (298:23-298:32)
      " ["] (298:23-298:24)
      string_fragment [#E98AF0] (298:24-298:31)
      " ["] (298:31-298:32)
  identifier [strokeWidth] (299:16-299:27)
  = [=] (299:27-299:28)
  object_pattern [{activeType === 'engagement' ? 3 : 1}] (299:28-299:65)
    { [{] (299:28-299:29)
    object_assignment_pattern [activeType === 'engagement' ? 3 : 1] (299:29-299:64)
      shorthand_property_identifier_pattern [activeType] (299:29-299:39)
      = [=] (299:40-299:41)
      ERROR [==] (299:41-299:43)
        = [=] (299:41-299:42)
        = [=] (299:42-299:43)
      ternary_expression ['engagement' ? 3 : 1] (299:44-299:64)
        string ['engagement'] (299:44-299:56)
          ' ['] (299:44-299:45)
          string_fragment [engagement] (299:45-299:55)
          ' ['] (299:55-299:56)
        ? [?] (299:57-299:58)
        number [3] (299:59-299:60)
        : [:] (299:61-299:62)
        number [1] (299:63-299:64)
    } [}] (299:64-299:65)
  ERROR [fillOpacity] (300:16-300:27)
    identifier [fillOpacity] (300:16-300:27)
  = [=] (300:27-300:28)
  object_pattern [{activeType === 'viral' ? 0.3 : 1}] (300:28-300:62)
    { [{] (300:28-300:29)
    object_assignment_pattern [activeType === 'viral' ? 0.3 : 1] (300:29-300:61)
      shorthand_property_identifier_pattern [activeType] (300:29-300:39)
      = [=] (300:40-300:41)
      ERROR [==] (300:41-300:43)
        = [=] (300:41-300:42)
        = [=] (300:42-300:43)
      ternary_expression ['viral' ? 0.3 : 1] (300:44-300:61)
        string ['viral'] (300:44-300:51)
          ' ['] (300:44-300:45)
          string_fragment [viral] (300:45-300:50)
          ' ['] (300:50-300:51)
        ? [?] (300:52-300:53)
        number [0.3] (300:54-300:57)
        : [:] (300:58-300:59)
        number [1] (300:60-300:61)
    } [}] (300:61-300:62)
  ERROR [animationBegin] (301:16-301:30)
    identifier [animationBegin] (301:16-301:30)
  = [=] (301:30-301:31)
  { [{] (301:31-301:32)
  ERROR [0}] (301:32-301:34)
    number [0] (301:32-301:33)
    } [}] (301:33-301:34)
  identifier [animationDuration] (302:16-302:33)
  = [=] (302:33-302:34)
  { [{] (302:34-302:35)
  ERROR [800}] (302:35-302:39)
    number [800] (302:35-302:38)
    } [}] (302:38-302:39)
  identifier [animationEasing] (303:16-303:31)
  = [=] (303:31-303:32)
  member_expression ["ease-in-out"
                isAnimationActive] (303:32-304:33)
    string ["ease-in-out"] (303:32-303:45)
      " ["] (303:32-303:33)
      string_fragment [ease-in-out] (303:33-303:44)
      " ["] (303:44-303:45)
    optional_chain [] (303:45-303:45)
      ?. [] (303:45-303:45)
    property_identifier [isAnimationActive] (304:16-304:33)
  = [=] (304:33-304:34)
  binary_expression [{true}
              />
              
              {showCompetitor] (304:34-307:29)
    object [{true}] (304:34-304:40)
      { [{] (304:34-304:35)
      shorthand_property_identifier [true] (304:35-304:39)
      } [}] (304:39-304:40)
    / [/] (305:14-305:15)
    ERROR [>] (305:15-305:16)
      > [>] (305:15-305:16)
    object [{showCompetitor] (307:14-307:29)
      { [{] (307:14-307:15)
      shorthand_property_identifier [showCompetitor] (307:15-307:29)
      } [] (307:29-307:29)
  && [&&] (307:30-307:32)
  ( [(] (307:33-307:34)
  type_parameters [<Area 
                  type="monotone" 
                  dataKey="competitorEngagement" 
                  name="Competitor Engagement"
                  fill="url(#competitorEngagementGradient)"
                  stroke="#FF0000"
                  strokeWidth={activeType === 'competitorEngagement' ? 3 : 1}
                  fillOpacity={activeType === 'viral' ? 0.3 : 0.6}
                  animationBegin={0}
                  animationDuration={800}
                  animationEasing="ease-in-out"
                  isAnimationActive={true}
                />] (308:16-320:18)
    < [<] (308:16-308:17)
    ERROR [Area] (308:17-308:21)
      identifier [Area] (308:17-308:21)
    type_parameter [type="monotone" 
                  dataKey="competitorEngagement" 
                  name="Competitor Engagement"
                  fill="url(#competitorEngagementGradient)"
                  stroke="#FF0000"
                  strokeWidth={activeType === 'competitorEngagement' ? 3 : 1}
                  fillOpacity={activeType === 'viral' ? 0.3 : 0.6}
                  animationBegin={0}
                  animationDuration={800}
                  animationEasing="ease-in-out"
                  isAnimationActive={true}] (309:18-319:42)
      type_identifier [type] (309:18-309:22)
      default_type [="monotone" 
                  dataKey="competitorEngagement" 
                  name="Competitor Engagement"
                  fill="url(#competitorEngagementGradient)"
                  stroke="#FF0000"
                  strokeWidth={activeType === 'competitorEngagement' ? 3 : 1}
                  fillOpacity={activeType === 'viral' ? 0.3 : 0.6}
                  animationBegin={0}
                  animationDuration={800}
                  animationEasing="ease-in-out"
                  isAnimationActive={true}] (309:22-319:42)
        = [=] (309:22-309:23)
        ERROR ["monotone" 
                  dataKey="competitorEngagement" 
                  name="Competitor Engagement"
                  fill="url(#competitorEngagementGradient)"
                  stroke="#FF0000"
                  strokeWidth={activeType === 'competitorEngagement' ? 3 : 1}
                  fillOpacity={activeType === 'viral' ? 0.3 : 0.6}
                  animationBegin={0}
                  animationDuration={800}
                  animationEasing="ease-in-out"
                  isAnimationActive=] (309:23-319:36)
          literal_type ["monotone"] (309:23-309:33)
            string ["monotone"] (309:23-309:33)
              " ["] (309:23-309:24)
              string_fragment [monotone] (309:24-309:32)
              " ["] (309:32-309:33)
          identifier [dataKey] (310:18-310:25)
          = [=] (310:25-310:26)
          literal_type ["competitorEngagement"] (310:26-310:48)
            string ["competitorEngagement"] (310:26-310:48)
              " ["] (310:26-310:27)
              string_fragment [competitorEngagement] (310:27-310:47)
              " ["] (310:47-310:48)
          identifier [name] (311:18-311:22)
          = [=] (311:22-311:23)
          literal_type ["Competitor Engagement"] (311:23-311:46)
            string ["Competitor Engagement"] (311:23-311:46)
              " ["] (311:23-311:24)
              string_fragment [Competitor Engagement] (311:24-311:45)
              " ["] (311:45-311:46)
          identifier [fill] (312:18-312:22)
          = [=] (312:22-312:23)
          literal_type ["url(#competitorEngagementGradient)"] (312:23-312:59)
            string ["url(#competitorEngagementGradient)"] (312:23-312:59)
              " ["] (312:23-312:24)
              string_fragment [url(#competitorEngagementGradient)] (312:24-312:58)
              " ["] (312:58-312:59)
          identifier [stroke] (313:18-313:24)
          = [=] (313:24-313:25)
          literal_type ["#FF0000"] (313:25-313:34)
            string ["#FF0000"] (313:25-313:34)
              " ["] (313:25-313:26)
              string_fragment [#FF0000] (313:26-313:33)
              " ["] (313:33-313:34)
          type_identifier [strokeWidth] (314:18-314:29)
          = [=] (314:29-314:30)
          object_type [{activeType === 'competitorEngagement' ? 3 : 1}] (314:30-314:77)
            { [{] (314:30-314:31)
            ERROR [activeType === 'competitorEngagement' ?] (314:31-314:70)
              property_identifier [activeType] (314:31-314:41)
              = [=] (314:42-314:43)
              == [==] (314:43-314:45)
              property_signature ['competitorEngagement' ?] (314:46-314:70)
                string ['competitorEngagement'] (314:46-314:68)
                  ' ['] (314:46-314:47)
                  string_fragment [competitorEngagement] (314:47-314:67)
                  ' ['] (314:67-314:68)
                ? [?] (314:69-314:70)
            property_signature [3 : 1] (314:71-314:76)
              number [3] (314:71-314:72)
              type_annotation [: 1] (314:73-314:76)
                : [:] (314:73-314:74)
                literal_type [1] (314:75-314:76)
                  number [1] (314:75-314:76)
            } [}] (314:76-314:77)
          identifier [fillOpacity] (315:18-315:29)
          = [=] (315:29-315:30)
          { [{] (315:30-315:31)
          type_identifier [activeType] (315:31-315:41)
          = [=] (315:42-315:43)
          == [==] (315:43-315:45)
          literal_type ['viral'] (315:46-315:53)
            string ['viral'] (315:46-315:53)
              ' ['] (315:46-315:47)
              string_fragment [viral] (315:47-315:52)
              ' ['] (315:52-315:53)
          flow_maybe_type [? 0.3] (315:54-315:59)
            ? [?] (315:54-315:55)
            literal_type [0.3] (315:56-315:59)
              number [0.3] (315:56-315:59)
          : [:] (315:60-315:61)
          literal_type [0.6] (315:62-315:65)
            number [0.6] (315:62-315:65)
          } [}] (315:65-315:66)
          type_identifier [animationBegin] (316:18-316:32)
          = [=] (316:32-316:33)
          object_type [{0}] (316:33-316:36)
            { [{] (316:33-316:34)
            property_signature [0] (316:34-316:35)
              number [0] (316:34-316:35)
            } [}] (316:35-316:36)
          type_identifier [animationDuration] (317:18-317:35)
          = [=] (317:35-317:36)
          object_type [{800}] (317:36-317:41)
            { [{] (317:36-317:37)
            property_signature [800] (317:37-317:40)
              number [800] (317:37-317:40)
            } [}] (317:40-317:41)
          type_identifier [animationEasing] (318:18-318:33)
          = [=] (318:33-318:34)
          literal_type ["ease-in-out"] (318:34-318:47)
            string ["ease-in-out"] (318:34-318:47)
              " ["] (318:34-318:35)
              string_fragment [ease-in-out] (318:35-318:46)
              " ["] (318:46-318:47)
          type_identifier [isAnimationActive] (319:18-319:35)
          = [=] (319:35-319:36)
        object_type [{true}] (319:36-319:42)
          { [{] (319:36-319:37)
          property_signature [true] (319:37-319:41)
            property_identifier [true] (319:37-319:41)
          } [}] (319:41-319:42)
    ERROR [/] (320:16-320:17)
      / [/] (320:16-320:17)
    > [>] (320:17-320:18)
  ERROR [)}
              
              <Scatter 
                dataKey="viral" 
                name="Viral"
                fill="#8A8FF0"
                stroke="#8A8FF0"
                strokeWidth={activeType === 'viral' ? 2 : 0}
                r={activeType === 'viral' ? 8 : 6}
                fillOpacity={activeType === 'engagement' ? 0.3 : 0.8}
                animationBegin={800}
                animationDuration={400}
                isAnimationActive={true}
              />
              
              {showCompetitor &&] (321:14-336:32)
    ) [)] (321:14-321:15)
    } [}] (321:15-321:16)
    < [<] (323:14-323:15)
    identifier [Scatter] (323:15-323:22)
    identifier [dataKey] (324:16-324:23)
    = [=] (324:23-324:24)
    " ["] (324:24-324:25)
    identifier [viral] (324:25-324:30)
    " ["] (324:30-324:31)
    identifier [name] (325:16-325:20)
    = [=] (325:20-325:21)
    " ["] (325:21-325:22)
    identifier [Viral] (325:22-325:27)
    " ["] (325:27-325:28)
    identifier [fill] (326:16-326:20)
    = [=] (326:20-326:21)
    " ["] (326:21-326:22)
    ERROR [#] (326:22-326:23)
    number [8] (326:23-326:24)
    identifier [A8FF0] (326:24-326:29)
    " ["] (326:29-326:30)
    identifier [stroke] (327:16-327:22)
    = [=] (327:22-327:23)
    " ["] (327:23-327:24)
    ERROR [#] (327:24-327:25)
    number [8] (327:25-327:26)
    identifier [A8FF0] (327:26-327:31)
    " ["] (327:31-327:32)
    identifier [strokeWidth] (328:16-328:27)
    = [=] (328:27-328:28)
    { [{] (328:28-328:29)
    identifier [activeType] (328:29-328:39)
    === [===] (328:40-328:43)
    ' ['] (328:44-328:45)
    identifier [viral] (328:45-328:50)
    ' ['] (328:50-328:51)
    ? [?] (328:52-328:53)
    number [2] (328:54-328:55)
    : [:] (328:56-328:57)
    number [0] (328:58-328:59)
    } [}] (328:59-328:60)
    identifier [r] (329:16-329:17)
    = [=] (329:17-329:18)
    { [{] (329:18-329:19)
    identifier [activeType] (329:19-329:29)
    === [===] (329:30-329:33)
    ' ['] (329:34-329:35)
    identifier [viral] (329:35-329:40)
    ' ['] (329:40-329:41)
    ? [?] (329:42-329:43)
    number [8] (329:44-329:45)
    : [:] (329:46-329:47)
    number [6] (329:48-329:49)
    } [}] (329:49-329:50)
    identifier [fillOpacity] (330:16-330:27)
    = [=] (330:27-330:28)
    { [{] (330:28-330:29)
    identifier [activeType] (330:29-330:39)
    === [===] (330:40-330:43)
    ' ['] (330:44-330:45)
    identifier [engagement] (330:45-330:55)
    ' ['] (330:55-330:56)
    ? [?] (330:57-330:58)
    number [0.3] (330:59-330:62)
    : [:] (330:63-330:64)
    number [0.8] (330:65-330:68)
    } [}] (330:68-330:69)
    identifier [animationBegin] (331:16-331:30)
    = [=] (331:30-331:31)
    { [{] (331:31-331:32)
    number [800] (331:32-331:35)
    } [}] (331:35-331:36)
    identifier [animationDuration] (332:16-332:33)
    = [=] (332:33-332:34)
    { [{] (332:34-332:35)
    number [400] (332:35-332:38)
    } [}] (332:38-332:39)
    identifier [isAnimationActive] (333:16-333:33)
    = [=] (333:33-333:34)
    { [{] (333:34-333:35)
    true [true] (333:35-333:39)
    } [}] (333:39-333:40)
    / [/] (334:14-334:15)
    > [>] (334:15-334:16)
    { [{] (336:14-336:15)
    identifier [showCompetitor] (336:15-336:29)
    && [&&] (336:30-336:32)
  ( [(] (336:33-336:34)
  ERROR [<Scatter 
                  dataKey="competitorViral" 
                  name="Competitor Viral"
                  fill="#FF0000"
                  stroke="#FF0000"
                  strokeWidth={activeType === 'competitorViral' ? 2 : 0}
                  r={activeType === 'competitorViral' ? 8 : 6}
                  fillOpacity={activeType === 'engagement' ? 0.3 : 0.8}
                  animationBegin={800}
                  animationDuration={400}
                  isAnimationActive={true}
                />
              )}
            </ComposedChart>
          </ResponsiveContainer>
        </div>
      );
    };

    interface PlatformData {
      date: string;
      youtube: number;
      instagram: number;
      reddit: number;
      competitorYoutube?: number;
      competitorInstagram?: number;
    }
    
    interface PlatformPerformanceProps {
      showCompetitor?: boolean;
    }
    
    export const] (337:16-369:16)
    type_parameters [<Scatter 
                  dataKey="competitorViral" 
                  name="Competitor Viral"
                  fill="#FF0000"
                  stroke="#FF0000"
                  strokeWidth={activeType === 'competitorViral' ? 2 : 0}
                  r={activeType === 'competitorViral' ? 8 : 6}
                  fillOpacity={activeType === 'engagement' ? 0.3 : 0.8}
                  animationBegin={800}
                  animationDuration={400}
                  isAnimationActive={true}
                />] (337:16-348:18)
      < [<] (337:16-337:17)
      ERROR [Scatter] (337:17-337:24)
        identifier [Scatter] (337:17-337:24)
      type_parameter [dataKey="competitorViral" 
                  name="Competitor Viral"
                  fill="#FF0000"
                  stroke="#FF0000"
                  strokeWidth={activeType === 'competitorViral' ? 2 : 0}
                  r={activeType === 'competitorViral' ? 8 : 6}
                  fillOpacity={activeType === 'engagement' ? 0.3 : 0.8}
                  animationBegin={800}
                  animationDuration={400}
                  isAnimationActive={true}] (338:18-347:42)
        type_identifier [dataKey] (338:18-338:25)
        default_type [="competitorViral" 
                  name="Competitor Viral"
                  fill="#FF0000"
                  stroke="#FF0000"
                  strokeWidth={activeType === 'competitorViral' ? 2 : 0}
                  r={activeType === 'competitorViral' ? 8 : 6}
                  fillOpacity={activeType === 'engagement' ? 0.3 : 0.8}
                  animationBegin={800}
                  animationDuration={400}
                  isAnimationActive={true}] (338:25-347:42)
          = [=] (338:25-338:26)
          ERROR ["competitorViral" 
                  name="Competitor Viral"
                  fill="#FF0000"
                  stroke="#FF0000"
                  strokeWidth={activeType === 'competitorViral' ? 2 : 0}
                  r={activeType === 'competitorViral' ? 8 : 6}
                  fillOpacity={activeType === 'engagement' ? 0.3 : 0.8}
                  animationBegin={800}
                  animationDuration={400}
                  isAnimationActive=] (338:26-347:36)
            literal_type ["competitorViral"] (338:26-338:43)
              string ["competitorViral"] (338:26-338:43)
                " ["] (338:26-338:27)
                string_fragment [competitorViral] (338:27-338:42)
                " ["] (338:42-338:43)
            identifier [name] (339:18-339:22)
            = [=] (339:22-339:23)
            literal_type ["Competitor Viral"] (339:23-339:41)
              string ["Competitor Viral"] (339:23-339:41)
                " ["] (339:23-339:24)
                string_fragment [Competitor Viral] (339:24-339:40)
                " ["] (339:40-339:41)
            identifier [fill] (340:18-340:22)
            = [=] (340:22-340:23)
            literal_type ["#FF0000"] (340:23-340:32)
              string ["#FF0000"] (340:23-340:32)
                " ["] (340:23-340:24)
                string_fragment [#FF0000] (340:24-340:31)
                " ["] (340:31-340:32)
            identifier [stroke] (341:18-341:24)
            = [=] (341:24-341:25)
            literal_type ["#FF0000"] (341:25-341:34)
              string ["#FF0000"] (341:25-341:34)
                " ["] (341:25-341:26)
                string_fragment [#FF0000] (341:26-341:33)
                " ["] (341:33-341:34)
            type_identifier [strokeWidth] (342:18-342:29)
            = [=] (342:29-342:30)
            object_type [{activeType === 'competitorViral' ? 2 : 0}] (342:30-342:72)
              { [{] (342:30-342:31)
              ERROR [activeType === 'competitorViral' ?] (342:31-342:65)
                property_identifier [activeType] (342:31-342:41)
                = [=] (342:42-342:43)
                == [==] (342:43-342:45)
                property_signature ['competitorViral' ?] (342:46-342:65)
                  string ['competitorViral'] (342:46-342:63)
                    ' ['] (342:46-342:47)
                    string_fragment [competitorViral] (342:47-342:62)
                    ' ['] (342:62-342:63)
                  ? [?] (342:64-342:65)
              property_signature [2 : 0] (342:66-342:71)
                number [2] (342:66-342:67)
                type_annotation [: 0] (342:68-342:71)
                  : [:] (342:68-342:69)
                  literal_type [0] (342:70-342:71)
                    number [0] (342:70-342:71)
              } [}] (342:71-342:72)
            identifier [r] (343:18-343:19)
            = [=] (343:19-343:20)
            { [{] (343:20-343:21)
            type_identifier [activeType] (343:21-343:31)
            = [=] (343:32-343:33)
            == [==] (343:33-343:35)
            literal_type ['competitorViral'] (343:36-343:53)
              string ['competitorViral'] (343:36-343:53)
                ' ['] (343:36-343:37)
                string_fragment [competitorViral] (343:37-343:52)
                ' ['] (343:52-343:53)
            flow_maybe_type [? 8] (343:54-343:57)
              ? [?] (343:54-343:55)
              literal_type [8] (343:56-343:57)
                number [8] (343:56-343:57)
            : [:] (343:58-343:59)
            literal_type [6] (343:60-343:61)
              number [6] (343:60-343:61)
            } [}] (343:61-343:62)
            type_identifier [fillOpacity] (344:18-344:29)
            = [=] (344:29-344:30)
            object_type [{activeType === 'engagement' ? 0.3 : 0.8}] (344:30-344:71)
              { [{] (344:30-344:31)
              ERROR [activeType === 'engagement' ?] (344:31-344:60)
                property_identifier [activeType] (344:31-344:41)
                = [=] (344:42-344:43)
                == [==] (344:43-344:45)
                property_signature ['engagement' ?] (344:46-344:60)
                  string ['engagement'] (344:46-344:58)
                    ' ['] (344:46-344:47)
                    string_fragment [engagement] (344:47-344:57)
                    ' ['] (344:57-344:58)
                  ? [?] (344:59-344:60)
              property_signature [0.3 : 0.8] (344:61-344:70)
                number [0.3] (344:61-344:64)
                type_annotation [: 0.8] (344:65-344:70)
                  : [:] (344:65-344:66)
                  literal_type [0.8] (344:67-344:70)
                    number [0.8] (344:67-344:70)
              } [}] (344:70-344:71)
            identifier [animationBegin] (345:18-345:32)
            = [=] (345:32-345:33)
            { [{] (345:33-345:34)
            literal_type [800] (345:34-345:37)
              number [800] (345:34-345:37)
            } [}] (345:37-345:38)
            type_identifier [animationDuration] (346:18-346:35)
            = [=] (346:35-346:36)
            object_type [{400}] (346:36-346:41)
              { [{] (346:36-346:37)
              property_signature [400] (346:37-346:40)
                number [400] (346:37-346:40)
              } [}] (346:40-346:41)
            type_identifier [isAnimationActive] (347:18-347:35)
            = [=] (347:35-347:36)
          object_type [{true}] (347:36-347:42)
            { [{] (347:36-347:37)
            property_signature [true] (347:37-347:41)
              property_identifier [true] (347:37-347:41)
            } [}] (347:41-347:42)
      ERROR [/] (348:16-348:17)
        / [/] (348:16-348:17)
      > [>] (348:17-348:18)
    ) [)] (349:14-349:15)
    } [}] (349:15-349:16)
    < [<] (350:12-350:13)
    / [/] (350:13-350:14)
    identifier [ComposedChart] (350:14-350:27)
    > [>] (350:27-350:28)
    < [<] (351:10-351:11)
    / [/] (351:11-351:12)
    identifier [ResponsiveContainer] (351:12-351:31)
    > [>] (351:31-351:32)
    < [<] (352:8-352:9)
    / [/] (352:9-352:10)
    identifier [div] (352:10-352:13)
    > [>] (352:13-352:14)
    ) [)] (353:6-353:7)
    ; [;] (353:7-353:8)
    } [}] (354:4-354:5)
    ; [;] (354:5-354:6)
    interface [interface] (356:4-356:13)
    identifier [PlatformData] (356:14-356:26)
    { [{] (356:27-356:28)
    identifier [date] (357:6-357:10)
    : [:] (357:10-357:11)
    string [string] (357:12-357:18)
    ; [;] (357:18-357:19)
    identifier [youtube] (358:6-358:13)
    : [:] (358:13-358:14)
    number [number] (358:15-358:21)
    ; [;] (358:21-358:22)
    identifier [instagram] (359:6-359:15)
    : [:] (359:15-359:16)
    number [number] (359:17-359:23)
    ; [;] (359:23-359:24)
    identifier [reddit] (360:6-360:12)
    : [:] (360:12-360:13)
    number [number] (360:14-360:20)
    ; [;] (360:20-360:21)
    identifier [competitorYoutube] (361:6-361:23)
    ? [?] (361:23-361:24)
    : [:] (361:24-361:25)
    number [number] (361:26-361:32)
    ; [;] (361:32-361:33)
    identifier [competitorInstagram] (362:6-362:25)
    ? [?] (362:25-362:26)
    : [:] (362:26-362:27)
    number [number] (362:28-362:34)
    ; [;] (362:34-362:35)
    } [}] (363:4-363:5)
    interface [interface] (365:4-365:13)
    identifier [PlatformPerformanceProps] (365:14-365:38)
    { [{] (365:39-365:40)
    identifier [showCompetitor] (366:6-366:20)
    ? [?] (366:20-366:21)
    : [:] (366:21-366:22)
    boolean [boolean] (366:23-366:30)
    ; [;] (366:30-366:31)
    } [}] (367:4-367:5)
    export [export] (369:4-369:10)
    const [const] (369:11-369:16)
  identifier [PlatformPerformance] (369:17-369:36)
  type_annotation [: React.FC<PlatformPerformanceProps>] (369:36-369:72)
    : [:] (369:36-369:37)
    generic_type [React.FC<PlatformPerformanceProps>] (369:38-369:72)
      nested_type_identifier [React.FC] (369:38-369:46)
        identifier [React] (369:38-369:43)
        . [.] (369:43-369:44)
        type_identifier [FC] (369:44-369:46)
      type_arguments [<PlatformPerformanceProps>] (369:46-369:72)
        < [<] (369:46-369:47)
        type_identifier [PlatformPerformanceProps] (369:47-369:71)
        > [>] (369:71-369:72)
  = [=] (369:73-369:74)
  formal_parameters [({ 
      showCompetitor = false 
    })] (369:75-371:6)
    ( [(] (369:75-369:76)
    required_parameter [{ 
      showCompetitor = false 
    }] (369:76-371:5)
      object_pattern [{ 
      showCompetitor = false 
    }] (369:76-371:5)
        { [{] (369:76-369:77)
        object_assignment_pattern [showCompetitor = false] (370:6-370:28)
          shorthand_property_identifier_pattern [showCompetitor] (370:6-370:20)
          = [=] (370:21-370:22)
          false [false] (370:23-370:28)
        } [}] (371:4-371:5)
    ) [)] (371:5-371:6)
  => [=>] (371:7-371:9)
  { [{] (371:10-371:11)
  lexical_declaration [const [activePlatform, setActivePlatform] = useState<string | null>(null);] (372:6-372:80)
    const [const] (372:6-372:11)
    variable_declarator [[activePlatform, setActivePlatform] = useState<string | null>(null)] (372:12-372:79)
      array_pattern [[activePlatform, setActivePlatform]] (372:12-372:47)
        [ [[] (372:12-372:13)
        identifier [activePlatform] (372:13-372:27)
        , [,] (372:27-372:28)
        identifier [setActivePlatform] (372:29-372:46)
        ] []] (372:46-372:47)
      = [=] (372:48-372:49)
      call_expression [useState<string | null>(null)] (372:50-372:79)
        identifier [useState] (372:50-372:58)
        type_arguments [<string | null>] (372:58-372:73)
          < [<] (372:58-372:59)
          union_type [string | null] (372:59-372:72)
            predefined_type [string] (372:59-372:65)
              string [string] (372:59-372:65)
            | [|] (372:66-372:67)
            literal_type [null] (372:68-372:72)
              null [null] (372:68-372:72)
          > [>] (372:72-372:73)
        arguments [(null)] (372:73-372:79)
          ( [(] (372:73-372:74)
          null [null] (372:74-372:78)
          ) [)] (372:78-372:79)
    ; [;] (372:79-372:80)
  lexical_declaration [const [data, setData] = useState<PlatformData[]>([]);] (373:6-373:59)
    const [const] (373:6-373:11)
    variable_declarator [[data, setData] = useState<PlatformData[]>([])] (373:12-373:58)
      array_pattern [[data, setData]] (373:12-373:27)
        [ [[] (373:12-373:13)
        identifier [data] (373:13-373:17)
        , [,] (373:17-373:18)
        identifier [setData] (373:19-373:26)
        ] []] (373:26-373:27)
      = [=] (373:28-373:29)
      call_expression [useState<PlatformData[]>([])] (373:30-373:58)
        identifier [useState] (373:30-373:38)
        type_arguments [<PlatformData[]>] (373:38-373:54)
          < [<] (373:38-373:39)
          array_type [PlatformData[]] (373:39-373:53)
            type_identifier [PlatformData] (373:39-373:51)
            [ [[] (373:51-373:52)
            ] []] (373:52-373:53)
          > [>] (373:53-373:54)
        arguments [([])] (373:54-373:58)
          ( [(] (373:54-373:55)
          array [[]] (373:55-373:57)
            [ [[] (373:55-373:56)
            ] []] (373:56-373:57)
          ) [)] (373:57-373:58)
    ; [;] (373:58-373:59)
  expression_statement [useEffect(() => {
        setData(generatePlatformData());
      }, []);] (375:6-377:13)
    call_expression [useEffect(() => {
        setData(generatePlatformData());
      }, [])] (375:6-377:12)
      identifier [useEffect] (375:6-375:15)
      arguments [(() => {
        setData(generatePlatformData());
      }, [])] (375:15-377:12)
        ( [(] (375:15-375:16)
        arrow_function [() => {
        setData(generatePlatformData());
      }] (375:16-377:7)
          formal_parameters [()] (375:16-375:18)
            ( [(] (375:16-375:17)
            ) [)] (375:17-375:18)
          => [=>] (375:19-375:21)
          statement_block [{
        setData(generatePlatformData());
      }] (375:22-377:7)
            { [{] (375:22-375:23)
            expression_statement [setData(generatePlatformData());] (376:8-376:40)
              call_expression [setData(generatePlatformData())] (376:8-376:39)
                identifier [setData] (376:8-376:15)
                arguments [(generatePlatformData())] (376:15-376:39)
                  ( [(] (376:15-376:16)
                  call_expression [generatePlatformData()] (376:16-376:38)
                    identifier [generatePlatformData] (376:16-376:36)
                    arguments [()] (376:36-376:38)
                      ( [(] (376:36-376:37)
                      ) [)] (376:37-376:38)
                  ) [)] (376:38-376:39)
              ; [;] (376:39-376:40)
            } [}] (377:6-377:7)
        , [,] (377:7-377:8)
        array [[]] (377:9-377:11)
          [ [[] (377:9-377:10)
          ] []] (377:10-377:11)
        ) [)] (377:11-377:12)
    ; [;] (377:12-377:13)
  lexical_declaration [const handleMouseEnter = (platform: string) => {
        setActivePlatform(platform);
      };] (379:6-381:8)
    const [const] (379:6-379:11)
    variable_declarator [handleMouseEnter = (platform: string) => {
        setActivePlatform(platform);
      }] (379:12-381:7)
      identifier [handleMouseEnter] (379:12-379:28)
      = [=] (379:29-379:30)
      arrow_function [(platform: string) => {
        setActivePlatform(platform);
      }] (379:31-381:7)
        formal_parameters [(platform: string)] (379:31-379:49)
          ( [(] (379:31-379:32)
          required_parameter [platform: string] (379:32-379:48)
            identifier [platform] (379:32-379:40)
            type_annotation [: string] (379:40-379:48)
              : [:] (379:40-379:41)
              predefined_type [string] (379:42-379:48)
                string [string] (379:42-379:48)
          ) [)] (379:48-379:49)
        => [=>] (379:50-379:52)
        statement_block [{
        setActivePlatform(platform);
      }] (379:53-381:7)
          { [{] (379:53-379:54)
          expression_statement [setActivePlatform(platform);] (380:8-380:36)
            call_expression [setActivePlatform(platform)] (380:8-380:35)
              identifier [setActivePlatform] (380:8-380:25)
              arguments [(platform)] (380:25-380:35)
                ( [(] (380:25-380:26)
                identifier [platform] (380:26-380:34)
                ) [)] (380:34-380:35)
            ; [;] (380:35-380:36)
          } [}] (381:6-381:7)
    ; [;] (381:7-381:8)
  lexical_declaration [const handleMouseLeave = () => {
        setActivePlatform(null);
      };] (383:6-385:8)
    const [const] (383:6-383:11)
    variable_declarator [handleMouseLeave = () => {
        setActivePlatform(null);
      }] (383:12-385:7)
      identifier [handleMouseLeave] (383:12-383:28)
      = [=] (383:29-383:30)
      arrow_function [() => {
        setActivePlatform(null);
      }] (383:31-385:7)
        formal_parameters [()] (383:31-383:33)
          ( [(] (383:31-383:32)
          ) [)] (383:32-383:33)
        => [=>] (383:34-383:36)
        statement_block [{
        setActivePlatform(null);
      }] (383:37-385:7)
          { [{] (383:37-383:38)
          expression_statement [setActivePlatform(null);] (384:8-384:32)
            call_expression [setActivePlatform(null)] (384:8-384:31)
              identifier [setActivePlatform] (384:8-384:25)
              arguments [(null)] (384:25-384:31)
                ( [(] (384:25-384:26)
                null [null] (384:26-384:30)
                ) [)] (384:30-384:31)
            ; [;] (384:31-384:32)
          } [}] (385:6-385:7)
    ; [;] (385:7-385:8)
  return [return] (387:6-387:12)
  ( [(] (387:13-387:14)
  type_arguments [<div] (388:8-388:12)
    < [<] (388:8-388:9)
    type_identifier [div] (388:9-388:12)
    > [] (388:12-388:12)
  identifier [className] (388:13-388:22)
  = [=] (388:22-388:23)
  string ["h-96 w-full"] (388:23-388:36)
    " ["] (388:23-388:24)
    string_fragment [h-96 w-full] (388:24-388:35)
    " ["] (388:35-388:36)
  > [>] (388:36-388:37)
  ERROR [<ResponsiveContainer width="100%" height="100%">] (389:10-389:58)
    type_parameters [<ResponsiveContainer width="100%" height="100%">] (389:10-389:58)
      < [<] (389:10-389:11)
      type_parameter [ResponsiveContainer width="100%" height="100%"] (389:11-389:57)
        type_identifier [ResponsiveContainer] (389:11-389:30)
        ERROR [width] (389:31-389:36)
          identifier [width] (389:31-389:36)
        default_type [="100%" height="100%"] (389:36-389:57)
          = [=] (389:36-389:37)
          ERROR ["100%" height=] (389:37-389:51)
            literal_type ["100%"] (389:37-389:43)
              string ["100%"] (389:37-389:43)
                " ["] (389:37-389:38)
                string_fragment [100%] (389:38-389:42)
                " ["] (389:42-389:43)
            identifier [height] (389:44-389:50)
            = [=] (389:50-389:51)
          literal_type ["100%"] (389:51-389:57)
            string ["100%"] (389:51-389:57)
              " ["] (389:51-389:52)
              string_fragment [100%] (389:52-389:56)
              " ["] (389:56-389:57)
      > [>] (389:57-389:58)
  type_arguments [<LineChart] (390:12-390:22)
    < [<] (390:12-390:13)
    type_identifier [LineChart] (390:13-390:22)
    > [] (390:22-390:22)
  identifier [data] (390:23-390:27)
  = [=] (390:27-390:28)
  object [{data}] (390:28-390:34)
    { [{] (390:28-390:29)
    shorthand_property_identifier [data] (390:29-390:33)
    } [}] (390:33-390:34)
  > [>] (390:34-390:35)
  type_arguments [<CartesianGrid] (391:14-391:28)
    < [<] (391:14-391:15)
    type_identifier [CartesianGrid] (391:15-391:28)
    > [] (391:28-391:28)
  identifier [strokeDasharray] (391:29-391:44)
  = [=] (391:44-391:45)
  ERROR ["3 3"] (391:45-391:50)
    string ["3 3"] (391:45-391:50)
      " ["] (391:45-391:46)
      string_fragment [3 3] (391:46-391:49)
      " ["] (391:49-391:50)
  identifier [opacity] (391:51-391:58)
  = [=] (391:58-391:59)
  ERROR [{0.7} />] (391:59-391:67)
    { [{] (391:59-391:60)
    number [0.7] (391:60-391:63)
    } [}] (391:63-391:64)
    / [/] (391:65-391:66)
    regex_pattern [>] (391:66-391:67)
  type_arguments [<XAxis 
                dataKey="date" 
                tick={{ fill: '#666' }}
                tickFormatter={(value) => {
                  const date = new Date(value);
                  return date.toLocaleDateString('default', { month: 'short' });
                }}
              />] (393:14-400:16)
    < [<] (393:14-393:15)
    ERROR [XAxis 
                dataKey="date" 
                tick={{ fill: '#666' }}
                tickFormatter={(value) => {
                  const date = new Date(value);
                  return date.toLocaleDateString('default',] (393:15-398:59)
      identifier [XAxis] (393:15-393:20)
      identifier [dataKey] (394:16-394:23)
      = [=] (394:23-394:24)
      ERROR ["date" 
                tick={{ fill: '#666' }}
                tickFormatter=] (394:24-396:30)
        literal_type ["date"] (394:24-394:30)
          string ["date"] (394:24-394:30)
            " ["] (394:24-394:25)
            string_fragment [date] (394:25-394:29)
            " ["] (394:29-394:30)
        identifier [tick] (395:16-395:20)
        = [=] (395:20-395:21)
        { [{] (395:21-395:22)
        { [{] (395:22-395:23)
        identifier [fill] (395:24-395:28)
        : [:] (395:28-395:29)
        literal_type ['#666'] (395:30-395:36)
          string ['#666'] (395:30-395:36)
            ' ['] (395:30-395:31)
            string_fragment [#666] (395:31-395:35)
            ' ['] (395:35-395:36)
        } [}] (395:37-395:38)
        } [}] (395:38-395:39)
        type_identifier [tickFormatter] (396:16-396:29)
        = [=] (396:29-396:30)
      { [{] (396:30-396:31)
      formal_parameters [(value)] (396:31-396:38)
        ( [(] (396:31-396:32)
        required_parameter [value] (396:32-396:37)
          identifier [value] (396:32-396:37)
        ) [)] (396:37-396:38)
      => [=>] (396:39-396:41)
      { [{] (396:42-396:43)
      type_parameter [const date = new Date(value);
                  return date.toLocaleDateString('default'] (397:18-398:58)
        const [const] (397:18-397:23)
        type_identifier [date] (397:24-397:28)
        default_type [= new Date(value);
                  return date.toLocaleDateString('default'] (397:29-398:58)
          = [=] (397:29-397:30)
          ERROR [new Date(value);
                  return date.toLocaleDateString(] (397:31-398:49)
            new [new] (397:31-397:34)
            ERROR [Date] (397:35-397:39)
              identifier [Date] (397:35-397:39)
            formal_parameters [(value)] (397:39-397:46)
              ( [(] (397:39-397:40)
              required_parameter [value] (397:40-397:45)
                identifier [value] (397:40-397:45)
              ) [)] (397:45-397:46)
            ; [;] (397:46-397:47)
            return [return] (398:18-398:24)
            nested_identifier [date.toLocaleDateString] (398:25-398:48)
              identifier [date] (398:25-398:29)
              . [.] (398:29-398:30)
              property_identifier [toLocaleDateString] (398:30-398:48)
            ( [(] (398:48-398:49)
          literal_type ['default'] (398:49-398:58)
            string ['default'] (398:49-398:58)
              ' ['] (398:49-398:50)
              string_fragment [default] (398:50-398:57)
              ' ['] (398:57-398:58)
      , [,] (398:58-398:59)
    object_type [{ month: 'short' }] (398:60-398:78)
      { [{] (398:60-398:61)
      property_signature [month: 'short'] (398:62-398:76)
        property_identifier [month] (398:62-398:67)
        type_annotation [: 'short'] (398:67-398:76)
          : [:] (398:67-398:68)
          literal_type ['short'] (398:69-398:76)
            string ['short'] (398:69-398:76)
              ' ['] (398:69-398:70)
              string_fragment [short] (398:70-398:75)
              ' ['] (398:75-398:76)
      } [}] (398:77-398:78)
    ERROR [);
                }}
              /] (398:78-400:15)
      ) [)] (398:78-398:79)
      ; [;] (398:79-398:80)
      } [}] (399:16-399:17)
      } [}] (399:17-399:18)
      / [/] (400:14-400:15)
    > [>] (400:15-400:16)
  type_arguments [<YAxis] (402:14-402:20)
    < [<] (402:14-402:15)
    type_identifier [YAxis] (402:15-402:20)
    > [] (402:20-402:20)
  identifier [tick] (403:16-403:20)
  = [=] (403:20-403:21)
  { [{] (403:21-403:22)
  { [{] (403:22-403:23)
  property_identifier [fill] (403:24-403:28)
  : [:] (403:28-403:29)
  ERROR ['#666' }}] (403:30-403:39)
    string ['#666'] (403:30-403:36)
      ' ['] (403:30-403:31)
      string_fragment [#666] (403:31-403:35)
      ' ['] (403:35-403:36)
    } [}] (403:37-403:38)
    } [}] (403:38-403:39)
  identifier [width] (404:16-404:21)
  = [=] (404:21-404:22)
  ERROR [{40}
              />] (404:22-405:16)
    { [{] (404:22-404:23)
    number [40] (404:23-404:25)
    } [}] (404:25-404:26)
    / [/] (405:14-405:15)
    regex_pattern [>] (405:15-405:16)
  type_parameters [<Tooltip 
                animationDuration={200}
                contentStyle={{
                  backgroundColor: 'rgba(255, 255, 255, 0.9)',
                  borderRadius: '6px',
                  padding: '8px',
                  border: '1px solid #ccc'
                }}
                formatter={(value: number) => new Intl.NumberFormat().format(value)}
              />] (407:14-416:16)
    < [<] (407:14-407:15)
    ERROR [Tooltip] (407:15-407:22)
      identifier [Tooltip] (407:15-407:22)
    type_parameter [animationDuration={200}
                contentStyle={{
                  backgroundColor: 'rgba(255, 255, 255, 0.9)'] (408:16-410:61)
      type_identifier [animationDuration] (408:16-408:33)
      default_type [={200}
                contentStyle={{
                  backgroundColor: 'rgba(255, 255, 255, 0.9)'] (408:33-410:61)
        = [=] (408:33-408:34)
        ERROR [{200}
                contentStyle={{
                  backgroundColor:] (408:34-410:34)
          object_type [{200}] (408:34-408:39)
            { [{] (408:34-408:35)
            property_signature [200] (408:35-408:38)
              number [200] (408:35-408:38)
            } [}] (408:38-408:39)
          identifier [contentStyle] (409:16-409:28)
          = [=] (409:28-409:29)
          { [{] (409:29-409:30)
          { [{] (409:30-409:31)
          type_identifier [backgroundColor] (410:18-410:33)
          : [:] (410:33-410:34)
        literal_type ['rgba(255, 255, 255, 0.9)'] (410:35-410:61)
          string ['rgba(255, 255, 255, 0.9)'] (410:35-410:61)
            ' ['] (410:35-410:36)
            string_fragment [rgba(255, 255, 255, 0.9)] (410:36-410:60)
            ' ['] (410:60-410:61)
    , [,] (410:61-410:62)
    type_parameter [borderRadius: '6px'] (411:18-411:37)
      type_identifier [borderRadius] (411:18-411:30)
      constraint [: '6px'] (411:30-411:37)
        : [:] (411:30-411:31)
        literal_type ['6px'] (411:32-411:37)
          string ['6px'] (411:32-411:37)
            ' ['] (411:32-411:33)
            string_fragment [6px] (411:33-411:36)
            ' ['] (411:36-411:37)
    , [,] (411:37-411:38)
    type_parameter [padding: '8px'] (412:18-412:32)
      type_identifier [padding] (412:18-412:25)
      constraint [: '8px'] (412:25-412:32)
        : [:] (412:25-412:26)
        literal_type ['8px'] (412:27-412:32)
          string ['8px'] (412:27-412:32)
            ' ['] (412:27-412:28)
            string_fragment [8px] (412:28-412:31)
            ' ['] (412:31-412:32)
    , [,] (412:32-412:33)
    type_parameter [border: '1px solid #ccc'
                }}
                formatter={(value: number) => new Intl.NumberFormat().format(value)}] (413:18-415:84)
      type_identifier [border] (413:18-413:24)
      constraint [: '1px solid #ccc'] (413:24-413:42)
        : [:] (413:24-413:25)
        literal_type ['1px solid #ccc'] (413:26-413:42)
          string ['1px solid #ccc'] (413:26-413:42)
            ' ['] (413:26-413:27)
            string_fragment [1px solid #ccc] (413:27-413:41)
            ' ['] (413:41-413:42)
      ERROR [}}
                formatter] (414:16-415:25)
        } [}] (414:16-414:17)
        } [}] (414:17-414:18)
        identifier [formatter] (415:16-415:25)
      default_type [={(value: number) => new Intl.NumberFormat().format(value)}] (415:25-415:84)
        = [=] (415:25-415:26)
        object_type [{(value: number) => new Intl.NumberFormat().format(value)}] (415:26-415:84)
          { [{] (415:26-415:27)
          ERROR [(value: number) => new Intl.NumberFormat().] (415:27-415:70)
            formal_parameters [(value: number)] (415:27-415:42)
              ( [(] (415:27-415:28)
              required_parameter [value: number] (415:28-415:41)
                identifier [value] (415:28-415:33)
                type_annotation [: number] (415:33-415:41)
                  : [:] (415:33-415:34)
                  predefined_type [number] (415:35-415:41)
                    number [number] (415:35-415:41)
              ) [)] (415:41-415:42)
            => [=>] (415:43-415:45)
            new [new] (415:46-415:49)
            identifier [Intl] (415:50-415:54)
            . [.] (415:54-415:55)
            method_signature [NumberFormat()] (415:55-415:69)
              property_identifier [NumberFormat] (415:55-415:67)
              formal_parameters [()] (415:67-415:69)
                ( [(] (415:67-415:68)
                ) [)] (415:68-415:69)
            . [.] (415:69-415:70)
          method_signature [format(value)] (415:70-415:83)
            property_identifier [format] (415:70-415:76)
            formal_parameters [(value)] (415:76-415:83)
              ( [(] (415:76-415:77)
              required_parameter [value] (415:77-415:82)
                identifier [value] (415:77-415:82)
              ) [)] (415:82-415:83)
          } [}] (415:83-415:84)
    ERROR [/] (416:14-416:15)
      / [/] (416:14-416:15)
    > [>] (416:15-416:16)
  ERROR [<Legend 
                onMouseEnter={] (418:14-419:30)
    < [<] (418:14-418:15)
    identifier [Legend] (418:15-418:21)
    identifier [onMouseEnter] (419:16-419:28)
    = [=] (419:28-419:29)
    { [{] (419:29-419:30)
  formal_parameters [(e)] (419:30-419:33)
    ( [(] (419:30-419:31)
    required_parameter [e] (419:31-419:32)
      identifier [e] (419:31-419:32)
    ) [)] (419:32-419:33)
  => [=>] (419:34-419:36)
  ERROR [handleMouseEnter(e.dataKey)}] (419:37-419:65)
    call_expression [handleMouseEnter(e.dataKey)] (419:37-419:64)
      identifier [handleMouseEnter] (419:37-419:53)
      arguments [(e.dataKey)] (419:53-419:64)
        ( [(] (419:53-419:54)
        member_expression [e.dataKey] (419:54-419:63)
          identifier [e] (419:54-419:55)
          . [.] (419:55-419:56)
          property_identifier [dataKey] (419:56-419:63)
        ) [)] (419:63-419:64)
    } [}] (419:64-419:65)
  identifier [onMouseLeave] (420:16-420:28)
  = [=] (420:28-420:29)
  object_pattern [{handleMouseLeave}] (420:29-420:47)
    { [{] (420:29-420:30)
    shorthand_property_identifier_pattern [handleMouseLeave] (420:30-420:46)
    } [}] (420:46-420:47)
  ERROR [wrapperStyle] (421:16-421:28)
    identifier [wrapperStyle] (421:16-421:28)
  = [=] (421:28-421:29)
  { [{] (421:29-421:30)
  { [{] (421:30-421:31)
  property_identifier [paddingTop] (422:18-422:28)
  : [:] (422:28-422:29)
  string ['12px'] (422:30-422:36)
    ' ['] (422:30-422:31)
    string_fragment [12px] (422:31-422:35)
    ' ['] (422:35-422:36)
  ERROR [}}] (423:16-423:18)
    } [}] (423:16-423:17)
    } [}] (423:17-423:18)
  / [/] (424:14-424:15)
  ERROR [>] (424:15-424:16)
    > [>] (424:15-424:16)
  type_parameters [<Line 
                type="monotone" 
                dataKey="youtube" 
                name="YouTube"
                stroke="#F0B28A"
                strokeWidth={activePlatform === 'youtube' ? 3 : 1.5}
                dot={{ r: activePlatform === 'youtube' ? 5 : 3 }}
                opacity={!activePlatform || activePlatform === 'youtube' ? 1 : 0.3}
                animationBegin={0}
                animationDuration={600}
                animationEasing="ease-in-out"
              />] (426:14-437:16)
    < [<] (426:14-426:15)
    type_parameter [Line 
                type="monotone" 
                dataKey="youtube" 
                name="YouTube"
                stroke="#F0B28A"
                strokeWidth={activePlatform === 'youtube' ? 3 : 1.5}
                dot={{ r: activePlatform === 'youtube' ? 5 : 3 }}
                opacity={!activePlatform || activePlatform === 'youtube' ? 1 : 0.3}
                animationBegin={0}
                animationDuration={600}
                animationEasing="ease-in-out"] (426:15-436:45)
      type_identifier [Line] (426:15-426:19)
      ERROR [type="monotone" 
                dataKey="youtube" 
                name="YouTube"
                stroke="#F0B28A"
                strokeWidth={activePlatform === 'youtube' ? 3 : 1.5}
                dot={{ r] (427:16-432:24)
        identifier [type] (427:16-427:20)
        = [=] (427:20-427:21)
        ERROR ["monotone" 
                dataKey="youtube" 
                name="YouTube"
                stroke="#F0B28A"
                strokeWidth={activePlatform === 'youtube' ? 3 : 1.5}
                dot={{] (427:21-432:22)
          literal_type ["monotone"] (427:21-427:31)
            string ["monotone"] (427:21-427:31)
              " ["] (427:21-427:22)
              string_fragment [monotone] (427:22-427:30)
              " ["] (427:30-427:31)
          identifier [dataKey] (428:16-428:23)
          = [=] (428:23-428:24)
          literal_type ["youtube"] (428:24-428:33)
            string ["youtube"] (428:24-428:33)
              " ["] (428:24-428:25)
              string_fragment [youtube] (428:25-428:32)
              " ["] (428:32-428:33)
          identifier [name] (429:16-429:20)
          = [=] (429:20-429:21)
          literal_type ["YouTube"] (429:21-429:30)
            string ["YouTube"] (429:21-429:30)
              " ["] (429:21-429:22)
              string_fragment [YouTube] (429:22-429:29)
              " ["] (429:29-429:30)
          identifier [stroke] (430:16-430:22)
          = [=] (430:22-430:23)
          literal_type ["#F0B28A"] (430:23-430:32)
            string ["#F0B28A"] (430:23-430:32)
              " ["] (430:23-430:24)
              string_fragment [#F0B28A] (430:24-430:31)
              " ["] (430:31-430:32)
          type_identifier [strokeWidth] (431:16-431:27)
          = [=] (431:27-431:28)
          object_type [{activePlatform === 'youtube' ? 3 : 1.5}] (431:28-431:68)
            { [{] (431:28-431:29)
            ERROR [activePlatform === 'youtube' ?] (431:29-431:59)
              property_identifier [activePlatform] (431:29-431:43)
              = [=] (431:44-431:45)
              == [==] (431:45-431:47)
              property_signature ['youtube' ?] (431:48-431:59)
                string ['youtube'] (431:48-431:57)
                  ' ['] (431:48-431:49)
                  string_fragment [youtube] (431:49-431:56)
                  ' ['] (431:56-431:57)
                ? [?] (431:58-431:59)
            property_signature [3 : 1.5] (431:60-431:67)
              number [3] (431:60-431:61)
              type_annotation [: 1.5] (431:62-431:67)
                : [:] (431:62-431:63)
                literal_type [1.5] (431:64-431:67)
                  number [1.5] (431:64-431:67)
            } [}] (431:67-431:68)
          identifier [dot] (432:16-432:19)
          = [=] (432:19-432:20)
          { [{] (432:20-432:21)
          { [{] (432:21-432:22)
        type_identifier [r] (432:23-432:24)
      constraint [: activePlatform] (432:24-432:40)
        : [:] (432:24-432:25)
        type_identifier [activePlatform] (432:26-432:40)
      default_type [=== 'youtube' ? 5 : 3 }}
                opacity={!activePlatform || activePlatform === 'youtube' ? 1 : 0.3}
                animationBegin={0}
                animationDuration={600}
                animationEasing="ease-in-out"] (432:41-436:45)
        = [=] (432:41-432:42)
        ERROR [== 'youtube' ? 5 : 3 }}
                opacity={!activePlatform || activePlatform === 'youtube' ? 1 : 0.3}
                animationBegin={0}
                animationDuration={600}
                animationEasing=] (432:42-436:32)
          = [=] (432:42-432:43)
          = [=] (432:43-432:44)
          literal_type ['youtube'] (432:45-432:54)
            string ['youtube'] (432:45-432:54)
              ' ['] (432:45-432:46)
              string_fragment [youtube] (432:46-432:53)
              ' ['] (432:53-432:54)
          flow_maybe_type [? 5] (432:55-432:58)
            ? [?] (432:55-432:56)
            literal_type [5] (432:57-432:58)
              number [5] (432:57-432:58)
          : [:] (432:59-432:60)
          literal_type [3] (432:61-432:62)
            number [3] (432:61-432:62)
          } [}] (432:63-432:64)
          } [}] (432:64-432:65)
          type_identifier [opacity] (433:16-433:23)
          = [=] (433:23-433:24)
          { [{] (433:24-433:25)
          ERROR [!] (433:25-433:26)
            ! [!] (433:25-433:26)
          property_identifier [activePlatform] (433:26-433:40)
          union_type [|| activePlatform] (433:41-433:58)
            | [|] (433:41-433:42)
            union_type [| activePlatform] (433:42-433:58)
              | [|] (433:42-433:43)
              type_identifier [activePlatform] (433:44-433:58)
          = [=] (433:59-433:60)
          == [==] (433:60-433:62)
          literal_type ['youtube'] (433:63-433:72)
            string ['youtube'] (433:63-433:72)
              ' ['] (433:63-433:64)
              string_fragment [youtube] (433:64-433:71)
              ' ['] (433:71-433:72)
          flow_maybe_type [? 1] (433:73-433:76)
            ? [?] (433:73-433:74)
            literal_type [1] (433:75-433:76)
              number [1] (433:75-433:76)
          : [:] (433:77-433:78)
          literal_type [0.3] (433:79-433:82)
            number [0.3] (433:79-433:82)
          } [}] (433:82-433:83)
          type_identifier [animationBegin] (434:16-434:30)
          = [=] (434:30-434:31)
          object_type [{0}] (434:31-434:34)
            { [{] (434:31-434:32)
            property_signature [0] (434:32-434:33)
              number [0] (434:32-434:33)
            } [}] (434:33-434:34)
          type_identifier [animationDuration] (435:16-435:33)
          = [=] (435:33-435:34)
          object_type [{600}] (435:34-435:39)
            { [{] (435:34-435:35)
            property_signature [600] (435:35-435:38)
              number [600] (435:35-435:38)
            } [}] (435:38-435:39)
          type_identifier [animationEasing] (436:16-436:31)
          = [=] (436:31-436:32)
        literal_type ["ease-in-out"] (436:32-436:45)
          string ["ease-in-out"] (436:32-436:45)
            " ["] (436:32-436:33)
            string_fragment [ease-in-out] (436:33-436:44)
            " ["] (436:44-436:45)
    ERROR [/] (437:14-437:15)
      / [/] (437:14-437:15)
    > [>] (437:15-437:16)
  ERROR [{showCompetitor &&] (439:14-439:32)
    { [{] (439:14-439:15)
    identifier [showCompetitor] (439:15-439:29)
    && [&&] (439:30-439:32)
  ( [(] (439:33-439:34)
  ERROR [<Line 
                  type="monotone" 
                  dataKey="competitorYoutube" 
                  name="Competitor YouTube"
                  stroke="#FF0000"
                  strokeWidth={activePlatform === 'competitorYoutube' ? 3 : 1.5}
                  dot={{ r: activePlatform === 'competitorYoutube' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorYoutube' ? 1 : 0.3}
                  animationBegin={0}
                  animationDuration={600}
                  animationEasing="ease-in-out"
                />
              )}
              
              <Line 
                type="monotone" 
                dataKey="instagram" 
                name="Instagram"
                stroke="#8A8FF0"
                strokeWidth={activePlatform === 'instagram' ? 3 : 1.5}] (440:16-459:70)
    type_parameters [<Line 
                  type="monotone" 
                  dataKey="competitorYoutube" 
                  name="Competitor YouTube"
                  stroke="#FF0000"
                  strokeWidth={activePlatform === 'competitorYoutube' ? 3 : 1.5}
                  dot={{ r: activePlatform === 'competitorYoutube' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorYoutube' ? 1 : 0.3}
                  animationBegin={0}
                  animationDuration={600}
                  animationEasing="ease-in-out"
                />] (440:16-451:18)
      < [<] (440:16-440:17)
      type_parameter [Line 
                  type="monotone" 
                  dataKey="competitorYoutube" 
                  name="Competitor YouTube"
                  stroke="#FF0000"
                  strokeWidth={activePlatform === 'competitorYoutube' ? 3 : 1.5}
                  dot={{ r: activePlatform === 'competitorYoutube' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorYoutube' ? 1 : 0.3}
                  animationBegin={0}
                  animationDuration={600}
                  animationEasing="ease-in-out"] (440:17-450:47)
        type_identifier [Line] (440:17-440:21)
        ERROR [type="monotone" 
                  dataKey="competitorYoutube" 
                  name="Competitor YouTube"
                  stroke="#FF0000"
                  strokeWidth={activePlatform === 'competitorYoutube' ? 3 : 1.5}
                  dot={{ r] (441:18-446:26)
          identifier [type] (441:18-441:22)
          = [=] (441:22-441:23)
          ERROR ["monotone" 
                  dataKey="competitorYoutube" 
                  name="Competitor YouTube"
                  stroke="#FF0000"
                  strokeWidth={activePlatform === 'competitorYoutube' ? 3 : 1.5}
                  dot={{] (441:23-446:24)
            literal_type ["monotone"] (441:23-441:33)
              string ["monotone"] (441:23-441:33)
                " ["] (441:23-441:24)
                string_fragment [monotone] (441:24-441:32)
                " ["] (441:32-441:33)
            identifier [dataKey] (442:18-442:25)
            = [=] (442:25-442:26)
            literal_type ["competitorYoutube"] (442:26-442:45)
              string ["competitorYoutube"] (442:26-442:45)
                " ["] (442:26-442:27)
                string_fragment [competitorYoutube] (442:27-442:44)
                " ["] (442:44-442:45)
            identifier [name] (443:18-443:22)
            = [=] (443:22-443:23)
            literal_type ["Competitor YouTube"] (443:23-443:43)
              string ["Competitor YouTube"] (443:23-443:43)
                " ["] (443:23-443:24)
                string_fragment [Competitor YouTube] (443:24-443:42)
                " ["] (443:42-443:43)
            identifier [stroke] (444:18-444:24)
            = [=] (444:24-444:25)
            literal_type ["#FF0000"] (444:25-444:34)
              string ["#FF0000"] (444:25-444:34)
                " ["] (444:25-444:26)
                string_fragment [#FF0000] (444:26-444:33)
                " ["] (444:33-444:34)
            type_identifier [strokeWidth] (445:18-445:29)
            = [=] (445:29-445:30)
            object_type [{activePlatform === 'competitorYoutube' ? 3 : 1.5}] (445:30-445:80)
              { [{] (445:30-445:31)
              ERROR [activePlatform === 'competitorYoutube' ?] (445:31-445:71)
                property_identifier [activePlatform] (445:31-445:45)
                = [=] (445:46-445:47)
                == [==] (445:47-445:49)
                property_signature ['competitorYoutube' ?] (445:50-445:71)
                  string ['competitorYoutube'] (445:50-445:69)
                    ' ['] (445:50-445:51)
                    string_fragment [competitorYoutube] (445:51-445:68)
                    ' ['] (445:68-445:69)
                  ? [?] (445:70-445:71)
              property_signature [3 : 1.5] (445:72-445:79)
                number [3] (445:72-445:73)
                type_annotation [: 1.5] (445:74-445:79)
                  : [:] (445:74-445:75)
                  literal_type [1.5] (445:76-445:79)
                    number [1.5] (445:76-445:79)
              } [}] (445:79-445:80)
            identifier [dot] (446:18-446:21)
            = [=] (446:21-446:22)
            { [{] (446:22-446:23)
            { [{] (446:23-446:24)
          type_identifier [r] (446:25-446:26)
        constraint [: activePlatform] (446:26-446:42)
          : [:] (446:26-446:27)
          type_identifier [activePlatform] (446:28-446:42)
        default_type [=== 'competitorYoutube' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorYoutube' ? 1 : 0.3}
                  animationBegin={0}
                  animationDuration={600}
                  animationEasing="ease-in-out"] (446:43-450:47)
          = [=] (446:43-446:44)
          ERROR [== 'competitorYoutube' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorYoutube' ? 1 : 0.3}
                  animationBegin={0}
                  animationDuration={600}
                  animationEasing=] (446:44-450:34)
            = [=] (446:44-446:45)
            = [=] (446:45-446:46)
            literal_type ['competitorYoutube'] (446:47-446:66)
              string ['competitorYoutube'] (446:47-446:66)
                ' ['] (446:47-446:48)
                string_fragment [competitorYoutube] (446:48-446:65)
                ' ['] (446:65-446:66)
            flow_maybe_type [? 5] (446:67-446:70)
              ? [?] (446:67-446:68)
              literal_type [5] (446:69-446:70)
                number [5] (446:69-446:70)
            : [:] (446:71-446:72)
            literal_type [3] (446:73-446:74)
              number [3] (446:73-446:74)
            } [}] (446:75-446:76)
            } [}] (446:76-446:77)
            type_identifier [opacity] (447:18-447:25)
            = [=] (447:25-447:26)
            { [{] (447:26-447:27)
            ERROR [!] (447:27-447:28)
              ! [!] (447:27-447:28)
            property_identifier [activePlatform] (447:28-447:42)
            union_type [|| activePlatform] (447:43-447:60)
              | [|] (447:43-447:44)
              union_type [| activePlatform] (447:44-447:60)
                | [|] (447:44-447:45)
                type_identifier [activePlatform] (447:46-447:60)
            = [=] (447:61-447:62)
            == [==] (447:62-447:64)
            literal_type ['competitorYoutube'] (447:65-447:84)
              string ['competitorYoutube'] (447:65-447:84)
                ' ['] (447:65-447:66)
                string_fragment [competitorYoutube] (447:66-447:83)
                ' ['] (447:83-447:84)
            flow_maybe_type [? 1] (447:85-447:88)
              ? [?] (447:85-447:86)
              literal_type [1] (447:87-447:88)
                number [1] (447:87-447:88)
            : [:] (447:89-447:90)
            literal_type [0.3] (447:91-447:94)
              number [0.3] (447:91-447:94)
            } [}] (447:94-447:95)
            type_identifier [animationBegin] (448:18-448:32)
            = [=] (448:32-448:33)
            object_type [{0}] (448:33-448:36)
              { [{] (448:33-448:34)
              property_signature [0] (448:34-448:35)
                number [0] (448:34-448:35)
              } [}] (448:35-448:36)
            type_identifier [animationDuration] (449:18-449:35)
            = [=] (449:35-449:36)
            object_type [{600}] (449:36-449:41)
              { [{] (449:36-449:37)
              property_signature [600] (449:37-449:40)
                number [600] (449:37-449:40)
              } [}] (449:40-449:41)
            type_identifier [animationEasing] (450:18-450:33)
            = [=] (450:33-450:34)
          literal_type ["ease-in-out"] (450:34-450:47)
            string ["ease-in-out"] (450:34-450:47)
              " ["] (450:34-450:35)
              string_fragment [ease-in-out] (450:35-450:46)
              " ["] (450:46-450:47)
      ERROR [/] (451:16-451:17)
        / [/] (451:16-451:17)
      > [>] (451:17-451:18)
    ) [)] (452:14-452:15)
    } [}] (452:15-452:16)
    < [<] (454:14-454:15)
    identifier [Line] (454:15-454:19)
    type [type] (455:16-455:20)
    = [=] (455:20-455:21)
    " ["] (455:21-455:22)
    identifier [monotone] (455:22-455:30)
    " ["] (455:30-455:31)
    identifier [dataKey] (456:16-456:23)
    = [=] (456:23-456:24)
    " ["] (456:24-456:25)
    identifier [instagram] (456:25-456:34)
    " ["] (456:34-456:35)
    identifier [name] (457:16-457:20)
    = [=] (457:20-457:21)
    " ["] (457:21-457:22)
    identifier [Instagram] (457:22-457:31)
    " ["] (457:31-457:32)
    identifier [stroke] (458:16-458:22)
    = [=] (458:22-458:23)
    " ["] (458:23-458:24)
    ERROR [#] (458:24-458:25)
    number [8] (458:25-458:26)
    identifier [A8FF0] (458:26-458:31)
    " ["] (458:31-458:32)
    identifier [strokeWidth] (459:16-459:27)
    = [=] (459:27-459:28)
    { [{] (459:28-459:29)
    identifier [activePlatform] (459:29-459:43)
    === [===] (459:44-459:47)
    ' ['] (459:48-459:49)
    identifier [instagram] (459:49-459:58)
    ' ['] (459:58-459:59)
    ? [?] (459:60-459:61)
    number [3] (459:62-459:63)
    : [:] (459:64-459:65)
    number [1.5] (459:66-459:69)
    } [}] (459:69-459:70)
  identifier [dot] (460:16-460:19)
  = [=] (460:19-460:20)
  { [{] (460:20-460:21)
  { [{] (460:21-460:22)
  property_identifier [r] (460:23-460:24)
  : [:] (460:24-460:25)
  binary_expression [activePlatform === 'instagram'] (460:26-460:56)
    identifier [activePlatform] (460:26-460:40)
    === [===] (460:41-460:44)
    string ['instagram'] (460:45-460:56)
      ' ['] (460:45-460:46)
      string_fragment [instagram] (460:46-460:55)
      ' ['] (460:55-460:56)
  ? [?] (460:57-460:58)
  number [5] (460:59-460:60)
  : [:] (460:61-460:62)
  ERROR [3 }}] (460:63-460:67)
    number [3] (460:63-460:64)
    } [}] (460:65-460:66)
    } [}] (460:66-460:67)
  identifier [opacity] (461:16-461:23)
  = [=] (461:23-461:24)
  ERROR [{] (461:24-461:25)
    { [{] (461:24-461:25)
  binary_expression [!activePlatform || activePlatform === 'instagram'] (461:25-461:74)
    unary_expression [!activePlatform] (461:25-461:40)
      ! [!] (461:25-461:26)
      identifier [activePlatform] (461:26-461:40)
    || [||] (461:41-461:43)
    binary_expression [activePlatform === 'instagram'] (461:44-461:74)
      identifier [activePlatform] (461:44-461:58)
      === [===] (461:59-461:62)
      string ['instagram'] (461:63-461:74)
        ' ['] (461:63-461:64)
        string_fragment [instagram] (461:64-461:73)
        ' ['] (461:73-461:74)
  ? [?] (461:75-461:76)
  number [1] (461:77-461:78)
  : [:] (461:79-461:80)
  ERROR [0.3}] (461:81-461:85)
    number [0.3] (461:81-461:84)
    } [}] (461:84-461:85)
  identifier [animationBegin] (462:16-462:30)
  = [=] (462:30-462:31)
  { [{] (462:31-462:32)
  ERROR [200}] (462:32-462:36)
    number [200] (462:32-462:35)
    } [}] (462:35-462:36)
  identifier [animationDuration] (463:16-463:33)
  = [=] (463:33-463:34)
  { [{] (463:34-463:35)
  ERROR [600}] (463:35-463:39)
    number [600] (463:35-463:38)
    } [}] (463:38-463:39)
  identifier [animationEasing] (464:16-464:31)
  = [=] (464:31-464:32)
  binary_expression ["ease-in-out"
              />
              
              {showCompetitor] (464:32-467:29)
    string ["ease-in-out"] (464:32-464:45)
      " ["] (464:32-464:33)
      string_fragment [ease-in-out] (464:33-464:44)
      " ["] (464:44-464:45)
    / [/] (465:14-465:15)
    ERROR [>] (465:15-465:16)
      > [>] (465:15-465:16)
    object [{showCompetitor] (467:14-467:29)
      { [{] (467:14-467:15)
      shorthand_property_identifier [showCompetitor] (467:15-467:29)
      } [] (467:29-467:29)
  && [&&] (467:30-467:32)
  ( [(] (467:33-467:34)
  ERROR [<Line 
                  type="monotone" 
                  dataKey="competitorInstagram" 
                  name="Competitor Instagram"
                  stroke="#FF6666"
                  strokeWidth={activePlatform === 'competitorInstagram' ? 3 : 1.5}
                  dot={{ r: activePlatform === 'competitorInstagram' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorInstagram' ? 1 : 0.3}
                  animationBegin={200}
                  animationDuration={600}
                  animationEasing="ease-in-out"
                />
              )}
              
              <Line 
                type="monotone" 
                dataKey="reddit" 
                name="Reddit"
                stroke="#E98AF0"
                strokeWidth={activePlatform === 'reddit' ? 3 : 1.5}] (468:16-487:67)
    type_parameters [<Line 
                  type="monotone" 
                  dataKey="competitorInstagram" 
                  name="Competitor Instagram"
                  stroke="#FF6666"
                  strokeWidth={activePlatform === 'competitorInstagram' ? 3 : 1.5}
                  dot={{ r: activePlatform === 'competitorInstagram' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorInstagram' ? 1 : 0.3}
                  animationBegin={200}
                  animationDuration={600}
                  animationEasing="ease-in-out"
                />] (468:16-479:18)
      < [<] (468:16-468:17)
      type_parameter [Line 
                  type="monotone" 
                  dataKey="competitorInstagram" 
                  name="Competitor Instagram"
                  stroke="#FF6666"
                  strokeWidth={activePlatform === 'competitorInstagram' ? 3 : 1.5}
                  dot={{ r: activePlatform === 'competitorInstagram' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorInstagram' ? 1 : 0.3}
                  animationBegin={200}
                  animationDuration={600}
                  animationEasing="ease-in-out"] (468:17-478:47)
        type_identifier [Line] (468:17-468:21)
        ERROR [type="monotone" 
                  dataKey="competitorInstagram" 
                  name="Competitor Instagram"
                  stroke="#FF6666"
                  strokeWidth={activePlatform === 'competitorInstagram' ? 3 : 1.5}
                  dot={{ r] (469:18-474:26)
          identifier [type] (469:18-469:22)
          = [=] (469:22-469:23)
          ERROR ["monotone" 
                  dataKey="competitorInstagram" 
                  name="Competitor Instagram"
                  stroke="#FF6666"
                  strokeWidth={activePlatform === 'competitorInstagram' ? 3 : 1.5}
                  dot={{] (469:23-474:24)
            literal_type ["monotone"] (469:23-469:33)
              string ["monotone"] (469:23-469:33)
                " ["] (469:23-469:24)
                string_fragment [monotone] (469:24-469:32)
                " ["] (469:32-469:33)
            identifier [dataKey] (470:18-470:25)
            = [=] (470:25-470:26)
            literal_type ["competitorInstagram"] (470:26-470:47)
              string ["competitorInstagram"] (470:26-470:47)
                " ["] (470:26-470:27)
                string_fragment [competitorInstagram] (470:27-470:46)
                " ["] (470:46-470:47)
            identifier [name] (471:18-471:22)
            = [=] (471:22-471:23)
            literal_type ["Competitor Instagram"] (471:23-471:45)
              string ["Competitor Instagram"] (471:23-471:45)
                " ["] (471:23-471:24)
                string_fragment [Competitor Instagram] (471:24-471:44)
                " ["] (471:44-471:45)
            identifier [stroke] (472:18-472:24)
            = [=] (472:24-472:25)
            literal_type ["#FF6666"] (472:25-472:34)
              string ["#FF6666"] (472:25-472:34)
                " ["] (472:25-472:26)
                string_fragment [#FF6666] (472:26-472:33)
                " ["] (472:33-472:34)
            type_identifier [strokeWidth] (473:18-473:29)
            = [=] (473:29-473:30)
            object_type [{activePlatform === 'competitorInstagram' ? 3 : 1.5}] (473:30-473:82)
              { [{] (473:30-473:31)
              ERROR [activePlatform === 'competitorInstagram' ?] (473:31-473:73)
                property_identifier [activePlatform] (473:31-473:45)
                = [=] (473:46-473:47)
                == [==] (473:47-473:49)
                property_signature ['competitorInstagram' ?] (473:50-473:73)
                  string ['competitorInstagram'] (473:50-473:71)
                    ' ['] (473:50-473:51)
                    string_fragment [competitorInstagram] (473:51-473:70)
                    ' ['] (473:70-473:71)
                  ? [?] (473:72-473:73)
              property_signature [3 : 1.5] (473:74-473:81)
                number [3] (473:74-473:75)
                type_annotation [: 1.5] (473:76-473:81)
                  : [:] (473:76-473:77)
                  literal_type [1.5] (473:78-473:81)
                    number [1.5] (473:78-473:81)
              } [}] (473:81-473:82)
            identifier [dot] (474:18-474:21)
            = [=] (474:21-474:22)
            { [{] (474:22-474:23)
            { [{] (474:23-474:24)
          type_identifier [r] (474:25-474:26)
        constraint [: activePlatform] (474:26-474:42)
          : [:] (474:26-474:27)
          type_identifier [activePlatform] (474:28-474:42)
        default_type [=== 'competitorInstagram' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorInstagram' ? 1 : 0.3}
                  animationBegin={200}
                  animationDuration={600}
                  animationEasing="ease-in-out"] (474:43-478:47)
          = [=] (474:43-474:44)
          ERROR [== 'competitorInstagram' ? 5 : 3 }}
                  opacity={!activePlatform || activePlatform === 'competitorInstagram' ? 1 : 0.3}
                  animationBegin={200}
                  animationDuration={600}
                  animationEasing=] (474:44-478:34)
            = [=] (474:44-474:45)
            = [=] (474:45-474:46)
            literal_type ['competitorInstagram'] (474:47-474:68)
              string ['competitorInstagram'] (474:47-474:68)
                ' ['] (474:47-474:48)
                string_fragment [competitorInstagram] (474:48-474:67)
                ' ['] (474:67-474:68)
            flow_maybe_type [? 5] (474:69-474:72)
              ? [?] (474:69-474:70)
              literal_type [5] (474:71-474:72)
                number [5] (474:71-474:72)
            : [:] (474:73-474:74)
            literal_type [3] (474:75-474:76)
              number [3] (474:75-474:76)
            } [}] (474:77-474:78)
            } [}] (474:78-474:79)
            type_identifier [opacity] (475:18-475:25)
            = [=] (475:25-475:26)
            { [{] (475:26-475:27)
            ERROR [!] (475:27-475:28)
              ! [!] (475:27-475:28)
            property_identifier [activePlatform] (475:28-475:42)
            union_type [|| activePlatform] (475:43-475:60)
              | [|] (475:43-475:44)
              union_type [| activePlatform] (475:44-475:60)
                | [|] (475:44-475:45)
                type_identifier [activePlatform] (475:46-475:60)
            = [=] (475:61-475:62)
            == [==] (475:62-475:64)
            literal_type ['competitorInstagram'] (475:65-475:86)
              string ['competitorInstagram'] (475:65-475:86)
                ' ['] (475:65-475:66)
                string_fragment [competitorInstagram] (475:66-475:85)
                ' ['] (475:85-475:86)
            flow_maybe_type [? 1] (475:87-475:90)
              ? [?] (475:87-475:88)
              literal_type [1] (475:89-475:90)
                number [1] (475:89-475:90)
            : [:] (475:91-475:92)
            literal_type [0.3] (475:93-475:96)
              number [0.3] (475:93-475:96)
            } [}] (475:96-475:97)
            type_identifier [animationBegin] (476:18-476:32)
            = [=] (476:32-476:33)
            object_type [{200}] (476:33-476:38)
              { [{] (476:33-476:34)
              property_signature [200] (476:34-476:37)
                number [200] (476:34-476:37)
              } [}] (476:37-476:38)
            type_identifier [animationDuration] (477:18-477:35)
            = [=] (477:35-477:36)
            object_type [{600}] (477:36-477:41)
              { [{] (477:36-477:37)
              property_signature [600] (477:37-477:40)
                number [600] (477:37-477:40)
              } [}] (477:40-477:41)
            type_identifier [animationEasing] (478:18-478:33)
            = [=] (478:33-478:34)
          literal_type ["ease-in-out"] (478:34-478:47)
            string ["ease-in-out"] (478:34-478:47)
              " ["] (478:34-478:35)
              string_fragment [ease-in-out] (478:35-478:46)
              " ["] (478:46-478:47)
      ERROR [/] (479:16-479:17)
        / [/] (479:16-479:17)
      > [>] (479:17-479:18)
    ) [)] (480:14-480:15)
    } [}] (480:15-480:16)
    < [<] (482:14-482:15)
    identifier [Line] (482:15-482:19)
    type [type] (483:16-483:20)
    = [=] (483:20-483:21)
    " ["] (483:21-483:22)
    identifier [monotone] (483:22-483:30)
    " ["] (483:30-483:31)
    identifier [dataKey] (484:16-484:23)
    = [=] (484:23-484:24)
    " ["] (484:24-484:25)
    identifier [reddit] (484:25-484:31)
    " ["] (484:31-484:32)
    identifier [name] (485:16-485:20)
    = [=] (485:20-485:21)
    " ["] (485:21-485:22)
    identifier [Reddit] (485:22-485:28)
    " ["] (485:28-485:29)
    identifier [stroke] (486:16-486:22)
    = [=] (486:22-486:23)
    " ["] (486:23-486:24)
    private_property_identifier [#E98AF0] (486:24-486:31)
    " ["] (486:31-486:32)
    identifier [strokeWidth] (487:16-487:27)
    = [=] (487:27-487:28)
    { [{] (487:28-487:29)
    identifier [activePlatform] (487:29-487:43)
    === [===] (487:44-487:47)
    ' ['] (487:48-487:49)
    identifier [reddit] (487:49-487:55)
    ' ['] (487:55-487:56)
    ? [?] (487:57-487:58)
    number [3] (487:59-487:60)
    : [:] (487:61-487:62)
    number [1.5] (487:63-487:66)
    } [}] (487:66-487:67)
  identifier [dot] (488:16-488:19)
  = [=] (488:19-488:20)
  { [{] (488:20-488:21)
  { [{] (488:21-488:22)
  property_identifier [r] (488:23-488:24)
  : [:] (488:24-488:25)
  binary_expression [activePlatform === 'reddit'] (488:26-488:53)
    identifier [activePlatform] (488:26-488:40)
    === [===] (488:41-488:44)
    string ['reddit'] (488:45-488:53)
      ' ['] (488:45-488:46)
      string_fragment [reddit] (488:46-488:52)
      ' ['] (488:52-488:53)
  ? [?] (488:54-488:55)
  number [5] (488:56-488:57)
  : [:] (488:58-488:59)
  ERROR [3 }}] (488:60-488:64)
    number [3] (488:60-488:61)
    } [}] (488:62-488:63)
    } [}] (488:63-488:64)
  identifier [opacity] (489:16-489:23)
  = [=] (489:23-489:24)
  ERROR [{] (489:24-489:25)
    { [{] (489:24-489:25)
  binary_expression [!activePlatform || activePlatform === 'reddit'] (489:25-489:71)
    unary_expression [!activePlatform] (489:25-489:40)
      ! [!] (489:25-489:26)
      identifier [activePlatform] (489:26-489:40)
    || [||] (489:41-489:43)
    binary_expression [activePlatform === 'reddit'] (489:44-489:71)
      identifier [activePlatform] (489:44-489:58)
      === [===] (489:59-489:62)
      string ['reddit'] (489:63-489:71)
        ' ['] (489:63-489:64)
        string_fragment [reddit] (489:64-489:70)
        ' ['] (489:70-489:71)
  ? [?] (489:72-489:73)
  number [1] (489:74-489:75)
  : [:] (489:76-489:77)
  ERROR [0.3}] (489:78-489:82)
    number [0.3] (489:78-489:81)
    } [}] (489:81-489:82)
  identifier [animationBegin] (490:16-490:30)
  = [=] (490:30-490:31)
  { [{] (490:31-490:32)
  ERROR [400}] (490:32-490:36)
    number [400] (490:32-490:35)
    } [}] (490:35-490:36)
  identifier [animationDuration] (491:16-491:33)
  = [=] (491:33-491:34)
  { [{] (491:34-491:35)
  ERROR [600}] (491:35-491:39)
    number [600] (491:35-491:38)
    } [}] (491:38-491:39)
  identifier [animationEasing] (492:16-492:31)
  = [=] (492:31-492:32)
  non_null_expression ["ease-in-out"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      );
    };

import { BarChart, Bar } from 'recharts';

interface FunnelData {
  stage: string;
  value: number;
  competitorValue?: number;
}

interface ROIData {
  month: string;
  cost: number;
  revenue: number;
  profit: number;
  competitorCost?: number;
  competitorRevenue?: number;
  competitorProfit?: number;
}

interface ComponentProps {
  showCompetitor?: boolean;
}

export const CTAFunnel: React.FC<ComponentProps>] (492:32-522:48)
    instantiation_expression ["ease-in-out"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      );
    };

import { BarChart, Bar } from 'recharts';

interface FunnelData {
  stage: string;
  value: number;
  competitorValue?: number;
}

interface ROIData {
  month: string;
  cost: number;
  revenue: number;
  profit: number;
  competitorCost?: number;
  competitorRevenue?: number;
  competitorProfit?: number;
}

interface ComponentProps {
  showCompetitor?: boolean;
}

export const CTAFunnel: React.FC<ComponentProps>] (492:32-522:48)
      member_expression ["ease-in-out"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      );
    };

import { BarChart, Bar } from 'recharts';

interface FunnelData {
  stage: string;
  value: number;
  competitorValue?: number;
}

interface ROIData {
  month: string;
  cost: number;
  revenue: number;
  profit: number;
  competitorCost?: number;
  competitorRevenue?: number;
  competitorProfit?: number;
}

interface ComponentProps {
  showCompetitor?: boolean;
}

export const CTAFunnel: React.FC] (492:32-522:32)
        binary_expression ["ease-in-out"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      );
    };

import { BarChart, Bar } from 'recharts';

interface FunnelData {
  stage: string;
  value: number;
  competitorValue?: number;
}

interface ROIData {
  month: string;
  cost: number;
  revenue: number;
  profit: number;
  competitorCost?: number;
  competitorRevenue?: number;
  competitorProfit?: number;
}

interface ComponentProps {
  showCompetitor?: boolean;
}

export const CTAFunnel] (492:32-522:22)
          string ["ease-in-out"] (492:32-492:45)
            " ["] (492:32-492:33)
            string_fragment [ease-in-out] (492:33-492:44)
            " ["] (492:44-492:45)
          / [/] (493:14-493:15)
          ERROR [>] (493:15-493:16)
            > [>] (493:15-493:16)
          type_assertion [</LineChart>
          </ResponsiveContainer>
        </div>
      );
    };

import { BarChart, Bar } from 'recharts';

interface FunnelData {
  stage: string;
  value: number;
  competitorValue?: number;
}

interface ROIData {
  month: string;
  cost: number;
  revenue: number;
  profit: number;
  competitorCost?: number;
  competitorRevenue?: number;
  competitorProfit?: number;
}

interface ComponentProps {
  showCompetitor?: boolean;
}

export const CTAFunnel] (494:12-522:22)
            type_arguments [</LineChart>] (494:12-494:24)
              < [<] (494:12-494:13)
              ERROR [/] (494:13-494:14)
                / [/] (494:13-494:14)
              type_identifier [LineChart] (494:14-494:23)
              > [>] (494:23-494:24)
            type_assertion [</ResponsiveContainer>
        </div>
      );
    };

import { BarChart, Bar } from 'recharts';

interface FunnelData {
  stage: string;
  value: number;
  competitorValue?: number;
}

interface ROIData {
  month: string;
  cost: number;
  revenue: number;
  profit: number;
  competitorCost?: number;
  competitorRevenue?: number;
  competitorProfit?: number;
}

interface ComponentProps {
  showCompetitor?: boolean;
}

export const CTAFunnel] (495:10-522:22)
              type_arguments [</ResponsiveContainer>] (495:10-495:32)
                < [<] (495:10-495:11)
                ERROR [/] (495:11-495:12)
                  / [/] (495:11-495:12)
                type_identifier [ResponsiveContainer] (495:12-495:31)
                > [>] (495:31-495:32)
              ERROR [</div>
      );
    };

import { BarChart, Bar } from 'recharts';

interface FunnelData {
  stage: string;
  value: number;
  competitorValue?: number;
}

interface ROIData {
  month: string;
  cost: number;
  revenue: number;
  profit: number;
  competitorCost?: number;
  competitorRevenue?: number;
  competitorProfit?: number;
}

interface ComponentProps {
  showCompetitor?: boolean;
}

export const] (496:8-522:12)
                type_parameters [</div>] (496:8-496:14)
                  < [<] (496:8-496:9)
                  ERROR [/] (496:9-496:10)
                    / [/] (496:9-496:10)
                  type_parameter [div] (496:10-496:13)
                    type_identifier [div] (496:10-496:13)
                  > [>] (496:13-496:14)
                ) [)] (497:6-497:7)
                ; [;] (497:7-497:8)
                } [}] (498:4-498:5)
                ; [;] (498:5-498:6)
                import [import] (500:0-500:6)
                  import [import] (500:0-500:6)
                object_pattern [{ BarChart, Bar }] (500:7-500:24)
                  { [{] (500:7-500:8)
                  shorthand_property_identifier_pattern [BarChart] (500:9-500:17)
                  , [,] (500:17-500:18)
                  shorthand_property_identifier_pattern [Bar] (500:19-500:22)
                  } [}] (500:23-500:24)
                identifier [from] (500:25-500:29)
                string ['recharts'] (500:30-500:40)
                  ' ['] (500:30-500:31)
                  string_fragment [recharts] (500:31-500:39)
                  ' ['] (500:39-500:40)
                ; [;] (500:40-500:41)
                interface [interface] (502:0-502:9)
                identifier [FunnelData] (502:10-502:20)
                object [{
  stage: string;
  value: number;
  competitorValue?: number;
}] (502:21-506:1)
                  { [{] (502:21-502:22)
                  pair [stage: string;
  value: number;
  competitorValue?: number] (503:2-505:26)
                    property_identifier [stage] (503:2-503:7)
                    : [:] (503:7-503:8)
                    ERROR [string;
  value: number;
  competitorValue?:] (503:9-505:19)
                      string [string] (503:9-503:15)
                      ; [;] (503:15-503:16)
                      identifier [value] (504:2-504:7)
                      : [:] (504:7-504:8)
                      number [number] (504:9-504:15)
                      ; [;] (504:15-504:16)
                      identifier [competitorValue] (505:2-505:17)
                      ? [?] (505:17-505:18)
                      : [:] (505:18-505:19)
                    identifier [number] (505:20-505:26)
                  ERROR [;] (505:26-505:27)
                    ; [;] (505:26-505:27)
                  } [}] (506:0-506:1)
                identifier [interface] (508:0-508:9)
                identifier [ROIData] (508:10-508:17)
                object [{
  month: string;
  cost: number;
  revenue: number;
  profit: number;
  competitorCost?: number;
  competitorRevenue?: number;
  competitorProfit?: number;
}] (508:18-516:1)
                  { [{] (508:18-508:19)
                  pair [month: string;
  cost: number;
  revenue: number;
  profit: number;
  competitorCost?: number;
  competitorRevenue?: number;
  competitorProfit?: number] (509:2-515:27)
                    property_identifier [month] (509:2-509:7)
                    : [:] (509:7-509:8)
                    ERROR [string;
  cost: number;
  revenue: number;
  profit: number;
  competitorCost?: number;
  competitorRevenue?: number;
  competitorProfit?:] (509:9-515:20)
                      string [string] (509:9-509:15)
                      ; [;] (509:15-509:16)
                      identifier [cost] (510:2-510:6)
                      : [:] (510:6-510:7)
                      number [number] (510:8-510:14)
                      ; [;] (510:14-510:15)
                      identifier [revenue] (511:2-511:9)
                      : [:] (511:9-511:10)
                      number [number] (511:11-511:17)
                      ; [;] (511:17-511:18)
                      identifier [profit] (512:2-512:8)
                      : [:] (512:8-512:9)
                      number [number] (512:10-512:16)
                      ; [;] (512:16-512:17)
                      identifier [competitorCost] (513:2-513:16)
                      ? [?] (513:16-513:17)
                      : [:] (513:17-513:18)
                      number [number] (513:19-513:25)
                      ; [;] (513:25-513:26)
                      identifier [competitorRevenue] (514:2-514:19)
                      ? [?] (514:19-514:20)
                      : [:] (514:20-514:21)
                      number [number] (514:22-514:28)
                      ; [;] (514:28-514:29)
                      identifier [competitorProfit] (515:2-515:18)
                      ? [?] (515:18-515:19)
                      : [:] (515:19-515:20)
                    identifier [number] (515:21-515:27)
                  ERROR [;] (515:27-515:28)
                    ; [;] (515:27-515:28)
                  } [}] (516:0-516:1)
                identifier [interface] (518:0-518:9)
                identifier [ComponentProps] (518:10-518:24)
                object [{
  showCompetitor?: boolean;
}] (518:25-520:1)
                  { [{] (518:25-518:26)
                  pair [showCompetitor?: boolean] (519:2-519:26)
                    property_identifier [showCompetitor] (519:2-519:16)
                    ERROR [?] (519:16-519:17)
                      ? [?] (519:16-519:17)
                    : [:] (519:17-519:18)
                    identifier [boolean] (519:19-519:26)
                  ERROR [;] (519:26-519:27)
                    ; [;] (519:26-519:27)
                  } [}] (520:0-520:1)
                identifier [export] (522:0-522:6)
                const [const] (522:7-522:12)
              identifier [CTAFunnel] (522:13-522:22)
        ERROR [: React] (522:22-522:29)
          : [:] (522:22-522:23)
          identifier [React] (522:24-522:29)
        . [.] (522:29-522:30)
        property_identifier [FC] (522:30-522:32)
      type_arguments [<ComponentProps>] (522:32-522:48)
        < [<] (522:32-522:33)
        type_identifier [ComponentProps] (522:33-522:47)
        > [>] (522:47-522:48)
    ! [] (522:48-522:48)
  = [=] (522:49-522:50)
  formal_parameters [({ showCompetitor = false })] (522:51-522:79)
    ( [(] (522:51-522:52)
    required_parameter [{ showCompetitor = false }] (522:52-522:78)
      object_pattern [{ showCompetitor = false }] (522:52-522:78)
        { [{] (522:52-522:53)
        object_assignment_pattern [showCompetitor = false] (522:54-522:76)
          shorthand_property_identifier_pattern [showCompetitor] (522:54-522:68)
          = [=] (522:69-522:70)
          false [false] (522:71-522:76)
        } [}] (522:77-522:78)
    ) [)] (522:78-522:79)
  => [=>] (522:80-522:82)
  { [{] (522:83-522:84)
  lexical_declaration [const [activeBar, setActiveBar] = useState<number | null>(null);] (523:2-523:66)
    const [const] (523:2-523:7)
    variable_declarator [[activeBar, setActiveBar] = useState<number | null>(null)] (523:8-523:65)
      array_pattern [[activeBar, setActiveBar]] (523:8-523:33)
        [ [[] (523:8-523:9)
        identifier [activeBar] (523:9-523:18)
        , [,] (523:18-523:19)
        identifier [setActiveBar] (523:20-523:32)
        ] []] (523:32-523:33)
      = [=] (523:34-523:35)
      call_expression [useState<number | null>(null)] (523:36-523:65)
        identifier [useState] (523:36-523:44)
        type_arguments [<number | null>] (523:44-523:59)
          < [<] (523:44-523:45)
          union_type [number | null] (523:45-523:58)
            predefined_type [number] (523:45-523:51)
              number [number] (523:45-523:51)
            | [|] (523:52-523:53)
            literal_type [null] (523:54-523:58)
              null [null] (523:54-523:58)
          > [>] (523:58-523:59)
        arguments [(null)] (523:59-523:65)
          ( [(] (523:59-523:60)
          null [null] (523:60-523:64)
          ) [)] (523:64-523:65)
    ; [;] (523:65-523:66)
  lexical_declaration [const [data, setData] = useState<FunnelData[]>([]);] (524:2-524:53)
    const [const] (524:2-524:7)
    variable_declarator [[data, setData] = useState<FunnelData[]>([])] (524:8-524:52)
      array_pattern [[data, setData]] (524:8-524:23)
        [ [[] (524:8-524:9)
        identifier [data] (524:9-524:13)
        , [,] (524:13-524:14)
        identifier [setData] (524:15-524:22)
        ] []] (524:22-524:23)
      = [=] (524:24-524:25)
      call_expression [useState<FunnelData[]>([])] (524:26-524:52)
        identifier [useState] (524:26-524:34)
        type_arguments [<FunnelData[]>] (524:34-524:48)
          < [<] (524:34-524:35)
          array_type [FunnelData[]] (524:35-524:47)
            type_identifier [FunnelData] (524:35-524:45)
            [ [[] (524:45-524:46)
            ] []] (524:46-524:47)
          > [>] (524:47-524:48)
        arguments [([])] (524:48-524:52)
          ( [(] (524:48-524:49)
          array [[]] (524:49-524:51)
            [ [[] (524:49-524:50)
            ] []] (524:50-524:51)
          ) [)] (524:51-524:52)
    ; [;] (524:52-524:53)
  expression_statement [useEffect(() => {
    setData(generateFunnelData());
  }, []);] (526:2-528:9)
    call_expression [useEffect(() => {
    setData(generateFunnelData());
  }, [])] (526:2-528:8)
      identifier [useEffect] (526:2-526:11)
      arguments [(() => {
    setData(generateFunnelData());
  }, [])] (526:11-528:8)
        ( [(] (526:11-526:12)
        arrow_function [() => {
    setData(generateFunnelData());
  }] (526:12-528:3)
          formal_parameters [()] (526:12-526:14)
            ( [(] (526:12-526:13)
            ) [)] (526:13-526:14)
          => [=>] (526:15-526:17)
          statement_block [{
    setData(generateFunnelData());
  }] (526:18-528:3)
            { [{] (526:18-526:19)
            expression_statement [setData(generateFunnelData());] (527:4-527:34)
              call_expression [setData(generateFunnelData())] (527:4-527:33)
                identifier [setData] (527:4-527:11)
                arguments [(generateFunnelData())] (527:11-527:33)
                  ( [(] (527:11-527:12)
                  call_expression [generateFunnelData()] (527:12-527:32)
                    identifier [generateFunnelData] (527:12-527:30)
                    arguments [()] (527:30-527:32)
                      ( [(] (527:30-527:31)
                      ) [)] (527:31-527:32)
                  ) [)] (527:32-527:33)
              ; [;] (527:33-527:34)
            } [}] (528:2-528:3)
        , [,] (528:3-528:4)
        array [[]] (528:5-528:7)
          [ [[] (528:5-528:6)
          ] []] (528:6-528:7)
        ) [)] (528:7-528:8)
    ; [;] (528:8-528:9)
  return [return] (530:2-530:8)
  ( [(] (530:9-530:10)
  type_arguments [<div] (531:4-531:8)
    < [<] (531:4-531:5)
    type_identifier [div] (531:5-531:8)
    > [] (531:8-531:8)
  identifier [className] (531:9-531:18)
  = [=] (531:18-531:19)
  string ["h-96 w-full"] (531:19-531:32)
    " ["] (531:19-531:20)
    string_fragment [h-96 w-full] (531:20-531:31)
    " ["] (531:31-531:32)
  > [>] (531:32-531:33)
  ERROR [<ResponsiveContainer width="100%" height="100%">
        <BarChart
          data={data}
          layout="vertical"
          margin={{ top: 20, right: 30, left: 100, bottom: 5 }}
        >] (532:6-537:9)
    type_parameters [<ResponsiveContainer width="100%" height="100%">] (532:6-532:54)
      < [<] (532:6-532:7)
      type_parameter [ResponsiveContainer width="100%" height="100%"] (532:7-532:53)
        type_identifier [ResponsiveContainer] (532:7-532:26)
        ERROR [width] (532:27-532:32)
          identifier [width] (532:27-532:32)
        default_type [="100%" height="100%"] (532:32-532:53)
          = [=] (532:32-532:33)
          ERROR ["100%" height=] (532:33-532:47)
            literal_type ["100%"] (532:33-532:39)
              string ["100%"] (532:33-532:39)
                " ["] (532:33-532:34)
                string_fragment [100%] (532:34-532:38)
                " ["] (532:38-532:39)
            identifier [height] (532:40-532:46)
            = [=] (532:46-532:47)
          literal_type ["100%"] (532:47-532:53)
            string ["100%"] (532:47-532:53)
              " ["] (532:47-532:48)
              string_fragment [100%] (532:48-532:52)
              " ["] (532:52-532:53)
      > [>] (532:53-532:54)
    type_parameters [<BarChart
          data={data}
          layout="vertical"
          margin={{ top: 20, right: 30, left: 100, bottom: 5 }}
        >] (533:8-537:9)
      < [<] (533:8-533:9)
      type_parameter [BarChart
          data={data}
          layout="vertical"
          margin={{ top: 20] (533:9-536:27)
        type_identifier [BarChart] (533:9-533:17)
        ERROR [data] (534:10-534:14)
          identifier [data] (534:10-534:14)
        default_type [={data}
          layout="vertical"
          margin={{ top: 20] (534:14-536:27)
          = [=] (534:14-534:15)
          ERROR [{data}
          layout="vertical"
          margin={{ top:] (534:15-536:24)
            object_type [{data}] (534:15-534:21)
              { [{] (534:15-534:16)
              property_signature [data] (534:16-534:20)
                property_identifier [data] (534:16-534:20)
              } [}] (534:20-534:21)
            identifier [layout] (535:10-535:16)
            = [=] (535:16-535:17)
            literal_type ["vertical"] (535:17-535:27)
              string ["vertical"] (535:17-535:27)
                " ["] (535:17-535:18)
                string_fragment [vertical] (535:18-535:26)
                " ["] (535:26-535:27)
            identifier [margin] (536:10-536:16)
            = [=] (536:16-536:17)
            { [{] (536:17-536:18)
            { [{] (536:18-536:19)
            type_identifier [top] (536:20-536:23)
            : [:] (536:23-536:24)
          literal_type [20] (536:25-536:27)
            number [20] (536:25-536:27)
      , [,] (536:27-536:28)
      type_parameter [right: 30] (536:29-536:38)
        type_identifier [right] (536:29-536:34)
        constraint [: 30] (536:34-536:38)
          : [:] (536:34-536:35)
          literal_type [30] (536:36-536:38)
            number [30] (536:36-536:38)
      , [,] (536:38-536:39)
      type_parameter [left: 100] (536:40-536:49)
        type_identifier [left] (536:40-536:44)
        constraint [: 100] (536:44-536:49)
          : [:] (536:44-536:45)
          literal_type [100] (536:46-536:49)
            number [100] (536:46-536:49)
      , [,] (536:49-536:50)
      type_parameter [bottom: 5] (536:51-536:60)
        type_identifier [bottom] (536:51-536:57)
        constraint [: 5] (536:57-536:60)
          : [:] (536:57-536:58)
          literal_type [5] (536:59-536:60)
            number [5] (536:59-536:60)
      ERROR [}}] (536:61-536:63)
        } [}] (536:61-536:62)
        } [}] (536:62-536:63)
      > [>] (537:8-537:9)
  type_arguments [<defs>] (538:10-538:16)
    < [<] (538:10-538:11)
    type_identifier [defs] (538:11-538:15)
    > [>] (538:15-538:16)
  ERROR [<linearGradient id="funnelGradient" x1="0" y1="0" x2="1" y2="0">
              <stop offset="0%" stopColor="#F0B28A" stopOpacity={0.9} />
              <stop offset="100%" stopColor="#F0D28A" stopOpacity={0.9}] (539:12-541:71)
    type_parameters [<linearGradient id="funnelGradient" x1="0" y1="0" x2="1" y2="0">] (539:12-539:76)
      < [<] (539:12-539:13)
      type_parameter [linearGradient id="funnelGradient" x1="0" y1="0" x2="1" y2="0"] (539:13-539:75)
        type_identifier [linearGradient] (539:13-539:27)
        ERROR [id] (539:28-539:30)
          identifier [id] (539:28-539:30)
        default_type [="funnelGradient" x1="0" y1="0" x2="1" y2="0"] (539:30-539:75)
          = [=] (539:30-539:31)
          ERROR ["funnelGradient" x1="0" y1="0" x2="1" y2=] (539:31-539:72)
            literal_type ["funnelGradient"] (539:31-539:47)
              string ["funnelGradient"] (539:31-539:47)
                " ["] (539:31-539:32)
                string_fragment [funnelGradient] (539:32-539:46)
                " ["] (539:46-539:47)
            identifier [x1] (539:48-539:50)
            = [=] (539:50-539:51)
            literal_type ["0"] (539:51-539:54)
              string ["0"] (539:51-539:54)
                " ["] (539:51-539:52)
                string_fragment [0] (539:52-539:53)
                " ["] (539:53-539:54)
            identifier [y1] (539:55-539:57)
            = [=] (539:57-539:58)
            literal_type ["0"] (539:58-539:61)
              string ["0"] (539:58-539:61)
                " ["] (539:58-539:59)
                string_fragment [0] (539:59-539:60)
                " ["] (539:60-539:61)
            identifier [x2] (539:62-539:64)
            = [=] (539:64-539:65)
            literal_type ["1"] (539:65-539:68)
              string ["1"] (539:65-539:68)
                " ["] (539:65-539:66)
                string_fragment [1] (539:66-539:67)
                " ["] (539:67-539:68)
            identifier [y2] (539:69-539:71)
            = [=] (539:71-539:72)
          literal_type ["0"] (539:72-539:75)
            string ["0"] (539:72-539:75)
              " ["] (539:72-539:73)
              string_fragment [0] (539:73-539:74)
              " ["] (539:74-539:75)
      > [>] (539:75-539:76)
    < [<] (540:14-540:15)
    ERROR [stop] (540:15-540:19)
      identifier [stop] (540:15-540:19)
    type_parameter [offset="0%" stopColor="#F0B28A" stopOpacity={0.9}] (540:20-540:69)
      type_identifier [offset] (540:20-540:26)
      default_type [="0%" stopColor="#F0B28A" stopOpacity={0.9}] (540:26-540:69)
        = [=] (540:26-540:27)
        ERROR ["0%" stopColor="#F0B28A" stopOpacity=] (540:27-540:64)
          literal_type ["0%"] (540:27-540:31)
            string ["0%"] (540:27-540:31)
              " ["] (540:27-540:28)
              string_fragment [0%] (540:28-540:30)
              " ["] (540:30-540:31)
          identifier [stopColor] (540:32-540:41)
          = [=] (540:41-540:42)
          literal_type ["#F0B28A"] (540:42-540:51)
            string ["#F0B28A"] (540:42-540:51)
              " ["] (540:42-540:43)
              string_fragment [#F0B28A] (540:43-540:50)
              " ["] (540:50-540:51)
          type_identifier [stopOpacity] (540:52-540:63)
          = [=] (540:63-540:64)
        object_type [{0.9}] (540:64-540:69)
          { [{] (540:64-540:65)
          property_signature [0.9] (540:65-540:68)
            number [0.9] (540:65-540:68)
          } [}] (540:68-540:69)
    / [/] (540:70-540:71)
    regex_pattern [>] (540:71-540:72)
    < [<] (541:14-541:15)
    ERROR [stop] (541:15-541:19)
      identifier [stop] (541:15-541:19)
    type_parameter [offset="100%" stopColor="#F0D28A" stopOpacity={0.9}] (541:20-541:71)
      type_identifier [offset] (541:20-541:26)
      default_type [="100%" stopColor="#F0D28A" stopOpacity={0.9}] (541:26-541:71)
        = [=] (541:26-541:27)
        ERROR ["100%" stopColor="#F0D28A" stopOpacity=] (541:27-541:66)
          literal_type ["100%"] (541:27-541:33)
            string ["100%"] (541:27-541:33)
              " ["] (541:27-541:28)
              string_fragment [100%] (541:28-541:32)
              " ["] (541:32-541:33)
          identifier [stopColor] (541:34-541:43)
          = [=] (541:43-541:44)
          literal_type ["#F0D28A"] (541:44-541:53)
            string ["#F0D28A"] (541:44-541:53)
              " ["] (541:44-541:45)
              string_fragment [#F0D28A] (541:45-541:52)
              " ["] (541:52-541:53)
          type_identifier [stopOpacity] (541:54-541:65)
          = [=] (541:65-541:66)
        object_type [{0.9}] (541:66-541:71)
          { [{] (541:66-541:67)
          property_signature [0.9] (541:67-541:70)
            number [0.9] (541:67-541:70)
          } [}] (541:70-541:71)
  regex [/>] (541:72-541:74)
    / [/] (541:72-541:73)
    regex_pattern [>] (541:73-541:74)
    / [] (541:74-541:74)
  < [<] (542:12-542:13)
  regex [/linearGradient>] (542:13-542:29)
    / [/] (542:13-542:14)
    regex_pattern [linearGradient>] (542:14-542:29)
    / [] (542:29-542:29)
  < [<] (543:12-543:13)
  identifier [linearGradient] (543:13-543:27)
  ERROR [id="competitorGradient" x1="0" y1="0" x2="1" y2] (543:28-543:75)
    identifier [id] (543:28-543:30)
    = [=] (543:30-543:31)
    string ["competitorGradient"] (543:31-543:51)
      " ["] (543:31-543:32)
      string_fragment [competitorGradient] (543:32-543:50)
      " ["] (543:50-543:51)
    identifier [x1] (543:52-543:54)
    = [=] (543:54-543:55)
    string ["0"] (543:55-543:58)
      " ["] (543:55-543:56)
      string_fragment [0] (543:56-543:57)
      " ["] (543:57-543:58)
    identifier [y1] (543:59-543:61)
    = [=] (543:61-543:62)
    string ["0"] (543:62-543:65)
      " ["] (543:62-543:63)
      string_fragment [0] (543:63-543:64)
      " ["] (543:64-543:65)
    identifier [x2] (543:66-543:68)
    = [=] (543:68-543:69)
    string ["1"] (543:69-543:72)
      " ["] (543:69-543:70)
      string_fragment [1] (543:70-543:71)
      " ["] (543:71-543:72)
    identifier [y2] (543:73-543:75)
  = [=] (543:75-543:76)
  binary_expression ["0">
              <stop offset="0%" stopColor="#FF6B6B" stopOpacity={0.9} />
              <stop offset="100%" stopColor="#FF8585" stopOpacity={0.9} />
            </linearGradient>
          </defs] (543:76-547:16)
    string ["0"] (543:76-543:79)
      " ["] (543:76-543:77)
      string_fragment [0] (543:77-543:78)
      " ["] (543:78-543:79)
    > [>] (543:79-543:80)
    ERROR [<stop offset="0%" stopColor="#FF6B6B" stopOpacity={0.9} />
              <stop offset="100%" stopColor="#FF8585" stopOpacity={0.9}] (544:14-545:71)
      type_parameters [<stop offset="0%" stopColor="#FF6B6B" stopOpacity={0.9} />] (544:14-544:72)
        < [<] (544:14-544:15)
        ERROR [stop] (544:15-544:19)
          identifier [stop] (544:15-544:19)
        type_parameter [offset="0%" stopColor="#FF6B6B" stopOpacity={0.9}] (544:20-544:69)
          type_identifier [offset] (544:20-544:26)
          default_type [="0%" stopColor="#FF6B6B" stopOpacity={0.9}] (544:26-544:69)
            = [=] (544:26-544:27)
            ERROR ["0%" stopColor="#FF6B6B" stopOpacity=] (544:27-544:64)
              literal_type ["0%"] (544:27-544:31)
                string ["0%"] (544:27-544:31)
                  " ["] (544:27-544:28)
                  string_fragment [0%] (544:28-544:30)
                  " ["] (544:30-544:31)
              identifier [stopColor] (544:32-544:41)
              = [=] (544:41-544:42)
              literal_type ["#FF6B6B"] (544:42-544:51)
                string ["#FF6B6B"] (544:42-544:51)
                  " ["] (544:42-544:43)
                  string_fragment [#FF6B6B] (544:43-544:50)
                  " ["] (544:50-544:51)
              type_identifier [stopOpacity] (544:52-544:63)
              = [=] (544:63-544:64)
            object_type [{0.9}] (544:64-544:69)
              { [{] (544:64-544:65)
              property_signature [0.9] (544:65-544:68)
                number [0.9] (544:65-544:68)
              } [}] (544:68-544:69)
        ERROR [/] (544:70-544:71)
          / [/] (544:70-544:71)
        > [>] (544:71-544:72)
      < [<] (545:14-545:15)
      ERROR [stop] (545:15-545:19)
        identifier [stop] (545:15-545:19)
      type_parameter [offset="100%" stopColor="#FF8585" stopOpacity={0.9}] (545:20-545:71)
        type_identifier [offset] (545:20-545:26)
        default_type [="100%" stopColor="#FF8585" stopOpacity={0.9}] (545:26-545:71)
          = [=] (545:26-545:27)
          ERROR ["100%" stopColor="#FF8585" stopOpacity=] (545:27-545:66)
            literal_type ["100%"] (545:27-545:33)
              string ["100%"] (545:27-545:33)
                " ["] (545:27-545:28)
                string_fragment [100%] (545:28-545:32)
                " ["] (545:32-545:33)
            identifier [stopColor] (545:34-545:43)
            = [=] (545:43-545:44)
            literal_type ["#FF8585"] (545:44-545:53)
              string ["#FF8585"] (545:44-545:53)
                " ["] (545:44-545:45)
                string_fragment [#FF8585] (545:45-545:52)
                " ["] (545:52-545:53)
            type_identifier [stopOpacity] (545:54-545:65)
            = [=] (545:65-545:66)
          object_type [{0.9}] (545:66-545:71)
            { [{] (545:66-545:67)
            property_signature [0.9] (545:67-545:70)
              number [0.9] (545:67-545:70)
            } [}] (545:70-545:71)
    binary_expression [/>
            </linearGradient>
          </defs] (545:72-547:16)
      regex [/>] (545:72-545:74)
        / [/] (545:72-545:73)
        regex_pattern [>] (545:73-545:74)
        / [] (545:74-545:74)
      < [<] (546:12-546:13)
      regex [/linearGradient>
          </defs] (546:13-547:16)
        / [/] (546:13-546:14)
        regex_pattern [linearGradient>] (546:14-546:29)
        ERROR [<] (547:10-547:11)
          < [<] (547:10-547:11)
        / [/] (547:11-547:12)
        regex_flags [defs] (547:12-547:16)
  > [>] (547:16-547:17)
  type_arguments [<CartesianGrid] (549:10-549:24)
    < [<] (549:10-549:11)
    type_identifier [CartesianGrid] (549:11-549:24)
    > [] (549:24-549:24)
  identifier [strokeDasharray] (549:25-549:40)
  = [=] (549:40-549:41)
  ERROR ["3 3"] (549:41-549:46)
    string ["3 3"] (549:41-549:46)
      " ["] (549:41-549:42)
      string_fragment [3 3] (549:42-549:45)
      " ["] (549:45-549:46)
  identifier [opacity] (549:47-549:54)
  = [=] (549:54-549:55)
  ERROR [{0.7} />
          <XAxis type="number" tick={{ fill: '#666' }} axisLine={{ stroke: '#999' }} />
          <YAxis dataKey="stage"] (549:55-551:32)
    { [{] (549:55-549:56)
    number [0.7] (549:56-549:59)
    } [}] (549:59-549:60)
    / [/] (549:61-549:62)
    regex_pattern [>] (549:62-549:63)
    < [<] (550:10-550:11)
    type_parameter [XAxis type="number" tick={{ fill: '#666' }} axisLine={{ stroke: '#999' }] (550:11-550:83)
      type_identifier [XAxis] (550:11-550:16)
      ERROR [type] (550:17-550:21)
        identifier [type] (550:17-550:21)
      default_type [="number" tick={{ fill: '#666' }} axisLine={{ stroke: '#999' }] (550:21-550:83)
        = [=] (550:21-550:22)
        ERROR ["number" tick={{ fill: '#666' }} axisLine={] (550:22-550:65)
          literal_type ["number"] (550:22-550:30)
            string ["number"] (550:22-550:30)
              " ["] (550:22-550:23)
              string_fragment [number] (550:23-550:29)
              " ["] (550:29-550:30)
          identifier [tick] (550:31-550:35)
          = [=] (550:35-550:36)
          { [{] (550:36-550:37)
          { [{] (550:37-550:38)
          identifier [fill] (550:39-550:43)
          : [:] (550:43-550:44)
          literal_type ['#666'] (550:45-550:51)
            string ['#666'] (550:45-550:51)
              ' ['] (550:45-550:46)
              string_fragment [#666] (550:46-550:50)
              ' ['] (550:50-550:51)
          } [}] (550:52-550:53)
          } [}] (550:53-550:54)
          type_identifier [axisLine] (550:55-550:63)
          = [=] (550:63-550:64)
          { [{] (550:64-550:65)
        object_type [{ stroke: '#999' }] (550:65-550:83)
          { [{] (550:65-550:66)
          property_signature [stroke: '#999'] (550:67-550:81)
            property_identifier [stroke] (550:67-550:73)
            type_annotation [: '#999'] (550:73-550:81)
              : [:] (550:73-550:74)
              literal_type ['#999'] (550:75-550:81)
                string ['#999'] (550:75-550:81)
                  ' ['] (550:75-550:76)
                  string_fragment [#999] (550:76-550:80)
                  ' ['] (550:80-550:81)
          } [}] (550:82-550:83)
    } [}] (550:83-550:84)
    / [/] (550:85-550:86)
    regex_pattern [>] (550:86-550:87)
    < [<] (551:10-551:11)
    ERROR [YAxis] (551:11-551:16)
      identifier [YAxis] (551:11-551:16)
    type_parameter [dataKey="stage"] (551:17-551:32)
      type_identifier [dataKey] (551:17-551:24)
      default_type [="stage"] (551:24-551:32)
        = [=] (551:24-551:25)
        literal_type ["stage"] (551:25-551:32)
          string ["stage"] (551:25-551:32)
            " ["] (551:25-551:26)
            string_fragment [stage] (551:26-551:31)
            " ["] (551:31-551:32)
  type [type] (551:33-551:37)
  = [=] (551:37-551:38)
  member_expression ["category" tick] (551:38-551:53)
    string ["category"] (551:38-551:48)
      " ["] (551:38-551:39)
      string_fragment [category] (551:39-551:47)
      " ["] (551:47-551:48)
    optional_chain [] (551:48-551:48)
      ?. [] (551:48-551:48)
    property_identifier [tick] (551:49-551:53)
  = [=] (551:53-551:54)
  { [{] (551:54-551:55)
  { [{] (551:55-551:56)
  property_identifier [fill] (551:57-551:61)
  : [:] (551:61-551:62)
  ERROR ['#666' }}] (551:63-551:72)
    string ['#666'] (551:63-551:69)
      ' ['] (551:63-551:64)
      string_fragment [#666] (551:64-551:68)
      ' ['] (551:68-551:69)
    } [}] (551:70-551:71)
    } [}] (551:71-551:72)
  identifier [axisLine] (551:73-551:81)
  = [=] (551:81-551:82)
  { [{] (551:82-551:83)
  { [{] (551:83-551:84)
  property_identifier [stroke] (551:85-551:91)
  : [:] (551:91-551:92)
  string ['#999'] (551:93-551:99)
    ' ['] (551:93-551:94)
    string_fragment [#999] (551:94-551:98)
    ' ['] (551:98-551:99)
  ERROR [}}] (551:100-551:102)
    } [}] (551:100-551:101)
    } [}] (551:101-551:102)
  / [/] (551:103-551:104)
  ERROR [>] (551:104-551:105)
    > [>] (551:104-551:105)
  type_arguments [<Tooltip] (553:10-553:18)
    < [<] (553:10-553:11)
    type_identifier [Tooltip] (553:11-553:18)
    > [] (553:18-553:18)
  identifier [cursor] (554:12-554:18)
  = [=] (554:18-554:19)
  { [{] (554:19-554:20)
  { [{] (554:20-554:21)
  property_identifier [fill] (554:22-554:26)
  : [:] (554:26-554:27)
  ERROR ['rgba(240,178,138,0.1)' }}] (554:28-554:54)
    string ['rgba(240,178,138,0.1)'] (554:28-554:51)
      ' ['] (554:28-554:29)
      string_fragment [rgba(240,178,138,0.1)] (554:29-554:50)
      ' ['] (554:50-554:51)
    } [}] (554:52-554:53)
    } [}] (554:53-554:54)
  identifier [contentStyle] (555:12-555:24)
  = [=] (555:24-555:25)
  { [{] (555:25-555:26)
  { [{] (555:26-555:27)
  pair_pattern [backgroundColor: 'rgba(255, 255, 255, 0.9)'] (556:14-556:57)
    property_identifier [backgroundColor] (556:14-556:29)
    : [:] (556:29-556:30)
    non_null_expression ['rgba(255, 255, 255, 0.9)'] (556:31-556:57)
      string ['rgba(255, 255, 255, 0.9)'] (556:31-556:57)
        ' ['] (556:31-556:32)
        string_fragment [rgba(255, 255, 255, 0.9)] (556:32-556:56)
        ' ['] (556:56-556:57)
      ! [] (556:57-556:57)
  , [,] (556:57-556:58)
  pair_pattern [borderRadius: '6px'] (557:14-557:33)
    property_identifier [borderRadius] (557:14-557:26)
    : [:] (557:26-557:27)
    non_null_expression ['6px'] (557:28-557:33)
      string ['6px'] (557:28-557:33)
        ' ['] (557:28-557:29)
        string_fragment [6px] (557:29-557:32)
        ' ['] (557:32-557:33)
      ! [] (557:33-557:33)
  , [,] (557:33-557:34)
  pair_pattern [padding: '8px'] (558:14-558:28)
    property_identifier [padding] (558:14-558:21)
    : [:] (558:21-558:22)
    non_null_expression ['8px'] (558:23-558:28)
      string ['8px'] (558:23-558:28)
        ' ['] (558:23-558:24)
        string_fragment [8px] (558:24-558:27)
        ' ['] (558:27-558:28)
      ! [] (558:28-558:28)
  , [,] (558:28-558:29)
  property_identifier [border] (559:14-559:20)
  : [:] (559:20-559:21)
  string ['1px solid #ccc'] (559:22-559:38)
    ' ['] (559:22-559:23)
    string_fragment [1px solid #ccc] (559:23-559:37)
    ' ['] (559:37-559:38)
  ERROR [}}] (560:12-560:14)
    } [}] (560:12-560:13)
    } [}] (560:13-560:14)
  / [/] (561:10-561:11)
  ERROR [>] (561:11-561:12)
    > [>] (561:11-561:12)
  type_arguments [<Legend />] (563:10-563:20)
    < [<] (563:10-563:11)
    type_identifier [Legend] (563:11-563:17)
    ERROR [/] (563:18-563:19)
      / [/] (563:18-563:19)
    > [>] (563:19-563:20)
  type_parameters [<Bar 
            name="Our Metrics"
            dataKey="value" 
            fill="url(#funnelGradient)"
            onMouseEnter={(data, index) => setActiveBar] (565:10-569:55)
    < [<] (565:10-565:11)
    ERROR [Bar] (565:11-565:14)
      identifier [Bar] (565:11-565:14)
    type_parameter [name="Our Metrics"
            dataKey="value" 
            fill="url(#funnelGradient)"
            onMouseEnter={(data, index) => setActiveBar] (566:12-569:55)
      type_identifier [name] (566:12-566:16)
      default_type [="Our Metrics"
            dataKey="value" 
            fill="url(#funnelGradient)"
            onMouseEnter={(data, index) => setActiveBar] (566:16-569:55)
        = [=] (566:16-566:17)
        ERROR ["Our Metrics"
            dataKey="value" 
            fill="url(#funnelGradient)"
            onMouseEnter={] (566:17-569:26)
          literal_type ["Our Metrics"] (566:17-566:30)
            string ["Our Metrics"] (566:17-566:30)
              " ["] (566:17-566:18)
              string_fragment [Our Metrics] (566:18-566:29)
              " ["] (566:29-566:30)
          identifier [dataKey] (567:12-567:19)
          = [=] (567:19-567:20)
          literal_type ["value"] (567:20-567:27)
            string ["value"] (567:20-567:27)
              " ["] (567:20-567:21)
              string_fragment [value] (567:21-567:26)
              " ["] (567:26-567:27)
          identifier [fill] (568:12-568:16)
          = [=] (568:16-568:17)
          literal_type ["url(#funnelGradient)"] (568:17-568:39)
            string ["url(#funnelGradient)"] (568:17-568:39)
              " ["] (568:17-568:18)
              string_fragment [url(#funnelGradient)] (568:18-568:38)
              " ["] (568:38-568:39)
          identifier [onMouseEnter] (569:12-569:24)
          = [=] (569:24-569:25)
          { [{] (569:25-569:26)
        function_type [(data, index) => setActiveBar] (569:26-569:55)
          formal_parameters [(data, index)] (569:26-569:39)
            ( [(] (569:26-569:27)
            required_parameter [data] (569:27-569:31)
              identifier [data] (569:27-569:31)
            , [,] (569:31-569:32)
            required_parameter [index] (569:33-569:38)
              identifier [index] (569:33-569:38)
            ) [)] (569:38-569:39)
          => [=>] (569:40-569:42)
          type_identifier [setActiveBar] (569:43-569:55)
    > [] (569:55-569:55)
  ERROR [(index)}
            onMouseLeave={] (569:55-570:26)
    formal_parameters [(index)] (569:55-569:62)
      ( [(] (569:55-569:56)
      required_parameter [index] (569:56-569:61)
        identifier [index] (569:56-569:61)
      ) [)] (569:61-569:62)
    } [}] (569:62-569:63)
    identifier [onMouseLeave] (570:12-570:24)
    = [=] (570:24-570:25)
    { [{] (570:25-570:26)
  formal_parameters [()] (570:26-570:28)
    ( [(] (570:26-570:27)
    ) [)] (570:27-570:28)
  => [=>] (570:29-570:31)
  ERROR [setActiveBar(null)}] (570:32-570:51)
    call_expression [setActiveBar(null)] (570:32-570:50)
      identifier [setActiveBar] (570:32-570:44)
      arguments [(null)] (570:44-570:50)
        ( [(] (570:44-570:45)
        null [null] (570:45-570:49)
        ) [)] (570:49-570:50)
    } [}] (570:50-570:51)
  identifier [animationBegin] (571:12-571:26)
  = [=] (571:26-571:27)
  { [{] (571:27-571:28)
  ERROR [0}] (571:28-571:30)
    number [0] (571:28-571:29)
    } [}] (571:29-571:30)
  identifier [animationDuration] (572:12-572:29)
  = [=] (572:29-572:30)
  object_pattern [{800}
            animationEasing="ease-out"
          />
          
          {showCompetitor && (
            <Bar 
              name="Competitor Metrics"
              dataKey="competitorValue" 
              fill="url(#competitorGradient)"
              onMouseEnter={(data, index) => setActiveBar(index)}
              onMouseLeave={() => setActiveBar(null)}
              animationBegin={200}
              animationDuration={800}
              animationEasing="ease-out"
            />
          )}] (572:30-587:12)
    { [{] (572:30-572:31)
    ERROR [800}] (572:31-572:35)
      number [800] (572:31-572:34)
      } [}] (572:34-572:35)
    object_assignment_pattern [animationEasing="ease-out"
          />
          
          {showCompetitor && (
            <Bar 
              name="Competitor Metrics"
              dataKey="competitorValue" 
              fill="url(#competitorGradient)"
              onMouseEnter={(data, index) => setActiveBar(index)}
              onMouseLeave={() => setActiveBar(null)}
              animationBegin={200}
              animationDuration={800}
              animationEasing="ease-out"
            />
          )] (573:12-587:11)
      shorthand_property_identifier_pattern [animationEasing] (573:12-573:27)
      = [=] (573:27-573:28)
      binary_expression ["ease-out"
          />
          
          {showCompetitor && (
            <Bar 
              name="Competitor Metrics"
              dataKey="competitorValue" 
              fill="url(#competitorGradient)"
              onMouseEnter={(data, index) => setActiveBar(index)}
              onMouseLeave={() => setActiveBar(null)}
              animationBegin={200}
              animationDuration={800}
              animationEasing="ease-out"
            />
          )] (573:28-587:11)
        binary_expression ["ease-out"
          />
          
          {showCompetitor] (573:28-576:25)
          string ["ease-out"] (573:28-573:38)
            " ["] (573:28-573:29)
            string_fragment [ease-out] (573:29-573:37)
            " ["] (573:37-573:38)
          / [/] (574:10-574:11)
          ERROR [>] (574:11-574:12)
            > [>] (574:11-574:12)
          object [{showCompetitor] (576:10-576:25)
            { [{] (576:10-576:11)
            shorthand_property_identifier [showCompetitor] (576:11-576:25)
            } [] (576:25-576:25)
        && [&&] (576:26-576:28)
        parenthesized_expression [(
            <Bar 
              name="Competitor Metrics"
              dataKey="competitorValue" 
              fill="url(#competitorGradient)"
              onMouseEnter={(data, index) => setActiveBar(index)}
              onMouseLeave={() => setActiveBar(null)}
              animationBegin={200}
              animationDuration={800}
              animationEasing="ease-out"
            />
          )] (576:29-587:11)
          ( [(] (576:29-576:30)
          ERROR [<Bar 
              name="Competitor Metrics"
              dataKey="competitorValue" 
              fill="url(#competitorGradient)"
              onMouseEnter={(data, index) => setActiveBar(index)}
              onMouseLeave={() => setActiveBar(null)}
              animationBegin={200}
              animationDuration={800}] (577:12-584:37)
            arrow_function [<Bar 
              name="Competitor Metrics"
              dataKey="competitorValue" 
              fill="url(#competitorGradient)"
              onMouseEnter={(data, index) => setActiveBar(index)}
              onMouseLeave={() => setActiveBar(null)] (577:12-582:52)
              type_parameters [<Bar 
              name="Competitor Metrics"
              dataKey="competitorValue" 
              fill="url(#competitorGradient)"
              onMouseEnter={(data, index) => setActiveBar] (577:12-581:57)
                < [<] (577:12-577:13)
                ERROR [Bar] (577:13-577:16)
                  identifier [Bar] (577:13-577:16)
                type_parameter [name="Competitor Metrics"
              dataKey="competitorValue" 
              fill="url(#competitorGradient)"
              onMouseEnter={(data, index) => setActiveBar] (578:14-581:57)
                  type_identifier [name] (578:14-578:18)
                  default_type [="Competitor Metrics"
              dataKey="competitorValue" 
              fill="url(#competitorGradient)"
              onMouseEnter={(data, index) => setActiveBar] (578:18-581:57)
                    = [=] (578:18-578:19)
                    ERROR ["Competitor Metrics"
              dataKey="competitorValue" 
              fill="url(#competitorGradient)"
              onMouseEnter={] (578:19-581:28)
                      literal_type ["Competitor Metrics"] (578:19-578:39)
                        string ["Competitor Metrics"] (578:19-578:39)
                          " ["] (578:19-578:20)
                          string_fragment [Competitor Metrics] (578:20-578:38)
                          " ["] (578:38-578:39)
                      identifier [dataKey] (579:14-579:21)
                      = [=] (579:21-579:22)
                      literal_type ["competitorValue"] (579:22-579:39)
                        string ["competitorValue"] (579:22-579:39)
                          " ["] (579:22-579:23)
                          string_fragment [competitorValue] (579:23-579:38)
                          " ["] (579:38-579:39)
                      identifier [fill] (580:14-580:18)
                      = [=] (580:18-580:19)
                      literal_type ["url(#competitorGradient)"] (580:19-580:45)
                        string ["url(#competitorGradient)"] (580:19-580:45)
                          " ["] (580:19-580:20)
                          string_fragment [url(#competitorGradient)] (580:20-580:44)
                          " ["] (580:44-580:45)
                      identifier [onMouseEnter] (581:14-581:26)
                      = [=] (581:26-581:27)
                      { [{] (581:27-581:28)
                    function_type [(data, index) => setActiveBar] (581:28-581:57)
                      formal_parameters [(data, index)] (581:28-581:41)
                        ( [(] (581:28-581:29)
                        required_parameter [data] (581:29-581:33)
                          identifier [data] (581:29-581:33)
                        , [,] (581:33-581:34)
                        required_parameter [index] (581:35-581:40)
                          identifier [index] (581:35-581:40)
                        ) [)] (581:40-581:41)
                      => [=>] (581:42-581:44)
                      type_identifier [setActiveBar] (581:45-581:57)
                > [] (581:57-581:57)
              ERROR [(index)}
              onMouseLeave={] (581:57-582:28)
                formal_parameters [(index)] (581:57-581:64)
                  ( [(] (581:57-581:58)
                  required_parameter [index] (581:58-581:63)
                    identifier [index] (581:58-581:63)
                  ) [)] (581:63-581:64)
                } [}] (581:64-581:65)
                identifier [onMouseLeave] (582:14-582:26)
                = [=] (582:26-582:27)
                { [{] (582:27-582:28)
              formal_parameters [()] (582:28-582:30)
                ( [(] (582:28-582:29)
                ) [)] (582:29-582:30)
              => [=>] (582:31-582:33)
              call_expression [setActiveBar(null)] (582:34-582:52)
                identifier [setActiveBar] (582:34-582:46)
                arguments [(null)] (582:46-582:52)
                  ( [(] (582:46-582:47)
                  null [null] (582:47-582:51)
                  ) [)] (582:51-582:52)
            } [}] (582:52-582:53)
            identifier [animationBegin] (583:14-583:28)
            = [=] (583:28-583:29)
            { [{] (583:29-583:30)
            number [200] (583:30-583:33)
            } [}] (583:33-583:34)
            identifier [animationDuration] (584:14-584:31)
            = [=] (584:31-584:32)
            { [{] (584:32-584:33)
            number [800] (584:33-584:36)
            } [}] (584:36-584:37)
          assignment_expression [animationEasing="ease-out"] (585:14-585:40)
            identifier [animationEasing] (585:14-585:29)
            = [=] (585:29-585:30)
            string ["ease-out"] (585:30-585:40)
              " ["] (585:30-585:31)
              string_fragment [ease-out] (585:31-585:39)
              " ["] (585:39-585:40)
          ERROR [/>] (586:12-586:14)
            / [/] (586:12-586:13)
            > [>] (586:13-586:14)
          ) [)] (587:10-587:11)
    } [}] (587:11-587:12)
  ERROR [</BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export const ROIComparison: React.FC<ComponentProps>] (588:8-594:52)
    < [<] (588:8-588:9)
    / [/] (588:9-588:10)
    identifier [BarChart] (588:10-588:18)
    > [>] (588:18-588:19)
    < [<] (589:6-589:7)
    / [/] (589:7-589:8)
    identifier [ResponsiveContainer] (589:8-589:27)
    > [>] (589:27-589:28)
    < [<] (590:4-590:5)
    / [/] (590:5-590:6)
    identifier [div] (590:6-590:9)
    > [>] (590:9-590:10)
    ) [)] (591:2-591:3)
    ; [;] (591:3-591:4)
    } [}] (592:0-592:1)
    ; [;] (592:1-592:2)
    export [export] (594:0-594:6)
    const [const] (594:7-594:12)
    identifier [ROIComparison] (594:13-594:26)
    : [:] (594:26-594:27)
    identifier [React] (594:28-594:33)
    . [.] (594:33-594:34)
    identifier [FC] (594:34-594:36)
    < [<] (594:36-594:37)
    identifier [ComponentProps] (594:37-594:51)
    > [>] (594:51-594:52)
  = [=] (594:53-594:54)
  formal_parameters [({ showCompetitor = false })] (594:55-594:83)
    ( [(] (594:55-594:56)
    required_parameter [{ showCompetitor = false }] (594:56-594:82)
      object_pattern [{ showCompetitor = false }] (594:56-594:82)
        { [{] (594:56-594:57)
        object_assignment_pattern [showCompetitor = false] (594:58-594:80)
          shorthand_property_identifier_pattern [showCompetitor] (594:58-594:72)
          = [=] (594:73-594:74)
          false [false] (594:75-594:80)
        } [}] (594:81-594:82)
    ) [)] (594:82-594:83)
  => [=>] (594:84-594:86)
  { [{] (594:87-594:88)
  lexical_declaration [const [activeType, setActiveType] = useState<string | null>(null);] (595:2-595:68)
    const [const] (595:2-595:7)
    variable_declarator [[activeType, setActiveType] = useState<string | null>(null)] (595:8-595:67)
      array_pattern [[activeType, setActiveType]] (595:8-595:35)
        [ [[] (595:8-595:9)
        identifier [activeType] (595:9-595:19)
        , [,] (595:19-595:20)
        identifier [setActiveType] (595:21-595:34)
        ] []] (595:34-595:35)
      = [=] (595:36-595:37)
      call_expression [useState<string | null>(null)] (595:38-595:67)
        identifier [useState] (595:38-595:46)
        type_arguments [<string | null>] (595:46-595:61)
          < [<] (595:46-595:47)
          union_type [string | null] (595:47-595:60)
            predefined_type [string] (595:47-595:53)
              string [string] (595:47-595:53)
            | [|] (595:54-595:55)
            literal_type [null] (595:56-595:60)
              null [null] (595:56-595:60)
          > [>] (595:60-595:61)
        arguments [(null)] (595:61-595:67)
          ( [(] (595:61-595:62)
          null [null] (595:62-595:66)
          ) [)] (595:66-595:67)
    ; [;] (595:67-595:68)
  lexical_declaration [const [data, setData] = useState<ROIData[]>([]);] (596:2-596:50)
    const [const] (596:2-596:7)
    variable_declarator [[data, setData] = useState<ROIData[]>([])] (596:8-596:49)
      array_pattern [[data, setData]] (596:8-596:23)
        [ [[] (596:8-596:9)
        identifier [data] (596:9-596:13)
        , [,] (596:13-596:14)
        identifier [setData] (596:15-596:22)
        ] []] (596:22-596:23)
      = [=] (596:24-596:25)
      call_expression [useState<ROIData[]>([])] (596:26-596:49)
        identifier [useState] (596:26-596:34)
        type_arguments [<ROIData[]>] (596:34-596:45)
          < [<] (596:34-596:35)
          array_type [ROIData[]] (596:35-596:44)
            type_identifier [ROIData] (596:35-596:42)
            [ [[] (596:42-596:43)
            ] []] (596:43-596:44)
          > [>] (596:44-596:45)
        arguments [([])] (596:45-596:49)
          ( [(] (596:45-596:46)
          array [[]] (596:46-596:48)
            [ [[] (596:46-596:47)
            ] []] (596:47-596:48)
          ) [)] (596:48-596:49)
    ; [;] (596:49-596:50)
  expression_statement [useEffect(() => {
    setData(generateROIData());
  }, []);] (598:2-600:9)
    call_expression [useEffect(() => {
    setData(generateROIData());
  }, [])] (598:2-600:8)
      identifier [useEffect] (598:2-598:11)
      arguments [(() => {
    setData(generateROIData());
  }, [])] (598:11-600:8)
        ( [(] (598:11-598:12)
        arrow_function [() => {
    setData(generateROIData());
  }] (598:12-600:3)
          formal_parameters [()] (598:12-598:14)
            ( [(] (598:12-598:13)
            ) [)] (598:13-598:14)
          => [=>] (598:15-598:17)
          statement_block [{
    setData(generateROIData());
  }] (598:18-600:3)
            { [{] (598:18-598:19)
            expression_statement [setData(generateROIData());] (599:4-599:31)
              call_expression [setData(generateROIData())] (599:4-599:30)
                identifier [setData] (599:4-599:11)
                arguments [(generateROIData())] (599:11-599:30)
                  ( [(] (599:11-599:12)
                  call_expression [generateROIData()] (599:12-599:29)
                    identifier [generateROIData] (599:12-599:27)
                    arguments [()] (599:27-599:29)
                      ( [(] (599:27-599:28)
                      ) [)] (599:28-599:29)
                  ) [)] (599:29-599:30)
              ; [;] (599:30-599:31)
            } [}] (600:2-600:3)
        , [,] (600:3-600:4)
        array [[]] (600:5-600:7)
          [ [[] (600:5-600:6)
          ] []] (600:6-600:7)
        ) [)] (600:7-600:8)
    ; [;] (600:8-600:9)
  lexical_declaration [const handleMouseEnter = (type: string) => {
    setActiveType(type);
  };] (602:2-604:4)
    const [const] (602:2-602:7)
    variable_declarator [handleMouseEnter = (type: string) => {
    setActiveType(type);
  }] (602:8-604:3)
      identifier [handleMouseEnter] (602:8-602:24)
      = [=] (602:25-602:26)
      arrow_function [(type: string) => {
    setActiveType(type);
  }] (602:27-604:3)
        formal_parameters [(type: string)] (602:27-602:41)
          ( [(] (602:27-602:28)
          required_parameter [type: string] (602:28-602:40)
            identifier [type] (602:28-602:32)
            type_annotation [: string] (602:32-602:40)
              : [:] (602:32-602:33)
              predefined_type [string] (602:34-602:40)
                string [string] (602:34-602:40)
          ) [)] (602:40-602:41)
        => [=>] (602:42-602:44)
        statement_block [{
    setActiveType(type);
  }] (602:45-604:3)
          { [{] (602:45-602:46)
          expression_statement [setActiveType(type);] (603:4-603:24)
            call_expression [setActiveType(type)] (603:4-603:23)
              identifier [setActiveType] (603:4-603:17)
              arguments [(type)] (603:17-603:23)
                ( [(] (603:17-603:18)
                identifier [type] (603:18-603:22)
                ) [)] (603:22-603:23)
            ; [;] (603:23-603:24)
          } [}] (604:2-604:3)
    ; [;] (604:3-604:4)
  lexical_declaration [const handleMouseLeave = () => {
    setActiveType(null);
  };] (606:2-608:4)
    const [const] (606:2-606:7)
    variable_declarator [handleMouseLeave = () => {
    setActiveType(null);
  }] (606:8-608:3)
      identifier [handleMouseLeave] (606:8-606:24)
      = [=] (606:25-606:26)
      arrow_function [() => {
    setActiveType(null);
  }] (606:27-608:3)
        formal_parameters [()] (606:27-606:29)
          ( [(] (606:27-606:28)
          ) [)] (606:28-606:29)
        => [=>] (606:30-606:32)
        statement_block [{
    setActiveType(null);
  }] (606:33-608:3)
          { [{] (606:33-606:34)
          expression_statement [setActiveType(null);] (607:4-607:24)
            call_expression [setActiveType(null)] (607:4-607:23)
              identifier [setActiveType] (607:4-607:17)
              arguments [(null)] (607:17-607:23)
                ( [(] (607:17-607:18)
                null [null] (607:18-607:22)
                ) [)] (607:22-607:23)
            ; [;] (607:23-607:24)
          } [}] (608:2-608:3)
    ; [;] (608:3-608:4)
  return [return] (610:2-610:8)
  ( [(] (610:9-610:10)
  type_arguments [<div] (611:4-611:8)
    < [<] (611:4-611:5)
    type_identifier [div] (611:5-611:8)
    > [] (611:8-611:8)
  identifier [className] (611:9-611:18)
  = [=] (611:18-611:19)
  string ["h-96 w-full"] (611:19-611:32)
    " ["] (611:19-611:20)
    string_fragment [h-96 w-full] (611:20-611:31)
    " ["] (611:31-611:32)
  > [>] (611:32-611:33)
  ERROR [<ResponsiveContainer width="100%" height="100%">] (612:6-612:54)
    type_parameters [<ResponsiveContainer width="100%" height="100%">] (612:6-612:54)
      < [<] (612:6-612:7)
      type_parameter [ResponsiveContainer width="100%" height="100%"] (612:7-612:53)
        type_identifier [ResponsiveContainer] (612:7-612:26)
        ERROR [width] (612:27-612:32)
          identifier [width] (612:27-612:32)
        default_type [="100%" height="100%"] (612:32-612:53)
          = [=] (612:32-612:33)
          ERROR ["100%" height=] (612:33-612:47)
            literal_type ["100%"] (612:33-612:39)
              string ["100%"] (612:33-612:39)
                " ["] (612:33-612:34)
                string_fragment [100%] (612:34-612:38)
                " ["] (612:38-612:39)
            identifier [height] (612:40-612:46)
            = [=] (612:46-612:47)
          literal_type ["100%"] (612:47-612:53)
            string ["100%"] (612:47-612:53)
              " ["] (612:47-612:48)
              string_fragment [100%] (612:48-612:52)
              " ["] (612:52-612:53)
      > [>] (612:53-612:54)
  type_arguments [<ComposedChart] (613:8-613:22)
    < [<] (613:8-613:9)
    type_identifier [ComposedChart] (613:9-613:22)
    > [] (613:22-613:22)
  identifier [data] (613:23-613:27)
  = [=] (613:27-613:28)
  object [{data}] (613:28-613:34)
    { [{] (613:28-613:29)
    shorthand_property_identifier [data] (613:29-613:33)
    } [}] (613:33-613:34)
  > [>] (613:34-613:35)
  type_arguments [<defs>] (614:10-614:16)
    < [<] (614:10-614:11)
    type_identifier [defs] (614:11-614:15)
    > [>] (614:15-614:16)
  object [{/* Gradient definitions remain the same */}] (615:12-615:56)
    { [{] (615:12-615:13)
    comment [/* Gradient definitions remain the same */] (615:13-615:55)
    } [}] (615:55-615:56)
  < [<] (616:12-616:13)
  identifier [linearGradient] (616:13-616:27)
  ERROR [id="costGradient" x1="0" y1="0" x2="0" y2] (616:28-616:69)
    identifier [id] (616:28-616:30)
    = [=] (616:30-616:31)
    string ["costGradient"] (616:31-616:45)
      " ["] (616:31-616:32)
      string_fragment [costGradient] (616:32-616:44)
      " ["] (616:44-616:45)
    identifier [x1] (616:46-616:48)
    = [=] (616:48-616:49)
    string ["0"] (616:49-616:52)
      " ["] (616:49-616:50)
      string_fragment [0] (616:50-616:51)
      " ["] (616:51-616:52)
    identifier [y1] (616:53-616:55)
    = [=] (616:55-616:56)
    string ["0"] (616:56-616:59)
      " ["] (616:56-616:57)
      string_fragment [0] (616:57-616:58)
      " ["] (616:58-616:59)
    identifier [x2] (616:60-616:62)
    = [=] (616:62-616:63)
    string ["0"] (616:63-616:66)
      " ["] (616:63-616:64)
      string_fragment [0] (616:64-616:65)
      " ["] (616:65-616:66)
    identifier [y2] (616:67-616:69)
  = [=] (616:69-616:70)
  string ["1"] (616:70-616:73)
    " ["] (616:70-616:71)
    string_fragment [1] (616:71-616:72)
    " ["] (616:72-616:73)
  > [>] (616:73-616:74)
  ERROR [<stop offset="5%" stopColor="#96F0A3" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#8AF096" stopOpacity={0.3}] (617:14-618:70)
    type_parameters [<stop offset="5%" stopColor="#96F0A3" stopOpacity={0.8}/>] (617:14-617:71)
      < [<] (617:14-617:15)
      ERROR [stop] (617:15-617:19)
        identifier [stop] (617:15-617:19)
      type_parameter [offset="5%" stopColor="#96F0A3" stopOpacity={0.8}] (617:20-617:69)
        type_identifier [offset] (617:20-617:26)
        default_type [="5%" stopColor="#96F0A3" stopOpacity={0.8}] (617:26-617:69)
          = [=] (617:26-617:27)
          ERROR ["5%" stopColor="#96F0A3" stopOpacity=] (617:27-617:64)
            literal_type ["5%"] (617:27-617:31)
              string ["5%"] (617:27-617:31)
                " ["] (617:27-617:28)
                string_fragment [5%] (617:28-617:30)
                " ["] (617:30-617:31)
            identifier [stopColor] (617:32-617:41)
            = [=] (617:41-617:42)
            literal_type ["#96F0A3"] (617:42-617:51)
              string ["#96F0A3"] (617:42-617:51)
                " ["] (617:42-617:43)
                string_fragment [#96F0A3] (617:43-617:50)
                " ["] (617:50-617:51)
            type_identifier [stopOpacity] (617:52-617:63)
            = [=] (617:63-617:64)
          object_type [{0.8}] (617:64-617:69)
            { [{] (617:64-617:65)
            property_signature [0.8] (617:65-617:68)
              number [0.8] (617:65-617:68)
            } [}] (617:68-617:69)
      ERROR [/] (617:69-617:70)
        / [/] (617:69-617:70)
      > [>] (617:70-617:71)
    < [<] (618:14-618:15)
    ERROR [stop] (618:15-618:19)
      identifier [stop] (618:15-618:19)
    type_parameter [offset="95%" stopColor="#8AF096" stopOpacity={0.3}] (618:20-618:70)
      type_identifier [offset] (618:20-618:26)
      default_type [="95%" stopColor="#8AF096" stopOpacity={0.3}] (618:26-618:70)
        = [=] (618:26-618:27)
        ERROR ["95%" stopColor="#8AF096" stopOpacity=] (618:27-618:65)
          literal_type ["95%"] (618:27-618:32)
            string ["95%"] (618:27-618:32)
              " ["] (618:27-618:28)
              string_fragment [95%] (618:28-618:31)
              " ["] (618:31-618:32)
          identifier [stopColor] (618:33-618:42)
          = [=] (618:42-618:43)
          literal_type ["#8AF096"] (618:43-618:52)
            string ["#8AF096"] (618:43-618:52)
              " ["] (618:43-618:44)
              string_fragment [#8AF096] (618:44-618:51)
              " ["] (618:51-618:52)
          type_identifier [stopOpacity] (618:53-618:64)
          = [=] (618:64-618:65)
        object_type [{0.3}] (618:65-618:70)
          { [{] (618:65-618:66)
          property_signature [0.3] (618:66-618:69)
            number [0.3] (618:66-618:69)
          } [}] (618:69-618:70)
  regex [/>] (618:70-618:72)
    / [/] (618:70-618:71)
    regex_pattern [>] (618:71-618:72)
    / [] (618:72-618:72)
  < [<] (619:12-619:13)
  regex [/linearGradient>] (619:13-619:29)
    / [/] (619:13-619:14)
    regex_pattern [linearGradient>] (619:14-619:29)
    / [] (619:29-619:29)
  < [<] (620:12-620:13)
  identifier [linearGradient] (620:13-620:27)
  ERROR [id="profitGradient" x1="0" y1="0" x2="0" y2] (620:28-620:71)
    identifier [id] (620:28-620:30)
    = [=] (620:30-620:31)
    string ["profitGradient"] (620:31-620:47)
      " ["] (620:31-620:32)
      string_fragment [profitGradient] (620:32-620:46)
      " ["] (620:46-620:47)
    identifier [x1] (620:48-620:50)
    = [=] (620:50-620:51)
    string ["0"] (620:51-620:54)
      " ["] (620:51-620:52)
      string_fragment [0] (620:52-620:53)
      " ["] (620:53-620:54)
    identifier [y1] (620:55-620:57)
    = [=] (620:57-620:58)
    string ["0"] (620:58-620:61)
      " ["] (620:58-620:59)
      string_fragment [0] (620:59-620:60)
      " ["] (620:60-620:61)
    identifier [x2] (620:62-620:64)
    = [=] (620:64-620:65)
    string ["0"] (620:65-620:68)
      " ["] (620:65-620:66)
      string_fragment [0] (620:66-620:67)
      " ["] (620:67-620:68)
    identifier [y2] (620:69-620:71)
  = [=] (620:71-620:72)
  string ["1"] (620:72-620:75)
    " ["] (620:72-620:73)
    string_fragment [1] (620:73-620:74)
    " ["] (620:74-620:75)
  > [>] (620:75-620:76)
  ERROR [<stop offset="5%" stopColor="#F0EC8A" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#ECF08A" stopOpacity={0.2}] (621:14-622:70)
    type_parameters [<stop offset="5%" stopColor="#F0EC8A" stopOpacity={0.8}/>] (621:14-621:71)
      < [<] (621:14-621:15)
      ERROR [stop] (621:15-621:19)
        identifier [stop] (621:15-621:19)
      type_parameter [offset="5%" stopColor="#F0EC8A" stopOpacity={0.8}] (621:20-621:69)
        type_identifier [offset] (621:20-621:26)
        default_type [="5%" stopColor="#F0EC8A" stopOpacity={0.8}] (621:26-621:69)
          = [=] (621:26-621:27)
          ERROR ["5%" stopColor="#F0EC8A" stopOpacity=] (621:27-621:64)
            literal_type ["5%"] (621:27-621:31)
              string ["5%"] (621:27-621:31)
                " ["] (621:27-621:28)
                string_fragment [5%] (621:28-621:30)
                " ["] (621:30-621:31)
            identifier [stopColor] (621:32-621:41)
            = [=] (621:41-621:42)
            literal_type ["#F0EC8A"] (621:42-621:51)
              string ["#F0EC8A"] (621:42-621:51)
                " ["] (621:42-621:43)
                string_fragment [#F0EC8A] (621:43-621:50)
                " ["] (621:50-621:51)
            type_identifier [stopOpacity] (621:52-621:63)
            = [=] (621:63-621:64)
          object_type [{0.8}] (621:64-621:69)
            { [{] (621:64-621:65)
            property_signature [0.8] (621:65-621:68)
              number [0.8] (621:65-621:68)
            } [}] (621:68-621:69)
      ERROR [/] (621:69-621:70)
        / [/] (621:69-621:70)
      > [>] (621:70-621:71)
    < [<] (622:14-622:15)
    ERROR [stop] (622:15-622:19)
      identifier [stop] (622:15-622:19)
    type_parameter [offset="95%" stopColor="#ECF08A" stopOpacity={0.2}] (622:20-622:70)
      type_identifier [offset] (622:20-622:26)
      default_type [="95%" stopColor="#ECF08A" stopOpacity={0.2}] (622:26-622:70)
        = [=] (622:26-622:27)
        ERROR ["95%" stopColor="#ECF08A" stopOpacity=] (622:27-622:65)
          literal_type ["95%"] (622:27-622:32)
            string ["95%"] (622:27-622:32)
              " ["] (622:27-622:28)
              string_fragment [95%] (622:28-622:31)
              " ["] (622:31-622:32)
          identifier [stopColor] (622:33-622:42)
          = [=] (622:42-622:43)
          literal_type ["#ECF08A"] (622:43-622:52)
            string ["#ECF08A"] (622:43-622:52)
              " ["] (622:43-622:44)
              string_fragment [#ECF08A] (622:44-622:51)
              " ["] (622:51-622:52)
          type_identifier [stopOpacity] (622:53-622:64)
          = [=] (622:64-622:65)
        object_type [{0.2}] (622:65-622:70)
          { [{] (622:65-622:66)
          property_signature [0.2] (622:66-622:69)
            number [0.2] (622:66-622:69)
          } [}] (622:69-622:70)
  regex [/>] (622:70-622:72)
    / [/] (622:70-622:71)
    regex_pattern [>] (622:71-622:72)
    / [] (622:72-622:72)
  < [<] (623:12-623:13)
  regex [/linearGradient>] (623:13-623:29)
    / [/] (623:13-623:14)
    regex_pattern [linearGradient>] (623:14-623:29)
    / [] (623:29-623:29)
  < [<] (624:12-624:13)
  identifier [linearGradient] (624:13-624:27)
  ERROR [id="competitorCostGradient" x1="0" y1="0" x2="0" y2] (624:28-624:79)
    identifier [id] (624:28-624:30)
    = [=] (624:30-624:31)
    string ["competitorCostGradient"] (624:31-624:55)
      " ["] (624:31-624:32)
      string_fragment [competitorCostGradient] (624:32-624:54)
      " ["] (624:54-624:55)
    identifier [x1] (624:56-624:58)
    = [=] (624:58-624:59)
    string ["0"] (624:59-624:62)
      " ["] (624:59-624:60)
      string_fragment [0] (624:60-624:61)
      " ["] (624:61-624:62)
    identifier [y1] (624:63-624:65)
    = [=] (624:65-624:66)
    string ["0"] (624:66-624:69)
      " ["] (624:66-624:67)
      string_fragment [0] (624:67-624:68)
      " ["] (624:68-624:69)
    identifier [x2] (624:70-624:72)
    = [=] (624:72-624:73)
    string ["0"] (624:73-624:76)
      " ["] (624:73-624:74)
      string_fragment [0] (624:74-624:75)
      " ["] (624:75-624:76)
    identifier [y2] (624:77-624:79)
  = [=] (624:79-624:80)
  string ["1"] (624:80-624:83)
    " ["] (624:80-624:81)
    string_fragment [1] (624:81-624:82)
    " ["] (624:82-624:83)
  > [>] (624:83-624:84)
  ERROR [<stop offset="5%" stopColor="#FF6B6B" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#FF8585" stopOpacity={0.3}] (625:14-626:70)
    type_parameters [<stop offset="5%" stopColor="#FF6B6B" stopOpacity={0.8}/>] (625:14-625:71)
      < [<] (625:14-625:15)
      ERROR [stop] (625:15-625:19)
        identifier [stop] (625:15-625:19)
      type_parameter [offset="5%" stopColor="#FF6B6B" stopOpacity={0.8}] (625:20-625:69)
        type_identifier [offset] (625:20-625:26)
        default_type [="5%" stopColor="#FF6B6B" stopOpacity={0.8}] (625:26-625:69)
          = [=] (625:26-625:27)
          ERROR ["5%" stopColor="#FF6B6B" stopOpacity=] (625:27-625:64)
            literal_type ["5%"] (625:27-625:31)
              string ["5%"] (625:27-625:31)
                " ["] (625:27-625:28)
                string_fragment [5%] (625:28-625:30)
                " ["] (625:30-625:31)
            identifier [stopColor] (625:32-625:41)
            = [=] (625:41-625:42)
            literal_type ["#FF6B6B"] (625:42-625:51)
              string ["#FF6B6B"] (625:42-625:51)
                " ["] (625:42-625:43)
                string_fragment [#FF6B6B] (625:43-625:50)
                " ["] (625:50-625:51)
            type_identifier [stopOpacity] (625:52-625:63)
            = [=] (625:63-625:64)
          object_type [{0.8}] (625:64-625:69)
            { [{] (625:64-625:65)
            property_signature [0.8] (625:65-625:68)
              number [0.8] (625:65-625:68)
            } [}] (625:68-625:69)
      ERROR [/] (625:69-625:70)
        / [/] (625:69-625:70)
      > [>] (625:70-625:71)
    < [<] (626:14-626:15)
    ERROR [stop] (626:15-626:19)
      identifier [stop] (626:15-626:19)
    type_parameter [offset="95%" stopColor="#FF8585" stopOpacity={0.3}] (626:20-626:70)
      type_identifier [offset] (626:20-626:26)
      default_type [="95%" stopColor="#FF8585" stopOpacity={0.3}] (626:26-626:70)
        = [=] (626:26-626:27)
        ERROR ["95%" stopColor="#FF8585" stopOpacity=] (626:27-626:65)
          literal_type ["95%"] (626:27-626:32)
            string ["95%"] (626:27-626:32)
              " ["] (626:27-626:28)
              string_fragment [95%] (626:28-626:31)
              " ["] (626:31-626:32)
          identifier [stopColor] (626:33-626:42)
          = [=] (626:42-626:43)
          literal_type ["#FF8585"] (626:43-626:52)
            string ["#FF8585"] (626:43-626:52)
              " ["] (626:43-626:44)
              string_fragment [#FF8585] (626:44-626:51)
              " ["] (626:51-626:52)
          type_identifier [stopOpacity] (626:53-626:64)
          = [=] (626:64-626:65)
        object_type [{0.3}] (626:65-626:70)
          { [{] (626:65-626:66)
          property_signature [0.3] (626:66-626:69)
            number [0.3] (626:66-626:69)
          } [}] (626:69-626:70)
  regex [/>] (626:70-626:72)
    / [/] (626:70-626:71)
    regex_pattern [>] (626:71-626:72)
    / [] (626:72-626:72)
  < [<] (627:12-627:13)
  regex [/linearGradient>] (627:13-627:29)
    / [/] (627:13-627:14)
    regex_pattern [linearGradient>] (627:14-627:29)
    / [] (627:29-627:29)
  < [<] (628:12-628:13)
  identifier [linearGradient] (628:13-628:27)
  ERROR [id="competitorProfitGradient" x1="0" y1="0" x2="0" y2] (628:28-628:81)
    identifier [id] (628:28-628:30)
    = [=] (628:30-628:31)
    string ["competitorProfitGradient"] (628:31-628:57)
      " ["] (628:31-628:32)
      string_fragment [competitorProfitGradient] (628:32-628:56)
      " ["] (628:56-628:57)
    identifier [x1] (628:58-628:60)
    = [=] (628:60-628:61)
    string ["0"] (628:61-628:64)
      " ["] (628:61-628:62)
      string_fragment [0] (628:62-628:63)
      " ["] (628:63-628:64)
    identifier [y1] (628:65-628:67)
    = [=] (628:67-628:68)
    string ["0"] (628:68-628:71)
      " ["] (628:68-628:69)
      string_fragment [0] (628:69-628:70)
      " ["] (628:70-628:71)
    identifier [x2] (628:72-628:74)
    = [=] (628:74-628:75)
    string ["0"] (628:75-628:78)
      " ["] (628:75-628:76)
      string_fragment [0] (628:76-628:77)
      " ["] (628:77-628:78)
    identifier [y2] (628:79-628:81)
  = [=] (628:81-628:82)
  binary_expression ["1">
              <stop offset="5%" stopColor="#FF9999" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#FFACAC" stopOpacity={0.2}/>
            </linearGradient>
          </defs] (628:82-632:16)
    string ["1"] (628:82-628:85)
      " ["] (628:82-628:83)
      string_fragment [1] (628:83-628:84)
      " ["] (628:84-628:85)
    > [>] (628:85-628:86)
    ERROR [<stop offset="5%" stopColor="#FF9999" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#FFACAC" stopOpacity={0.2}] (629:14-630:70)
      type_parameters [<stop offset="5%" stopColor="#FF9999" stopOpacity={0.8}/>] (629:14-629:71)
        < [<] (629:14-629:15)
        ERROR [stop] (629:15-629:19)
          identifier [stop] (629:15-629:19)
        type_parameter [offset="5%" stopColor="#FF9999" stopOpacity={0.8}] (629:20-629:69)
          type_identifier [offset] (629:20-629:26)
          default_type [="5%" stopColor="#FF9999" stopOpacity={0.8}] (629:26-629:69)
            = [=] (629:26-629:27)
            ERROR ["5%" stopColor="#FF9999" stopOpacity=] (629:27-629:64)
              literal_type ["5%"] (629:27-629:31)
                string ["5%"] (629:27-629:31)
                  " ["] (629:27-629:28)
                  string_fragment [5%] (629:28-629:30)
                  " ["] (629:30-629:31)
              identifier [stopColor] (629:32-629:41)
              = [=] (629:41-629:42)
              literal_type ["#FF9999"] (629:42-629:51)
                string ["#FF9999"] (629:42-629:51)
                  " ["] (629:42-629:43)
                  string_fragment [#FF9999] (629:43-629:50)
                  " ["] (629:50-629:51)
              type_identifier [stopOpacity] (629:52-629:63)
              = [=] (629:63-629:64)
            object_type [{0.8}] (629:64-629:69)
              { [{] (629:64-629:65)
              property_signature [0.8] (629:65-629:68)
                number [0.8] (629:65-629:68)
              } [}] (629:68-629:69)
        ERROR [/] (629:69-629:70)
          / [/] (629:69-629:70)
        > [>] (629:70-629:71)
      < [<] (630:14-630:15)
      ERROR [stop] (630:15-630:19)
        identifier [stop] (630:15-630:19)
      type_parameter [offset="95%" stopColor="#FFACAC" stopOpacity={0.2}] (630:20-630:70)
        type_identifier [offset] (630:20-630:26)
        default_type [="95%" stopColor="#FFACAC" stopOpacity={0.2}] (630:26-630:70)
          = [=] (630:26-630:27)
          ERROR ["95%" stopColor="#FFACAC" stopOpacity=] (630:27-630:65)
            literal_type ["95%"] (630:27-630:32)
              string ["95%"] (630:27-630:32)
                " ["] (630:27-630:28)
                string_fragment [95%] (630:28-630:31)
                " ["] (630:31-630:32)
            identifier [stopColor] (630:33-630:42)
            = [=] (630:42-630:43)
            literal_type ["#FFACAC"] (630:43-630:52)
              string ["#FFACAC"] (630:43-630:52)
                " ["] (630:43-630:44)
                string_fragment [#FFACAC] (630:44-630:51)
                " ["] (630:51-630:52)
            type_identifier [stopOpacity] (630:53-630:64)
            = [=] (630:64-630:65)
          object_type [{0.2}] (630:65-630:70)
            { [{] (630:65-630:66)
            property_signature [0.2] (630:66-630:69)
              number [0.2] (630:66-630:69)
            } [}] (630:69-630:70)
    binary_expression [/>
            </linearGradient>
          </defs] (630:70-632:16)
      regex [/>] (630:70-630:72)
        / [/] (630:70-630:71)
        regex_pattern [>] (630:71-630:72)
        / [] (630:72-630:72)
      < [<] (631:12-631:13)
      regex [/linearGradient>
          </defs] (631:13-632:16)
        / [/] (631:13-631:14)
        regex_pattern [linearGradient>] (631:14-631:29)
        ERROR [<] (632:10-632:11)
          < [<] (632:10-632:11)
        / [/] (632:11-632:12)
        regex_flags [defs] (632:12-632:16)
  > [>] (632:16-632:17)
  type_arguments [<CartesianGrid] (634:10-634:24)
    < [<] (634:10-634:11)
    type_identifier [CartesianGrid] (634:11-634:24)
    > [] (634:24-634:24)
  identifier [strokeDasharray] (634:25-634:40)
  = [=] (634:40-634:41)
  ERROR ["3 3"] (634:41-634:46)
    string ["3 3"] (634:41-634:46)
      " ["] (634:41-634:42)
      string_fragment [3 3] (634:42-634:45)
      " ["] (634:45-634:46)
  identifier [opacity] (634:47-634:54)
  = [=] (634:54-634:55)
  ERROR [{0.7} />
          <XAxis dataKey="month" tick={{ fill: '#666' }} />] (634:55-635:59)
    { [{] (634:55-634:56)
    number [0.7] (634:56-634:59)
    } [}] (634:59-634:60)
    / [/] (634:61-634:62)
    regex_pattern [>] (634:62-634:63)
    < [<] (635:10-635:11)
    ERROR [XAxis] (635:11-635:16)
      identifier [XAxis] (635:11-635:16)
    type_parameter [dataKey="month" tick={{ fill: '#666'] (635:17-635:53)
      type_identifier [dataKey] (635:17-635:24)
      default_type [="month" tick={{ fill: '#666'] (635:24-635:53)
        = [=] (635:24-635:25)
        ERROR ["month" tick={{ fill:] (635:25-635:46)
          literal_type ["month"] (635:25-635:32)
            string ["month"] (635:25-635:32)
              " ["] (635:25-635:26)
              string_fragment [month] (635:26-635:31)
              " ["] (635:31-635:32)
          identifier [tick] (635:33-635:37)
          = [=] (635:37-635:38)
          { [{] (635:38-635:39)
          { [{] (635:39-635:40)
          identifier [fill] (635:41-635:45)
          : [:] (635:45-635:46)
        literal_type ['#666'] (635:47-635:53)
          string ['#666'] (635:47-635:53)
            ' ['] (635:47-635:48)
            string_fragment [#666] (635:48-635:52)
            ' ['] (635:52-635:53)
    } [}] (635:54-635:55)
    } [}] (635:55-635:56)
    / [/] (635:57-635:58)
    regex_pattern [>] (635:58-635:59)
  type_arguments [<YAxis] (636:10-636:16)
    < [<] (636:10-636:11)
    type_identifier [YAxis] (636:11-636:16)
    > [] (636:16-636:16)
  identifier [tick] (636:17-636:21)
  = [=] (636:21-636:22)
  { [{] (636:22-636:23)
  { [{] (636:23-636:24)
  property_identifier [fill] (636:25-636:29)
  : [:] (636:29-636:30)
  binary_expression ['#666' }} />
          
          <Tooltip 
            animationDuration={200}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '6px',
              padding: '8px',
              border: '1px solid #ccc'
            }}
          />
          
          <Legend 
            onMouseEnter={(e) => handleMouseEnter(e.dataKey)}
            onMouseLeave={handleMouseLeave}
            wrapperStyle={{ paddingTop: '12px' }}
          />

          {/* Base metrics */}] (636:31-654:30)
    string ['#666'] (636:31-636:37)
      ' ['] (636:31-636:32)
      string_fragment [#666] (636:32-636:36)
      ' ['] (636:36-636:37)
    ERROR [}}] (636:38-636:40)
      } [}] (636:38-636:39)
      } [}] (636:39-636:40)
    / [/] (636:41-636:42)
    ERROR [>
          
          <Tooltip 
            animationDuration={200}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '6px',
              padding: '8px',
              border: '1px solid #ccc'
            }}
          />
          
          <Legend 
            onMouseEnter={(e) => handleMouseEnter(e.dataKey)}
            onMouseLeave={handleMouseLeave}
            wrapperStyle={{ paddingTop: '12px' }}
          />] (636:42-652:12)
      > [>] (636:42-636:43)
      type_parameters [<Tooltip 
            animationDuration={200}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)',
              borderRadius: '6px',
              padding: '8px',
              border: '1px solid #ccc'
            }}
          />] (638:10-646:12)
        < [<] (638:10-638:11)
        ERROR [Tooltip] (638:11-638:18)
          identifier [Tooltip] (638:11-638:18)
        type_parameter [animationDuration={200}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)'] (639:12-641:57)
          type_identifier [animationDuration] (639:12-639:29)
          default_type [={200}
            contentStyle={{
              backgroundColor: 'rgba(255, 255, 255, 0.9)'] (639:29-641:57)
            = [=] (639:29-639:30)
            ERROR [{200}
            contentStyle={{
              backgroundColor:] (639:30-641:30)
              object_type [{200}] (639:30-639:35)
                { [{] (639:30-639:31)
                property_signature [200] (639:31-639:34)
                  number [200] (639:31-639:34)
                } [}] (639:34-639:35)
              identifier [contentStyle] (640:12-640:24)
              = [=] (640:24-640:25)
              { [{] (640:25-640:26)
              { [{] (640:26-640:27)
              type_identifier [backgroundColor] (641:14-641:29)
              : [:] (641:29-641:30)
            literal_type ['rgba(255, 255, 255, 0.9)'] (641:31-641:57)
              string ['rgba(255, 255, 255, 0.9)'] (641:31-641:57)
                ' ['] (641:31-641:32)
                string_fragment [rgba(255, 255, 255, 0.9)] (641:32-641:56)
                ' ['] (641:56-641:57)
        , [,] (641:57-641:58)
        type_parameter [borderRadius: '6px'] (642:14-642:33)
          type_identifier [borderRadius] (642:14-642:26)
          constraint [: '6px'] (642:26-642:33)
            : [:] (642:26-642:27)
            literal_type ['6px'] (642:28-642:33)
              string ['6px'] (642:28-642:33)
                ' ['] (642:28-642:29)
                string_fragment [6px] (642:29-642:32)
                ' ['] (642:32-642:33)
        , [,] (642:33-642:34)
        type_parameter [padding: '8px'] (643:14-643:28)
          type_identifier [padding] (643:14-643:21)
          constraint [: '8px'] (643:21-643:28)
            : [:] (643:21-643:22)
            literal_type ['8px'] (643:23-643:28)
              string ['8px'] (643:23-643:28)
                ' ['] (643:23-643:24)
                string_fragment [8px] (643:24-643:27)
                ' ['] (643:27-643:28)
        , [,] (643:28-643:29)
        type_parameter [border: '1px solid #ccc'] (644:14-644:38)
          type_identifier [border] (644:14-644:20)
          constraint [: '1px solid #ccc'] (644:20-644:38)
            : [:] (644:20-644:21)
            literal_type ['1px solid #ccc'] (644:22-644:38)
              string ['1px solid #ccc'] (644:22-644:38)
                ' ['] (644:22-644:23)
                string_fragment [1px solid #ccc] (644:23-644:37)
                ' ['] (644:37-644:38)
        ERROR [}}
          /] (645:12-646:11)
          } [}] (645:12-645:13)
          } [}] (645:13-645:14)
          / [/] (646:10-646:11)
        > [>] (646:11-646:12)
      < [<] (648:10-648:11)
      ERROR [Legend] (648:11-648:17)
        identifier [Legend] (648:11-648:17)
      type_parameter [onMouseEnter={(e) => handleMouseEnter(e.dataKey)}
            onMouseLeave={handleMouseLeave}
            wrapperStyle={{ paddingTop: '12px'] (649:12-651:46)
        type_identifier [onMouseEnter] (649:12-649:24)
        default_type [={(e) => handleMouseEnter(e.dataKey)}
            onMouseLeave={handleMouseLeave}
            wrapperStyle={{ paddingTop: '12px'] (649:24-651:46)
          = [=] (649:24-649:25)
          ERROR [{(e) => handleMouseEnter(e.dataKey)}
            onMouseLeave={handleMouseLeave}
            wrapperStyle={{ paddingTop:] (649:25-651:39)
            object_type [{(e) => handleMouseEnter(e.dataKey)}] (649:25-649:61)
              { [{] (649:25-649:26)
              ERROR [(e) =>] (649:26-649:32)
                formal_parameters [(e)] (649:26-649:29)
                  ( [(] (649:26-649:27)
                  required_parameter [e] (649:27-649:28)
                    identifier [e] (649:27-649:28)
                  ) [)] (649:28-649:29)
                => [=>] (649:30-649:32)
              method_signature [handleMouseEnter(e.dataKey)] (649:33-649:60)
                property_identifier [handleMouseEnter] (649:33-649:49)
                formal_parameters [(e.dataKey)] (649:49-649:60)
                  ( [(] (649:49-649:50)
                  required_parameter [e.dataKey] (649:50-649:59)
                    member_expression [e.dataKey] (649:50-649:59)
                      identifier [e] (649:50-649:51)
                      . [.] (649:51-649:52)
                      property_identifier [dataKey] (649:52-649:59)
                  ) [)] (649:59-649:60)
              } [}] (649:60-649:61)
            identifier [onMouseLeave] (650:12-650:24)
            = [=] (650:24-650:25)
            { [{] (650:25-650:26)
            identifier [handleMouseLeave] (650:26-650:42)
            } [}] (650:42-650:43)
            identifier [wrapperStyle] (651:12-651:24)
            = [=] (651:24-651:25)
            { [{] (651:25-651:26)
            { [{] (651:26-651:27)
            identifier [paddingTop] (651:28-651:38)
            : [:] (651:38-651:39)
          literal_type ['12px'] (651:40-651:46)
            string ['12px'] (651:40-651:46)
              ' ['] (651:40-651:41)
              string_fragment [12px] (651:41-651:45)
              ' ['] (651:45-651:46)
      } [}] (651:47-651:48)
      } [}] (651:48-651:49)
      / [/] (652:10-652:11)
      regex_pattern [>] (652:11-652:12)
    object [{/* Base metrics */}] (654:10-654:30)
      { [{] (654:10-654:11)
      comment [/* Base metrics */] (654:11-654:29)
      } [}] (654:29-654:30)
  < [<] (655:10-655:11)
  ERROR [Bar] (655:11-655:14)
    identifier [Bar] (655:11-655:14)
  identifier [name] (656:12-656:16)
  = [=] (656:16-656:17)
  ERROR ["Our Cost"] (656:17-656:27)
    string ["Our Cost"] (656:17-656:27)
      " ["] (656:17-656:18)
      string_fragment [Our Cost] (656:18-656:26)
      " ["] (656:26-656:27)
  identifier [dataKey] (657:12-657:19)
  = [=] (657:19-657:20)
  ERROR ["cost"] (657:20-657:26)
    string ["cost"] (657:20-657:26)
      " ["] (657:20-657:21)
      string_fragment [cost] (657:21-657:25)
      " ["] (657:25-657:26)
  identifier [fill] (658:12-658:16)
  = [=] (658:16-658:17)
  member_expression ["url(#costGradient)"
            opacity] (658:17-659:19)
    string ["url(#costGradient)"] (658:17-658:37)
      " ["] (658:17-658:18)
      string_fragment [url(#costGradient)] (658:18-658:36)
      " ["] (658:36-658:37)
    optional_chain [] (658:37-658:37)
      ?. [] (658:37-658:37)
    property_identifier [opacity] (659:12-659:19)
  = [=] (659:19-659:20)
  ERROR [{] (659:20-659:21)
    { [{] (659:20-659:21)
  binary_expression [!activeType || activeType === 'cost'] (659:21-659:57)
    unary_expression [!activeType] (659:21-659:32)
      ! [!] (659:21-659:22)
      identifier [activeType] (659:22-659:32)
    || [||] (659:33-659:35)
    binary_expression [activeType === 'cost'] (659:36-659:57)
      identifier [activeType] (659:36-659:46)
      === [===] (659:47-659:50)
      string ['cost'] (659:51-659:57)
        ' ['] (659:51-659:52)
        string_fragment [cost] (659:52-659:56)
        ' ['] (659:56-659:57)
  ? [?] (659:58-659:59)
  number [1] (659:60-659:61)
  : [:] (659:62-659:63)
  ERROR [0.3}] (659:64-659:68)
    number [0.3] (659:64-659:67)
    } [}] (659:67-659:68)
  identifier [animationBegin] (660:12-660:26)
  = [=] (660:26-660:27)
  { [{] (660:27-660:28)
  ERROR [0}] (660:28-660:30)
    number [0] (660:28-660:29)
    } [}] (660:29-660:30)
  identifier [animationDuration] (661:12-661:29)
  = [=] (661:29-661:30)
  { [{] (661:30-661:31)
  ERROR [600}] (661:31-661:35)
    number [600] (661:31-661:34)
    } [}] (661:34-661:35)
  identifier [animationEasing] (662:12-662:27)
  = [=] (662:27-662:28)
  string ["ease-out"] (662:28-662:38)
    " ["] (662:28-662:29)
    string_fragment [ease-out] (662:29-662:37)
    " ["] (662:37-662:38)
  / [/] (663:10-663:11)
  ERROR [>
          
          <Line 
            name="Our Revenue"] (663:11-666:30)
    > [>] (663:11-663:12)
    < [<] (665:10-665:11)
    type_parameter [Line 
            name="Our Revenue"] (665:11-666:30)
      type_identifier [Line] (665:11-665:15)
      ERROR [name] (666:12-666:16)
        identifier [name] (666:12-666:16)
      default_type [="Our Revenue"] (666:16-666:30)
        = [=] (666:16-666:17)
        literal_type ["Our Revenue"] (666:17-666:30)
          string ["Our Revenue"] (666:17-666:30)
            " ["] (666:17-666:18)
            string_fragment [Our Revenue] (666:18-666:29)
            " ["] (666:29-666:30)
  type [type] (667:12-667:16)
  = [=] (667:16-667:17)
  ERROR ["monotone"] (667:17-667:27)
    string ["monotone"] (667:17-667:27)
      " ["] (667:17-667:18)
      string_fragment [monotone] (667:18-667:26)
      " ["] (667:26-667:27)
  identifier [dataKey] (668:12-668:19)
  = [=] (668:19-668:20)
  ERROR ["revenue" 
            stroke="#8A8FF0"] (668:20-669:28)
    string ["revenue"] (668:20-668:29)
      " ["] (668:20-668:21)
      string_fragment [revenue] (668:21-668:28)
      " ["] (668:28-668:29)
    assignment_expression [stroke="#8A8FF0"] (669:12-669:28)
      identifier [stroke] (669:12-669:18)
      = [=] (669:18-669:19)
      string ["#8A8FF0"] (669:19-669:28)
        " ["] (669:19-669:20)
        string_fragment [#8A8FF0] (669:20-669:27)
        " ["] (669:27-669:28)
  identifier [strokeWidth] (670:12-670:23)
  = [=] (670:23-670:24)
  object_pattern [{activeType === 'revenue' ? 3 : 1.5}] (670:24-670:60)
    { [{] (670:24-670:25)
    object_assignment_pattern [activeType === 'revenue' ? 3 : 1.5] (670:25-670:59)
      shorthand_property_identifier_pattern [activeType] (670:25-670:35)
      = [=] (670:36-670:37)
      ERROR [==] (670:37-670:39)
        = [=] (670:37-670:38)
        = [=] (670:38-670:39)
      ternary_expression ['revenue' ? 3 : 1.5] (670:40-670:59)
        string ['revenue'] (670:40-670:49)
          ' ['] (670:40-670:41)
          string_fragment [revenue] (670:41-670:48)
          ' ['] (670:48-670:49)
        ? [?] (670:50-670:51)
        number [3] (670:52-670:53)
        : [:] (670:54-670:55)
        number [1.5] (670:56-670:59)
    } [}] (670:59-670:60)
  ERROR [dot] (671:12-671:15)
    identifier [dot] (671:12-671:15)
  = [=] (671:15-671:16)
  { [{] (671:16-671:17)
  { [{] (671:17-671:18)
  property_identifier [r] (671:19-671:20)
  : [:] (671:20-671:21)
  binary_expression [activeType === 'revenue'] (671:22-671:46)
    identifier [activeType] (671:22-671:32)
    === [===] (671:33-671:36)
    string ['revenue'] (671:37-671:46)
      ' ['] (671:37-671:38)
      string_fragment [revenue] (671:38-671:45)
      ' ['] (671:45-671:46)
  ? [?] (671:47-671:48)
  number [5] (671:49-671:50)
  : [:] (671:51-671:52)
  ERROR [3 }}] (671:53-671:57)
    number [3] (671:53-671:54)
    } [}] (671:55-671:56)
    } [}] (671:56-671:57)
  identifier [opacity] (672:12-672:19)
  = [=] (672:19-672:20)
  ERROR [{] (672:20-672:21)
    { [{] (672:20-672:21)
  binary_expression [!activeType || activeType === 'revenue'] (672:21-672:60)
    unary_expression [!activeType] (672:21-672:32)
      ! [!] (672:21-672:22)
      identifier [activeType] (672:22-672:32)
    || [||] (672:33-672:35)
    binary_expression [activeType === 'revenue'] (672:36-672:60)
      identifier [activeType] (672:36-672:46)
      === [===] (672:47-672:50)
      string ['revenue'] (672:51-672:60)
        ' ['] (672:51-672:52)
        string_fragment [revenue] (672:52-672:59)
        ' ['] (672:59-672:60)
  ? [?] (672:61-672:62)
  number [1] (672:63-672:64)
  : [:] (672:65-672:66)
  ERROR [0.3}] (672:67-672:71)
    number [0.3] (672:67-672:70)
    } [}] (672:70-672:71)
  identifier [animationBegin] (673:12-673:26)
  = [=] (673:26-673:27)
  { [{] (673:27-673:28)
  ERROR [400}] (673:28-673:32)
    number [400] (673:28-673:31)
    } [}] (673:31-673:32)
  identifier [animationDuration] (674:12-674:29)
  = [=] (674:29-674:30)
  { [{] (674:30-674:31)
  ERROR [600}] (674:31-674:35)
    number [600] (674:31-674:34)
    } [}] (674:34-674:35)
  identifier [animationEasing] (675:12-675:27)
  = [=] (675:27-675:28)
  string ["ease-in-out"] (675:28-675:41)
    " ["] (675:28-675:29)
    string_fragment [ease-in-out] (675:29-675:40)
    " ["] (675:40-675:41)
  / [/] (676:10-676:11)
  ERROR [>
          
          <Area 
            name="Our Profit"] (676:11-679:29)
    > [>] (676:11-676:12)
    < [<] (678:10-678:11)
    type_parameter [Area 
            name="Our Profit"] (678:11-679:29)
      type_identifier [Area] (678:11-678:15)
      ERROR [name] (679:12-679:16)
        identifier [name] (679:12-679:16)
      default_type [="Our Profit"] (679:16-679:29)
        = [=] (679:16-679:17)
        literal_type ["Our Profit"] (679:17-679:29)
          string ["Our Profit"] (679:17-679:29)
            " ["] (679:17-679:18)
            string_fragment [Our Profit] (679:18-679:28)
            " ["] (679:28-679:29)
  type [type] (680:12-680:16)
  = [=] (680:16-680:17)
  ERROR ["monotone"] (680:17-680:27)
    string ["monotone"] (680:17-680:27)
      " ["] (680:17-680:18)
      string_fragment [monotone] (680:18-680:26)
      " ["] (680:26-680:27)
  identifier [dataKey] (681:12-681:19)
  = [=] (681:19-681:20)
  ERROR ["profit" 
            fill="url(#profitGradient)"
            stroke="#ECF08A"] (681:20-683:28)
    string ["profit"] (681:20-681:28)
      " ["] (681:20-681:21)
      string_fragment [profit] (681:21-681:27)
      " ["] (681:27-681:28)
    assignment_expression [fill="url(#profitGradient)"] (682:12-682:39)
      identifier [fill] (682:12-682:16)
      = [=] (682:16-682:17)
      string ["url(#profitGradient)"] (682:17-682:39)
        " ["] (682:17-682:18)
        string_fragment [url(#profitGradient)] (682:18-682:38)
        " ["] (682:38-682:39)
    assignment_expression [stroke="#ECF08A"] (683:12-683:28)
      identifier [stroke] (683:12-683:18)
      = [=] (683:18-683:19)
      string ["#ECF08A"] (683:19-683:28)
        " ["] (683:19-683:20)
        string_fragment [#ECF08A] (683:20-683:27)
        " ["] (683:27-683:28)
  identifier [strokeWidth] (684:12-684:23)
  = [=] (684:23-684:24)
  object_pattern [{activeType === 'profit' ? 2 : 1}] (684:24-684:57)
    { [{] (684:24-684:25)
    object_assignment_pattern [activeType === 'profit' ? 2 : 1] (684:25-684:56)
      shorthand_property_identifier_pattern [activeType] (684:25-684:35)
      = [=] (684:36-684:37)
      ERROR [==] (684:37-684:39)
        = [=] (684:37-684:38)
        = [=] (684:38-684:39)
      ternary_expression ['profit' ? 2 : 1] (684:40-684:56)
        string ['profit'] (684:40-684:48)
          ' ['] (684:40-684:41)
          string_fragment [profit] (684:41-684:47)
          ' ['] (684:47-684:48)
        ? [?] (684:49-684:50)
        number [2] (684:51-684:52)
        : [:] (684:53-684:54)
        number [1] (684:55-684:56)
    } [}] (684:56-684:57)
  ERROR [fillOpacity] (685:12-685:23)
    identifier [fillOpacity] (685:12-685:23)
  = [=] (685:23-685:24)
  object_pattern [{activeType === 'profit' ? 1 : !activeType ? 0.8 : 0.3}] (685:24-685:79)
    { [{] (685:24-685:25)
    object_assignment_pattern [activeType === 'profit' ? 1 : !activeType ? 0.8 : 0.3] (685:25-685:78)
      shorthand_property_identifier_pattern [activeType] (685:25-685:35)
      = [=] (685:36-685:37)
      ERROR [==] (685:37-685:39)
        = [=] (685:37-685:38)
        = [=] (685:38-685:39)
      ternary_expression ['profit' ? 1 : !activeType ? 0.8 : 0.3] (685:40-685:78)
        string ['profit'] (685:40-685:48)
          ' ['] (685:40-685:41)
          string_fragment [profit] (685:41-685:47)
          ' ['] (685:47-685:48)
        ? [?] (685:49-685:50)
        number [1] (685:51-685:52)
        : [:] (685:53-685:54)
        ternary_expression [!activeType ? 0.8 : 0.3] (685:55-685:78)
          unary_expression [!activeType] (685:55-685:66)
            ! [!] (685:55-685:56)
            identifier [activeType] (685:56-685:66)
          ? [?] (685:67-685:68)
          number [0.8] (685:69-685:72)
          : [:] (685:73-685:74)
          number [0.3] (685:75-685:78)
    } [}] (685:78-685:79)
  ERROR [animationBegin] (686:12-686:26)
    identifier [animationBegin] (686:12-686:26)
  = [=] (686:26-686:27)
  { [{] (686:27-686:28)
  ERROR [800}] (686:28-686:32)
    number [800] (686:28-686:31)
    } [}] (686:31-686:32)
  identifier [animationDuration] (687:12-687:29)
  = [=] (687:29-687:30)
  { [{] (687:30-687:31)
  ERROR [600}] (687:31-687:35)
    number [600] (687:31-687:34)
    } [}] (687:34-687:35)
  identifier [animationEasing] (688:12-688:27)
  = [=] (688:27-688:28)
  binary_expression ["ease-in-out"
          />

          {/* Competitor metrics */}
          {showCompetitor] (688:28-692:25)
    string ["ease-in-out"] (688:28-688:41)
      " ["] (688:28-688:29)
      string_fragment [ease-in-out] (688:29-688:40)
      " ["] (688:40-688:41)
    / [/] (689:10-689:11)
    ERROR [>

          {/* Competitor metrics */}
          {] (689:11-692:11)
      > [>] (689:11-689:12)
      object [{/* Competitor metrics */}] (691:10-691:36)
        { [{] (691:10-691:11)
        comment [/* Competitor metrics */] (691:11-691:35)
        } [}] (691:35-691:36)
      { [{] (692:10-692:11)
    identifier [showCompetitor] (692:11-692:25)
  && [&&] (692:26-692:28)
  ( [(] (692:29-692:30)
  ERROR [<>
              <Bar 
                name="Competitor Cost"
                dataKey="competitorCost" 
                fill="url(#competitorCostGradient)"
                opacity={!activeType || activeType === 'competitorCost' ? 1 : 0.3}
                animationBegin={200}
                animationDuration={600}
                animationEasing="ease-out"
              />
              
              <Line 
                name="Competitor Revenue"
                type="monotone" 
                dataKey="competitorRevenue" 
                stroke="#FF4D4D"
                strokeWidth={activeType === 'competitorRevenue' ? 3 : 1.5}
                dot={{ r: activeType === 'competitorRevenue' ? 5 : 3 }}
                opacity={!activeType || activeType === 'competitorRevenue' ? 1 : 0.3}
                animationBegin={600}
                animationDuration={600}
                animationEasing="ease-in-out"
              />
              
              <Area 
                name="Competitor Profit"
                type="monotone" 
                dataKey="competitorProfit"] (693:12-720:42)
    type_parameters [<>
              <Bar 
                name="Competitor Cost"
                dataKey="competitorCost" 
                fill="url(#competitorCostGradient)"
                opacity={!activeType || activeType === 'competitorCost' ? 1 : 0.3}
                animationBegin={200}
                animationDuration={600}
                animationEasing="ease-out"
              />
              
              <Line 
                name="Competitor Revenue"
                type="monotone" 
                dataKey="competitorRevenue" 
                stroke="#FF4D4D"
                strokeWidth={activeType === 'competitorRevenue' ? 3 : 1.5}
                dot={{ r: activeType === 'competitorRevenue' ? 5 : 3 }}
                opacity={!activeType || activeType === 'competitorRevenue' ? 1 : 0.3}
                animationBegin={600}
                animationDuration={600}
                animationEasing="ease-in-out"
              />] (693:12-715:16)
      < [<] (693:12-693:13)
      ERROR [>
              <Bar 
                name="Competitor Cost"
                dataKey="competitorCost" 
                fill="url(#competitorCostGradient)"
                opacity={!activeType || activeType === 'competitorCost' ? 1 : 0.3}
                animationBegin={200}
                animationDuration={600}
                animationEasing="ease-out"
              />
              
              <Line] (693:13-704:19)
        > [>] (693:13-693:14)
        type_parameters [<Bar 
                name="Competitor Cost"
                dataKey="competitorCost" 
                fill="url(#competitorCostGradient)"
                opacity={!activeType || activeType === 'competitorCost' ? 1 : 0.3}
                animationBegin={200}
                animationDuration={600}
                animationEasing="ease-out"
              />] (694:14-702:16)
          < [<] (694:14-694:15)
          ERROR [Bar] (694:15-694:18)
            identifier [Bar] (694:15-694:18)
          type_parameter [name="Competitor Cost"
                dataKey="competitorCost" 
                fill="url(#competitorCostGradient)"
                opacity={!activeType || activeType === 'competitorCost' ? 1 : 0.3}
                animationBegin={200}
                animationDuration={600}
                animationEasing="ease-out"] (695:16-701:42)
            type_identifier [name] (695:16-695:20)
            default_type [="Competitor Cost"
                dataKey="competitorCost" 
                fill="url(#competitorCostGradient)"
                opacity={!activeType || activeType === 'competitorCost' ? 1 : 0.3}
                animationBegin={200}
                animationDuration={600}
                animationEasing="ease-out"] (695:20-701:42)
              = [=] (695:20-695:21)
              ERROR ["Competitor Cost"
                dataKey="competitorCost" 
                fill="url(#competitorCostGradient)"
                opacity={!activeType || activeType === 'competitorCost' ? 1 : 0.3}
                animationBegin={200}
                animationDuration={600}
                animationEasing=] (695:21-701:32)
                literal_type ["Competitor Cost"] (695:21-695:38)
                  string ["Competitor Cost"] (695:21-695:38)
                    " ["] (695:21-695:22)
                    string_fragment [Competitor Cost] (695:22-695:37)
                    " ["] (695:37-695:38)
                identifier [dataKey] (696:16-696:23)
                = [=] (696:23-696:24)
                literal_type ["competitorCost"] (696:24-696:40)
                  string ["competitorCost"] (696:24-696:40)
                    " ["] (696:24-696:25)
                    string_fragment [competitorCost] (696:25-696:39)
                    " ["] (696:39-696:40)
                identifier [fill] (697:16-697:20)
                = [=] (697:20-697:21)
                literal_type ["url(#competitorCostGradient)"] (697:21-697:51)
                  string ["url(#competitorCostGradient)"] (697:21-697:51)
                    " ["] (697:21-697:22)
                    string_fragment [url(#competitorCostGradient)] (697:22-697:50)
                    " ["] (697:50-697:51)
                identifier [opacity] (698:16-698:23)
                = [=] (698:23-698:24)
                { [{] (698:24-698:25)
                ! [!] (698:25-698:26)
                union_type [activeType || activeType] (698:26-698:50)
                  type_identifier [activeType] (698:26-698:36)
                  | [|] (698:37-698:38)
                  union_type [| activeType] (698:38-698:50)
                    | [|] (698:38-698:39)
                    type_identifier [activeType] (698:40-698:50)
                = [=] (698:51-698:52)
                == [==] (698:52-698:54)
                literal_type ['competitorCost'] (698:55-698:71)
                  string ['competitorCost'] (698:55-698:71)
                    ' ['] (698:55-698:56)
                    string_fragment [competitorCost] (698:56-698:70)
                    ' ['] (698:70-698:71)
                flow_maybe_type [? 1] (698:72-698:75)
                  ? [?] (698:72-698:73)
                  literal_type [1] (698:74-698:75)
                    number [1] (698:74-698:75)
                : [:] (698:76-698:77)
                literal_type [0.3] (698:78-698:81)
                  number [0.3] (698:78-698:81)
                } [}] (698:81-698:82)
                type_identifier [animationBegin] (699:16-699:30)
                = [=] (699:30-699:31)
                object_type [{200}] (699:31-699:36)
                  { [{] (699:31-699:32)
                  property_signature [200] (699:32-699:35)
                    number [200] (699:32-699:35)
                  } [}] (699:35-699:36)
                type_identifier [animationDuration] (700:16-700:33)
                = [=] (700:33-700:34)
                object_type [{600}] (700:34-700:39)
                  { [{] (700:34-700:35)
                  property_signature [600] (700:35-700:38)
                    number [600] (700:35-700:38)
                  } [}] (700:38-700:39)
                type_identifier [animationEasing] (701:16-701:31)
                = [=] (701:31-701:32)
              literal_type ["ease-out"] (701:32-701:42)
                string ["ease-out"] (701:32-701:42)
                  " ["] (701:32-701:33)
                  string_fragment [ease-out] (701:33-701:41)
                  " ["] (701:41-701:42)
          ERROR [/] (702:14-702:15)
            / [/] (702:14-702:15)
          > [>] (702:15-702:16)
        < [<] (704:14-704:15)
        identifier [Line] (704:15-704:19)
      type_parameter [name="Competitor Revenue"
                type="monotone" 
                dataKey="competitorRevenue" 
                stroke="#FF4D4D"
                strokeWidth={activeType === 'competitorRevenue' ? 3 : 1.5}
                dot={{ r: activeType === 'competitorRevenue' ? 5 : 3 }}
                opacity={!activeType || activeType === 'competitorRevenue' ? 1 : 0.3}
                animationBegin={600}
                animationDuration={600}
                animationEasing="ease-in-out"] (705:16-714:45)
        type_identifier [name] (705:16-705:20)
        default_type [="Competitor Revenue"
                type="monotone" 
                dataKey="competitorRevenue" 
                stroke="#FF4D4D"
                strokeWidth={activeType === 'competitorRevenue' ? 3 : 1.5}
                dot={{ r: activeType === 'competitorRevenue' ? 5 : 3 }}
                opacity={!activeType || activeType === 'competitorRevenue' ? 1 : 0.3}
                animationBegin={600}
                animationDuration={600}
                animationEasing="ease-in-out"] (705:20-714:45)
          = [=] (705:20-705:21)
          ERROR ["Competitor Revenue"
                type="monotone" 
                dataKey="competitorRevenue" 
                stroke="#FF4D4D"
                strokeWidth={activeType === 'competitorRevenue' ? 3 : 1.5}
                dot={{ r: activeType === 'competitorRevenue' ? 5 : 3 }}
                opacity={!activeType || activeType === 'competitorRevenue' ? 1 : 0.3}
                animationBegin={600}
                animationDuration={600}
                animationEasing=] (705:21-714:32)
            literal_type ["Competitor Revenue"] (705:21-705:41)
              string ["Competitor Revenue"] (705:21-705:41)
                " ["] (705:21-705:22)
                string_fragment [Competitor Revenue] (705:22-705:40)
                " ["] (705:40-705:41)
            type [type] (706:16-706:20)
            = [=] (706:20-706:21)
            literal_type ["monotone"] (706:21-706:31)
              string ["monotone"] (706:21-706:31)
                " ["] (706:21-706:22)
                string_fragment [monotone] (706:22-706:30)
                " ["] (706:30-706:31)
            identifier [dataKey] (707:16-707:23)
            = [=] (707:23-707:24)
            literal_type ["competitorRevenue"] (707:24-707:43)
              string ["competitorRevenue"] (707:24-707:43)
                " ["] (707:24-707:25)
                string_fragment [competitorRevenue] (707:25-707:42)
                " ["] (707:42-707:43)
            identifier [stroke] (708:16-708:22)
            = [=] (708:22-708:23)
            literal_type ["#FF4D4D"] (708:23-708:32)
              string ["#FF4D4D"] (708:23-708:32)
                " ["] (708:23-708:24)
                string_fragment [#FF4D4D] (708:24-708:31)
                " ["] (708:31-708:32)
            type_identifier [strokeWidth] (709:16-709:27)
            = [=] (709:27-709:28)
            object_type [{activeType === 'competitorRevenue' ? 3 : 1.5}] (709:28-709:74)
              { [{] (709:28-709:29)
              ERROR [activeType === 'competitorRevenue' ?] (709:29-709:65)
                property_identifier [activeType] (709:29-709:39)
                = [=] (709:40-709:41)
                == [==] (709:41-709:43)
                property_signature ['competitorRevenue' ?] (709:44-709:65)
                  string ['competitorRevenue'] (709:44-709:63)
                    ' ['] (709:44-709:45)
                    string_fragment [competitorRevenue] (709:45-709:62)
                    ' ['] (709:62-709:63)
                  ? [?] (709:64-709:65)
              property_signature [3 : 1.5] (709:66-709:73)
                number [3] (709:66-709:67)
                type_annotation [: 1.5] (709:68-709:73)
                  : [:] (709:68-709:69)
                  literal_type [1.5] (709:70-709:73)
                    number [1.5] (709:70-709:73)
              } [}] (709:73-709:74)
            identifier [dot] (710:16-710:19)
            = [=] (710:19-710:20)
            { [{] (710:20-710:21)
            { [{] (710:21-710:22)
            type_identifier [r] (710:23-710:24)
            : [:] (710:24-710:25)
            type_identifier [activeType] (710:26-710:36)
            = [=] (710:37-710:38)
            == [==] (710:38-710:40)
            literal_type ['competitorRevenue'] (710:41-710:60)
              string ['competitorRevenue'] (710:41-710:60)
                ' ['] (710:41-710:42)
                string_fragment [competitorRevenue] (710:42-710:59)
                ' ['] (710:59-710:60)
            flow_maybe_type [? 5] (710:61-710:64)
              ? [?] (710:61-710:62)
              literal_type [5] (710:63-710:64)
                number [5] (710:63-710:64)
            : [:] (710:65-710:66)
            literal_type [3] (710:67-710:68)
              number [3] (710:67-710:68)
            } [}] (710:69-710:70)
            } [}] (710:70-710:71)
            type_identifier [opacity] (711:16-711:23)
            = [=] (711:23-711:24)
            { [{] (711:24-711:25)
            ERROR [!] (711:25-711:26)
              ! [!] (711:25-711:26)
            property_identifier [activeType] (711:26-711:36)
            union_type [|| activeType] (711:37-711:50)
              | [|] (711:37-711:38)
              union_type [| activeType] (711:38-711:50)
                | [|] (711:38-711:39)
                type_identifier [activeType] (711:40-711:50)
            = [=] (711:51-711:52)
            == [==] (711:52-711:54)
            literal_type ['competitorRevenue'] (711:55-711:74)
              string ['competitorRevenue'] (711:55-711:74)
                ' ['] (711:55-711:56)
                string_fragment [competitorRevenue] (711:56-711:73)
                ' ['] (711:73-711:74)
            flow_maybe_type [? 1] (711:75-711:78)
              ? [?] (711:75-711:76)
              literal_type [1] (711:77-711:78)
                number [1] (711:77-711:78)
            : [:] (711:79-711:80)
            literal_type [0.3] (711:81-711:84)
              number [0.3] (711:81-711:84)
            } [}] (711:84-711:85)
            type_identifier [animationBegin] (712:16-712:30)
            = [=] (712:30-712:31)
            object_type [{600}] (712:31-712:36)
              { [{] (712:31-712:32)
              property_signature [600] (712:32-712:35)
                number [600] (712:32-712:35)
              } [}] (712:35-712:36)
            type_identifier [animationDuration] (713:16-713:33)
            = [=] (713:33-713:34)
            object_type [{600}] (713:34-713:39)
              { [{] (713:34-713:35)
              property_signature [600] (713:35-713:38)
                number [600] (713:35-713:38)
              } [}] (713:38-713:39)
            type_identifier [animationEasing] (714:16-714:31)
            = [=] (714:31-714:32)
          literal_type ["ease-in-out"] (714:32-714:45)
            string ["ease-in-out"] (714:32-714:45)
              " ["] (714:32-714:33)
              string_fragment [ease-in-out] (714:33-714:44)
              " ["] (714:44-714:45)
      ERROR [/] (715:14-715:15)
        / [/] (715:14-715:15)
      > [>] (715:15-715:16)
    < [<] (717:14-717:15)
    identifier [Area] (717:15-717:19)
    identifier [name] (718:16-718:20)
    = [=] (718:20-718:21)
    " ["] (718:21-718:22)
    identifier [Competitor] (718:22-718:32)
    identifier [Profit] (718:33-718:39)
    " ["] (718:39-718:40)
    type [type] (719:16-719:20)
    = [=] (719:20-719:21)
    " ["] (719:21-719:22)
    identifier [monotone] (719:22-719:30)
    " ["] (719:30-719:31)
    identifier [dataKey] (720:16-720:23)
    = [=] (720:23-720:24)
    " ["] (720:24-720:25)
    identifier [competitorProfit] (720:25-720:41)
    " ["] (720:41-720:42)
  identifier [fill] (721:16-721:20)
  = [=] (721:20-721:21)
  member_expression ["url(#competitorProfitGradient)"
                stroke] (721:21-722:22)
    string ["url(#competitorProfitGradient)"] (721:21-721:53)
      " ["] (721:21-721:22)
      string_fragment [url(#competitorProfitGradient)] (721:22-721:52)
      " ["] (721:52-721:53)
    optional_chain [] (721:53-721:53)
      ?. [] (721:53-721:53)
    property_identifier [stroke] (722:16-722:22)
  = [=] (722:22-722:23)
  ERROR ["#FF6666"] (722:23-722:32)
    string ["#FF6666"] (722:23-722:32)
      " ["] (722:23-722:24)
      string_fragment [#FF6666] (722:24-722:31)
      " ["] (722:31-722:32)
  identifier [strokeWidth] (723:16-723:27)
  = [=] (723:27-723:28)
  object_pattern [{activeType === 'competitorProfit' ? 2 : 1}] (723:28-723:71)
    { [{] (723:28-723:29)
    object_assignment_pattern [activeType === 'competitorProfit' ? 2 : 1] (723:29-723:70)
      shorthand_property_identifier_pattern [activeType] (723:29-723:39)
      = [=] (723:40-723:41)
      ERROR [==] (723:41-723:43)
        = [=] (723:41-723:42)
        = [=] (723:42-723:43)
      ternary_expression ['competitorProfit' ? 2 : 1] (723:44-723:70)
        string ['competitorProfit'] (723:44-723:62)
          ' ['] (723:44-723:45)
          string_fragment [competitorProfit] (723:45-723:61)
          ' ['] (723:61-723:62)
        ? [?] (723:63-723:64)
        number [2] (723:65-723:66)
        : [:] (723:67-723:68)
        number [1] (723:69-723:70)
    } [}] (723:70-723:71)
  ERROR [fillOpacity] (724:16-724:27)
    identifier [fillOpacity] (724:16-724:27)
  = [=] (724:27-724:28)
  object_pattern [{activeType === 'competitorProfit' ? 1 : !activeType ? 0.8 : 0.3}] (724:28-724:93)
    { [{] (724:28-724:29)
    object_assignment_pattern [activeType === 'competitorProfit' ? 1 : !activeType ? 0.8 : 0.3] (724:29-724:92)
      shorthand_property_identifier_pattern [activeType] (724:29-724:39)
      = [=] (724:40-724:41)
      ERROR [==] (724:41-724:43)
        = [=] (724:41-724:42)
        = [=] (724:42-724:43)
      ternary_expression ['competitorProfit' ? 1 : !activeType ? 0.8 : 0.3] (724:44-724:92)
        string ['competitorProfit'] (724:44-724:62)
          ' ['] (724:44-724:45)
          string_fragment [competitorProfit] (724:45-724:61)
          ' ['] (724:61-724:62)
        ? [?] (724:63-724:64)
        number [1] (724:65-724:66)
        : [:] (724:67-724:68)
        ternary_expression [!activeType ? 0.8 : 0.3] (724:69-724:92)
          unary_expression [!activeType] (724:69-724:80)
            ! [!] (724:69-724:70)
            identifier [activeType] (724:70-724:80)
          ? [?] (724:81-724:82)
          number [0.8] (724:83-724:86)
          : [:] (724:87-724:88)
          number [0.3] (724:89-724:92)
    } [}] (724:92-724:93)
  ERROR [animationBegin] (725:16-725:30)
    identifier [animationBegin] (725:16-725:30)
  = [=] (725:30-725:31)
  { [{] (725:31-725:32)
  ERROR [1000}] (725:32-725:37)
    number [1000] (725:32-725:36)
    } [}] (725:36-725:37)
  identifier [animationDuration] (726:16-726:33)
  = [=] (726:33-726:34)
  { [{] (726:34-726:35)
  ERROR [600}] (726:35-726:39)
    number [600] (726:35-726:38)
    } [}] (726:38-726:39)
  identifier [animationEasing] (727:16-727:31)
  = [=] (727:31-727:32)
  binary_expression ["ease-in-out"
              />
            </>
          )}
        </ComposedChart>
      </ResponsiveContainer>
    </div] (727:32-733:9)
    binary_expression ["ease-in-out"
              />
            </>
          )}
        </ComposedChart>] (727:32-731:24)
      string ["ease-in-out"] (727:32-727:45)
        " ["] (727:32-727:33)
        string_fragment [ease-in-out] (727:33-727:44)
        " ["] (727:44-727:45)
      / [/] (728:14-728:15)
      ERROR [>
            </>
          )}
        <] (728:15-731:9)
        > [>] (728:15-728:16)
        < [<] (729:12-729:13)
        ERROR [/>
          )}] (729:13-730:12)
          / [/] (729:13-729:14)
          > [>] (729:14-729:15)
          ) [)] (730:10-730:11)
          } [}] (730:11-730:12)
        < [<] (731:8-731:9)
      regex [/ComposedChart>] (731:9-731:24)
        / [/] (731:9-731:10)
        regex_pattern [ComposedChart>] (731:10-731:24)
        / [] (731:24-731:24)
    < [<] (732:6-732:7)
    regex [/ResponsiveContainer>
    </div] (732:7-733:9)
      / [/] (732:7-732:8)
      regex_pattern [ResponsiveContainer>] (732:8-732:28)
      ERROR [<] (733:4-733:5)
        < [<] (733:4-733:5)
      / [/] (733:5-733:6)
      regex_flags [div] (733:6-733:9)
  > [>] (733:9-733:10)
  ) [)] (734:2-734:3)
  ; [;] (734:3-734:4)
  } [}] (735:0-735:1)
  ; [;] (735:1-735:2)
