AST for temp_dir\ARTGuru-AI-main\app\components\UI\AnimatedBackground.tsx
==================================================
program [import React, { ReactNode } from 'react';
import '../../styles/animated-background.css'

interface AnimatedBackgroundProps {
  className?: string;
  children: ReactNode;
}

const AnimatedBackground: React.FC<AnimatedBackgroundProps> = ({ 
  className = '', 
  children 
}) => {
  return (
    <div className={`animated-gradient-bg ${className}`}>
      {children}
    </div>
  );
};

export default AnimatedBackground;] (0:0-19:34)
  import_statement [import React, { ReactNode } from 'react';] (0:0-0:41)
    import [import] (0:0-0:6)
    import_clause [React, { ReactNode }] (0:7-0:27)
      identifier [React] (0:7-0:12)
      , [,] (0:12-0:13)
      named_imports [{ ReactNode }] (0:14-0:27)
        { [{] (0:14-0:15)
        import_specifier [ReactNode] (0:16-0:25)
          identifier [ReactNode] (0:16-0:25)
        } [}] (0:26-0:27)
    from [from] (0:28-0:32)
    string ['react'] (0:33-0:40)
      ' ['] (0:33-0:34)
      string_fragment [react] (0:34-0:39)
      ' ['] (0:39-0:40)
    ; [;] (0:40-0:41)
  import_statement [import '../../styles/animated-background.css'] (1:0-1:45)
    import [import] (1:0-1:6)
    string ['../../styles/animated-background.css'] (1:7-1:45)
      ' ['] (1:7-1:8)
      string_fragment [../../styles/animated-background.css] (1:8-1:44)
      ' ['] (1:44-1:45)
  interface_declaration [interface AnimatedBackgroundProps {
  className?: string;
  children: ReactNode;
}] (3:0-6:1)
    interface [interface] (3:0-3:9)
    type_identifier [AnimatedBackgroundProps] (3:10-3:33)
    object_type [{
  className?: string;
  children: ReactNode;
}] (3:34-6:1)
      { [{] (3:34-3:35)
      property_signature [className?: string] (4:2-4:20)
        property_identifier [className] (4:2-4:11)
        ? [?] (4:11-4:12)
        type_annotation [: string] (4:12-4:20)
          : [:] (4:12-4:13)
          predefined_type [string] (4:14-4:20)
            string [string] (4:14-4:20)
      ; [;] (4:20-4:21)
      property_signature [children: ReactNode] (5:2-5:21)
        property_identifier [children] (5:2-5:10)
        type_annotation [: ReactNode] (5:10-5:21)
          : [:] (5:10-5:11)
          type_identifier [ReactNode] (5:12-5:21)
      ; [;] (5:21-5:22)
      } [}] (6:0-6:1)
  lexical_declaration [const AnimatedBackground: React.FC<AnimatedBackgroundProps> = ({ 
  className = '', 
  children 
}) => {
  return (
    <div className={`animated-gradient-bg ${className}`}>
      {children}
    </div>
  );
};] (8:0-17:2)
    const [const] (8:0-8:5)
    variable_declarator [AnimatedBackground: React.FC<AnimatedBackgroundProps> = ({ 
  className = '', 
  children 
}) => {
  return (
    <div className={`animated-gradient-bg ${className}`}>
      {children}] (8:6-14:16)
      identifier [AnimatedBackground] (8:6-8:24)
      type_annotation [: React.FC<AnimatedBackgroundProps>] (8:24-8:59)
        : [:] (8:24-8:25)
        generic_type [React.FC<AnimatedBackgroundProps>] (8:26-8:59)
          nested_type_identifier [React.FC] (8:26-8:34)
            identifier [React] (8:26-8:31)
            . [.] (8:31-8:32)
            type_identifier [FC] (8:32-8:34)
          type_arguments [<AnimatedBackgroundProps>] (8:34-8:59)
            < [<] (8:34-8:35)
            type_identifier [AnimatedBackgroundProps] (8:35-8:58)
            > [>] (8:58-8:59)
      = [=] (8:60-8:61)
      binary_expression [({ 
  className = '', 
  children 
}) => {
  return (
    <div className={`animated-gradient-bg ${className}`}>
      {children}] (8:62-14:16)
        arrow_function [({ 
  className = '', 
  children 
}) => {
  return (
    <div className={`animated-gradient-bg ${className}`}] (8:62-13:56)
          formal_parameters [({ 
  className = '', 
  children 
})] (8:62-11:2)
            ( [(] (8:62-8:63)
            required_parameter [{ 
  className = '', 
  children 
}] (8:63-11:1)
              object_pattern [{ 
  className = '', 
  children 
}] (8:63-11:1)
                { [{] (8:63-8:64)
                object_assignment_pattern [className = ''] (9:2-9:16)
                  shorthand_property_identifier_pattern [className] (9:2-9:11)
                  = [=] (9:12-9:13)
                  string [''] (9:14-9:16)
                    ' ['] (9:14-9:15)
                    ' ['] (9:15-9:16)
                , [,] (9:16-9:17)
                shorthand_property_identifier_pattern [children] (10:2-10:10)
                } [}] (11:0-11:1)
            ) [)] (11:1-11:2)
          => [=>] (11:3-11:5)
          statement_block [{
  return (
    <div className={`animated-gradient-bg ${className}`}] (11:6-13:56)
            { [{] (11:6-11:7)
            ERROR [return (
    <div className={`animated-gradient-bg ${className}`] (12:2-13:55)
              return [return] (12:2-12:8)
              ( [(] (12:9-12:10)
              < [<] (13:4-13:5)
              ERROR [div] (13:5-13:8)
                identifier [div] (13:5-13:8)
              type_parameter [className={`animated-gradient-bg ${className}`] (13:9-13:55)
                type_identifier [className] (13:9-13:18)
                default_type [={`animated-gradient-bg ${className}`] (13:18-13:55)
                  = [=] (13:18-13:19)
                  ERROR [{] (13:19-13:20)
                    { [{] (13:19-13:20)
                  template_literal_type [`animated-gradient-bg ${className}`] (13:20-13:55)
                    ` [`] (13:20-13:21)
                    template_type [${className}] (13:42-13:54)
                      ${ [${] (13:42-13:44)
                      type_identifier [className] (13:44-13:53)
                      } [}] (13:53-13:54)
                    ` [`] (13:54-13:55)
            } [}] (13:55-13:56)
        > [>] (13:56-13:57)
        object [{children}] (14:6-14:16)
          { [{] (14:6-14:7)
          shorthand_property_identifier [children] (14:7-14:15)
          } [}] (14:15-14:16)
    ERROR [</div>
  );
}] (15:4-17:1)
      < [<] (15:4-15:5)
      / [/] (15:5-15:6)
      regex_pattern [div>] (15:6-15:10)
      ) [)] (16:2-16:3)
      ; [;] (16:3-16:4)
      } [}] (17:0-17:1)
    ; [;] (17:1-17:2)
  export_statement [export default AnimatedBackground;] (19:0-19:34)
    export [export] (19:0-19:6)
    default [default] (19:7-19:14)
    identifier [AnimatedBackground] (19:15-19:33)
    ; [;] (19:33-19:34)
