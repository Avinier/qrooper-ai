AST for temp_dir\ARTGuru-AI-main\app\entry.server.tsx
==================================================
program [/**
 * By default, Remix will handle generating the HTTP Response for you.
 * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` ✨
 * For more information, see https://remix.run/file-conventions/entry.server
 */

import { PassThrough } from "node:stream";

import type { AppLoadContext, EntryContext } from "@remix-run/node";
import { createReadableStreamFromReadable } from "@remix-run/node";
import { RemixServer } from "@remix-run/react";
import { isbot } from "isbot";
import { renderToPipeableStream } from "react-dom/server";

const ABORT_DELAY = 5_000;

export default function handleRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext,
  // This is ignored so we can keep it in the template for visibility.  Feel
  // free to delete this parameter in your app if you're not using it!
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  loadContext: AppLoadContext
) {
  return isbot(request.headers.get("user-agent") || "")
    ? handleBotRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )
    : handleBrowserRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      );
}

function handleBotRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}
] (0:0-140:0)
  comment [/**
 * By default, Remix will handle generating the HTTP Response for you.
 * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` ✨
 * For more information, see https://remix.run/file-conventions/entry.server
 */] (0:0-4:3)
  import_statement [import { PassThrough } from "node:stream";] (6:0-6:42)
    import [import] (6:0-6:6)
    import_clause [{ PassThrough }] (6:7-6:22)
      named_imports [{ PassThrough }] (6:7-6:22)
        { [{] (6:7-6:8)
        import_specifier [PassThrough] (6:9-6:20)
          identifier [PassThrough] (6:9-6:20)
        } [}] (6:21-6:22)
    from [from] (6:23-6:27)
    string ["node:stream"] (6:28-6:41)
      " ["] (6:28-6:29)
      string_fragment [node:stream] (6:29-6:40)
      " ["] (6:40-6:41)
    ; [;] (6:41-6:42)
  import_statement [import type { AppLoadContext, EntryContext } from "@remix-run/node";] (8:0-8:68)
    import [import] (8:0-8:6)
    type [type] (8:7-8:11)
    import_clause [{ AppLoadContext, EntryContext }] (8:12-8:44)
      named_imports [{ AppLoadContext, EntryContext }] (8:12-8:44)
        { [{] (8:12-8:13)
        import_specifier [AppLoadContext] (8:14-8:28)
          identifier [AppLoadContext] (8:14-8:28)
        , [,] (8:28-8:29)
        import_specifier [EntryContext] (8:30-8:42)
          identifier [EntryContext] (8:30-8:42)
        } [}] (8:43-8:44)
    from [from] (8:45-8:49)
    string ["@remix-run/node"] (8:50-8:67)
      " ["] (8:50-8:51)
      string_fragment [@remix-run/node] (8:51-8:66)
      " ["] (8:66-8:67)
    ; [;] (8:67-8:68)
  import_statement [import { createReadableStreamFromReadable } from "@remix-run/node";] (9:0-9:67)
    import [import] (9:0-9:6)
    import_clause [{ createReadableStreamFromReadable }] (9:7-9:43)
      named_imports [{ createReadableStreamFromReadable }] (9:7-9:43)
        { [{] (9:7-9:8)
        import_specifier [createReadableStreamFromReadable] (9:9-9:41)
          identifier [createReadableStreamFromReadable] (9:9-9:41)
        } [}] (9:42-9:43)
    from [from] (9:44-9:48)
    string ["@remix-run/node"] (9:49-9:66)
      " ["] (9:49-9:50)
      string_fragment [@remix-run/node] (9:50-9:65)
      " ["] (9:65-9:66)
    ; [;] (9:66-9:67)
  import_statement [import { RemixServer } from "@remix-run/react";] (10:0-10:47)
    import [import] (10:0-10:6)
    import_clause [{ RemixServer }] (10:7-10:22)
      named_imports [{ RemixServer }] (10:7-10:22)
        { [{] (10:7-10:8)
        import_specifier [RemixServer] (10:9-10:20)
          identifier [RemixServer] (10:9-10:20)
        } [}] (10:21-10:22)
    from [from] (10:23-10:27)
    string ["@remix-run/react"] (10:28-10:46)
      " ["] (10:28-10:29)
      string_fragment [@remix-run/react] (10:29-10:45)
      " ["] (10:45-10:46)
    ; [;] (10:46-10:47)
  import_statement [import { isbot } from "isbot";] (11:0-11:30)
    import [import] (11:0-11:6)
    import_clause [{ isbot }] (11:7-11:16)
      named_imports [{ isbot }] (11:7-11:16)
        { [{] (11:7-11:8)
        import_specifier [isbot] (11:9-11:14)
          identifier [isbot] (11:9-11:14)
        } [}] (11:15-11:16)
    from [from] (11:17-11:21)
    string ["isbot"] (11:22-11:29)
      " ["] (11:22-11:23)
      string_fragment [isbot] (11:23-11:28)
      " ["] (11:28-11:29)
    ; [;] (11:29-11:30)
  import_statement [import { renderToPipeableStream } from "react-dom/server";] (12:0-12:58)
    import [import] (12:0-12:6)
    import_clause [{ renderToPipeableStream }] (12:7-12:33)
      named_imports [{ renderToPipeableStream }] (12:7-12:33)
        { [{] (12:7-12:8)
        import_specifier [renderToPipeableStream] (12:9-12:31)
          identifier [renderToPipeableStream] (12:9-12:31)
        } [}] (12:32-12:33)
    from [from] (12:34-12:38)
    string ["react-dom/server"] (12:39-12:57)
      " ["] (12:39-12:40)
      string_fragment [react-dom/server] (12:40-12:56)
      " ["] (12:56-12:57)
    ; [;] (12:57-12:58)
  lexical_declaration [const ABORT_DELAY = 5_000;] (14:0-14:26)
    const [const] (14:0-14:5)
    variable_declarator [ABORT_DELAY = 5_000] (14:6-14:25)
      identifier [ABORT_DELAY] (14:6-14:17)
      = [=] (14:18-14:19)
      number [5_000] (14:20-14:25)
    ; [;] (14:25-14:26)
  export_statement [export default function handleRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext,
  // This is ignored so we can keep it in the template for visibility.  Feel
  // free to delete this parameter in your app if you're not using it!
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  loadContext: AppLoadContext
) {
  return isbot(request.headers.get("user-agent") || "")
    ? handleBotRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )
    : handleBrowserRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      );
}] (16:0-39:1)
    export [export] (16:0-16:6)
    default [default] (16:7-16:14)
    function_declaration [function handleRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext,
  // This is ignored so we can keep it in the template for visibility.  Feel
  // free to delete this parameter in your app if you're not using it!
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  loadContext: AppLoadContext
) {
  return isbot(request.headers.get("user-agent") || "")
    ? handleBotRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )
    : handleBrowserRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      );
}] (16:15-39:1)
      function [function] (16:15-16:23)
      identifier [handleRequest] (16:24-16:37)
      formal_parameters [(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext,
  // This is ignored so we can keep it in the template for visibility.  Feel
  // free to delete this parameter in your app if you're not using it!
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  loadContext: AppLoadContext
)] (16:37-25:1)
        ( [(] (16:37-16:38)
        required_parameter [request: Request] (17:2-17:18)
          identifier [request] (17:2-17:9)
          type_annotation [: Request] (17:9-17:18)
            : [:] (17:9-17:10)
            type_identifier [Request] (17:11-17:18)
        , [,] (17:18-17:19)
        required_parameter [responseStatusCode: number] (18:2-18:28)
          identifier [responseStatusCode] (18:2-18:20)
          type_annotation [: number] (18:20-18:28)
            : [:] (18:20-18:21)
            predefined_type [number] (18:22-18:28)
              number [number] (18:22-18:28)
        , [,] (18:28-18:29)
        required_parameter [responseHeaders: Headers] (19:2-19:26)
          identifier [responseHeaders] (19:2-19:17)
          type_annotation [: Headers] (19:17-19:26)
            : [:] (19:17-19:18)
            type_identifier [Headers] (19:19-19:26)
        , [,] (19:26-19:27)
        required_parameter [remixContext: EntryContext] (20:2-20:28)
          identifier [remixContext] (20:2-20:14)
          type_annotation [: EntryContext] (20:14-20:28)
            : [:] (20:14-20:15)
            type_identifier [EntryContext] (20:16-20:28)
        , [,] (20:28-20:29)
        comment [// This is ignored so we can keep it in the template for visibility.  Feel] (21:2-21:76)
        comment [// free to delete this parameter in your app if you're not using it!] (22:2-22:70)
        comment [// eslint-disable-next-line @typescript-eslint/no-unused-vars] (23:2-23:63)
        required_parameter [loadContext: AppLoadContext] (24:2-24:29)
          identifier [loadContext] (24:2-24:13)
          type_annotation [: AppLoadContext] (24:13-24:29)
            : [:] (24:13-24:14)
            type_identifier [AppLoadContext] (24:15-24:29)
        ) [)] (25:0-25:1)
      statement_block [{
  return isbot(request.headers.get("user-agent") || "")
    ? handleBotRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )
    : handleBrowserRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      );
}] (25:2-39:1)
        { [{] (25:2-25:3)
        return_statement [return isbot(request.headers.get("user-agent") || "")
    ? handleBotRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )
    : handleBrowserRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      );] (26:2-38:8)
          return [return] (26:2-26:8)
          ternary_expression [isbot(request.headers.get("user-agent") || "")
    ? handleBotRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )
    : handleBrowserRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )] (26:9-38:7)
            call_expression [isbot(request.headers.get("user-agent") || "")] (26:9-26:55)
              identifier [isbot] (26:9-26:14)
              arguments [(request.headers.get("user-agent") || "")] (26:14-26:55)
                ( [(] (26:14-26:15)
                binary_expression [request.headers.get("user-agent") || ""] (26:15-26:54)
                  call_expression [request.headers.get("user-agent")] (26:15-26:48)
                    member_expression [request.headers.get] (26:15-26:34)
                      member_expression [request.headers] (26:15-26:30)
                        identifier [request] (26:15-26:22)
                        . [.] (26:22-26:23)
                        property_identifier [headers] (26:23-26:30)
                      . [.] (26:30-26:31)
                      property_identifier [get] (26:31-26:34)
                    arguments [("user-agent")] (26:34-26:48)
                      ( [(] (26:34-26:35)
                      string ["user-agent"] (26:35-26:47)
                        " ["] (26:35-26:36)
                        string_fragment [user-agent] (26:36-26:46)
                        " ["] (26:46-26:47)
                      ) [)] (26:47-26:48)
                  || [||] (26:49-26:51)
                  string [""] (26:52-26:54)
                    " ["] (26:52-26:53)
                    " ["] (26:53-26:54)
                ) [)] (26:54-26:55)
            ? [?] (27:4-27:5)
            call_expression [handleBotRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )] (27:6-32:7)
              identifier [handleBotRequest] (27:6-27:22)
              arguments [(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )] (27:22-32:7)
                ( [(] (27:22-27:23)
                identifier [request] (28:8-28:15)
                , [,] (28:15-28:16)
                identifier [responseStatusCode] (29:8-29:26)
                , [,] (29:26-29:27)
                identifier [responseHeaders] (30:8-30:23)
                , [,] (30:23-30:24)
                identifier [remixContext] (31:8-31:20)
                ) [)] (32:6-32:7)
            : [:] (33:4-33:5)
            call_expression [handleBrowserRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )] (33:6-38:7)
              identifier [handleBrowserRequest] (33:6-33:26)
              arguments [(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )] (33:26-38:7)
                ( [(] (33:26-33:27)
                identifier [request] (34:8-34:15)
                , [,] (34:15-34:16)
                identifier [responseStatusCode] (35:8-35:26)
                , [,] (35:26-35:27)
                identifier [responseHeaders] (36:8-36:23)
                , [,] (36:23-36:24)
                identifier [remixContext] (37:8-37:20)
                ) [)] (38:6-38:7)
          ; [;] (38:7-38:8)
        } [}] (39:0-39:1)
  ERROR [function handleBotRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}] (41:0-139:1)
    function [function] (41:0-41:8)
    identifier [handleBotRequest] (41:9-41:25)
    formal_parameters [(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
)] (41:25-46:1)
      ( [(] (41:25-41:26)
      required_parameter [request: Request] (42:2-42:18)
        identifier [request] (42:2-42:9)
        type_annotation [: Request] (42:9-42:18)
          : [:] (42:9-42:10)
          type_identifier [Request] (42:11-42:18)
      , [,] (42:18-42:19)
      required_parameter [responseStatusCode: number] (43:2-43:28)
        identifier [responseStatusCode] (43:2-43:20)
        type_annotation [: number] (43:20-43:28)
          : [:] (43:20-43:21)
          predefined_type [number] (43:22-43:28)
            number [number] (43:22-43:28)
      , [,] (43:28-43:29)
      required_parameter [responseHeaders: Headers] (44:2-44:26)
        identifier [responseHeaders] (44:2-44:17)
        type_annotation [: Headers] (44:17-44:26)
          : [:] (44:17-44:18)
          type_identifier [Headers] (44:19-44:26)
      , [,] (44:26-44:27)
      required_parameter [remixContext: EntryContext] (45:2-45:28)
        identifier [remixContext] (45:2-45:14)
        type_annotation [: EntryContext] (45:14-45:28)
          : [:] (45:14-45:15)
          type_identifier [EntryContext] (45:16-45:28)
      ) [)] (46:0-46:1)
    { [{] (46:2-46:3)
    return [return] (47:2-47:8)
    new [new] (47:9-47:12)
    identifier [Promise] (47:13-47:20)
    ( [(] (47:20-47:21)
    arrow_function [(resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}] (47:21-139:1)
      formal_parameters [(resolve, reject)] (47:21-47:38)
        ( [(] (47:21-47:22)
        required_parameter [resolve] (47:22-47:29)
          identifier [resolve] (47:22-47:29)
        , [,] (47:29-47:30)
        required_parameter [reject] (47:31-47:37)
          identifier [reject] (47:31-47:37)
        ) [)] (47:37-47:38)
      => [=>] (47:39-47:41)
      statement_block [{
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}] (47:42-139:1)
        { [{] (47:42-47:43)
        lexical_declaration [let shellRendered = false;] (48:4-48:30)
          let [let] (48:4-48:7)
          variable_declarator [shellRendered = false] (48:8-48:29)
            identifier [shellRendered] (48:8-48:21)
            = [=] (48:22-48:23)
            false [false] (48:24-48:29)
          ; [;] (48:29-48:30)
        lexical_declaration [const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });] (49:4-138:5)
          const [const] (49:4-49:9)
          variable_declarator [{ pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  })] (49:10-138:4)
            object_pattern [{ pipe, abort }] (49:10-49:25)
              { [{] (49:10-49:11)
              shorthand_property_identifier_pattern [pipe] (49:12-49:16)
              , [,] (49:16-49:17)
              shorthand_property_identifier_pattern [abort] (49:18-49:23)
              } [}] (49:24-49:25)
            = [=] (49:26-49:27)
            call_expression [renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  })] (49:28-138:4)
              identifier [renderToPipeableStream] (49:28-49:50)
              arguments [(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  })] (49:50-138:4)
                ( [(] (49:50-49:51)
                arrow_function [<RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  }] (50:6-138:3)
                  type_parameters [<RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable] (50:6-59:57)
                    < [<] (50:6-50:7)
                    ERROR [RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();] (50:7-58:41)
                      nested_type_identifier [RemixServer
        context={remixContext}
        url={request.url] (50:7-52:24)
                        identifier [RemixServer] (50:7-50:18)
                        ERROR [context={remixContext}
        url={request] (51:8-52:20)
                          identifier [context] (51:8-51:15)
                          = [=] (51:15-51:16)
                          object_type [{remixContext}] (51:16-51:30)
                            { [{] (51:16-51:17)
                            property_signature [remixContext] (51:17-51:29)
                              property_identifier [remixContext] (51:17-51:29)
                            } [}] (51:29-51:30)
                          identifier [url] (52:8-52:11)
                          = [=] (52:11-52:12)
                          { [{] (52:12-52:13)
                          identifier [request] (52:13-52:20)
                        . [.] (52:20-52:21)
                        type_identifier [url] (52:21-52:24)
                      } [}] (52:24-52:25)
                      type_parameter [abortDelay={ABORT_DELAY}] (53:8-53:32)
                        type_identifier [abortDelay] (53:8-53:18)
                        default_type [={ABORT_DELAY}] (53:18-53:32)
                          = [=] (53:18-53:19)
                          object_type [{ABORT_DELAY}] (53:19-53:32)
                            { [{] (53:19-53:20)
                            property_signature [ABORT_DELAY] (53:20-53:31)
                              property_identifier [ABORT_DELAY] (53:20-53:31)
                            } [}] (53:31-53:32)
                      ERROR [/>] (54:6-54:8)
                        / [/] (54:6-54:7)
                        > [>] (54:7-54:8)
                      , [,] (54:8-54:9)
                      { [{] (55:6-55:7)
                      method_signature [onAllReady()] (56:8-56:20)
                        property_identifier [onAllReady] (56:8-56:18)
                        formal_parameters [()] (56:18-56:20)
                          ( [(] (56:18-56:19)
                          ) [)] (56:19-56:20)
                      { [{] (56:21-56:22)
                      property_identifier [shellRendered] (57:10-57:23)
                      = [=] (57:24-57:25)
                      literal_type [true] (57:26-57:30)
                        true [true] (57:26-57:30)
                      ; [;] (57:30-57:31)
                      const [const] (58:10-58:15)
                      identifier [body] (58:16-58:20)
                      = [=] (58:21-58:22)
                      new [new] (58:23-58:26)
                      ERROR [PassThrough] (58:27-58:38)
                        identifier [PassThrough] (58:27-58:38)
                      formal_parameters [()] (58:38-58:40)
                        ( [(] (58:38-58:39)
                        ) [)] (58:39-58:40)
                      ; [;] (58:40-58:41)
                    type_parameter [const stream = createReadableStreamFromReadable] (59:10-59:57)
                      const [const] (59:10-59:15)
                      type_identifier [stream] (59:16-59:22)
                      default_type [= createReadableStreamFromReadable] (59:23-59:57)
                        = [=] (59:23-59:24)
                        type_identifier [createReadableStreamFromReadable] (59:25-59:57)
                    > [] (59:57-59:57)
                  ERROR [(body);

          responseHeaders.set] (59:57-61:29)
                    formal_parameters [(body)] (59:57-59:63)
                      ( [(] (59:57-59:58)
                      required_parameter [body] (59:58-59:62)
                        identifier [body] (59:58-59:62)
                      ) [)] (59:62-59:63)
                    ; [;] (59:63-59:64)
                    identifier [responseHeaders] (61:10-61:25)
                    . [.] (61:25-61:26)
                    set [set] (61:26-61:29)
                  formal_parameters [("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    )] (61:29-85:5)
                    ( [(] (61:29-61:30)
                    required_parameter ["Content-Type"] (61:30-61:44)
                      non_null_expression ["Content-Type"] (61:30-61:44)
                        string ["Content-Type"] (61:30-61:44)
                          " ["] (61:30-61:31)
                          string_fragment [Content-Type] (61:31-61:43)
                          " ["] (61:43-61:44)
                        ! [] (61:44-61:44)
                    , [,] (61:44-61:45)
                    ERROR ["text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown)] (61:46-72:36)
                      string ["text/html"] (61:46-61:57)
                        " ["] (61:46-61:47)
                        string_fragment [text/html] (61:47-61:56)
                        " ["] (61:56-61:57)
                      ) [)] (61:57-61:58)
                      ; [;] (61:58-61:59)
                      call_expression [resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          )] (63:10-68:11)
                        identifier [resolve] (63:10-63:17)
                        arguments [(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          )] (63:17-68:11)
                          ( [(] (63:17-63:18)
                          new_expression [new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })] (64:12-67:14)
                            new [new] (64:12-64:15)
                            identifier [Response] (64:16-64:24)
                            arguments [(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })] (64:24-67:14)
                              ( [(] (64:24-64:25)
                              identifier [stream] (64:25-64:31)
                              , [,] (64:31-64:32)
                              object [{
              headers: responseHeaders,
              status: responseStatusCode,
            }] (64:33-67:13)
                                { [{] (64:33-64:34)
                                pair [headers: responseHeaders] (65:14-65:38)
                                  property_identifier [headers] (65:14-65:21)
                                  : [:] (65:21-65:22)
                                  identifier [responseHeaders] (65:23-65:38)
                                , [,] (65:38-65:39)
                                pair [status: responseStatusCode] (66:14-66:40)
                                  property_identifier [status] (66:14-66:20)
                                  : [:] (66:20-66:21)
                                  identifier [responseStatusCode] (66:22-66:40)
                                , [,] (66:40-66:41)
                                } [}] (67:12-67:13)
                              ) [)] (67:13-67:14)
                          ) [)] (68:10-68:11)
                      ; [;] (68:11-68:12)
                      call_expression [pipe(body)] (70:10-70:20)
                        identifier [pipe] (70:10-70:14)
                        arguments [(body)] (70:14-70:20)
                          ( [(] (70:14-70:15)
                          identifier [body] (70:15-70:19)
                          ) [)] (70:19-70:20)
                      ; [;] (70:20-70:21)
                      } [}] (71:8-71:9)
                      , [,] (71:9-71:10)
                      call_expression [onShellError(error: unknown)] (72:8-72:36)
                        identifier [onShellError] (72:8-72:20)
                        arguments [(error: unknown)] (72:20-72:36)
                          ( [(] (72:20-72:21)
                          identifier [error] (72:21-72:26)
                          ERROR [: unknown] (72:26-72:35)
                            : [:] (72:26-72:27)
                            unknown [unknown] (72:28-72:35)
                          ) [)] (72:35-72:36)
                    required_parameter [{
          reject(error);
        }] (72:37-74:9)
                      object_pattern [{
          reject(error);
        }] (72:37-74:9)
                        { [{] (72:37-72:38)
                        ERROR [reject(error);] (73:10-73:24)
                          property_identifier [reject] (73:10-73:16)
                          formal_parameters [(error)] (73:16-73:23)
                            ( [(] (73:16-73:17)
                            required_parameter [error] (73:17-73:22)
                              identifier [error] (73:17-73:22)
                            ) [)] (73:22-73:23)
                          ; [;] (73:23-73:24)
                        } [}] (74:8-74:9)
                    , [,] (74:9-74:10)
                    ERROR [onError(error: unknown)] (75:8-75:31)
                      call_expression [onError(error: unknown)] (75:8-75:31)
                        identifier [onError] (75:8-75:15)
                        arguments [(error: unknown)] (75:15-75:31)
                          ( [(] (75:15-75:16)
                          identifier [error] (75:16-75:21)
                          ERROR [: unknown] (75:21-75:30)
                            : [:] (75:21-75:22)
                            unknown [unknown] (75:23-75:30)
                          ) [)] (75:30-75:31)
                    required_parameter [{
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }] (75:32-82:11)
                      object_pattern [{
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }] (75:32-82:11)
                        { [{] (75:32-75:33)
                        object_assignment_pattern [responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error)] (76:10-81:32)
                          shorthand_property_identifier_pattern [responseStatusCode] (76:10-76:28)
                          = [=] (76:29-76:30)
                          call_expression [500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error)] (76:31-81:32)
                            member_expression [500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error] (76:31-81:25)
                              call_expression [500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered)] (76:31-80:28)
                                number [500] (76:31-76:34)
                                ERROR [;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if] (76:34-80:12)
                                  ; [;] (76:34-76:35)
                                  comment [// Log streaming rendering errors from inside the shell.  Don't log] (77:10-77:77)
                                  comment [// errors encountered during initial shell rendering since they'll] (78:10-78:76)
                                  comment [// reject and get logged in handleDocumentRequest.] (79:10-79:60)
                                  if [if] (80:10-80:12)
                                arguments [(shellRendered)] (80:13-80:28)
                                  ( [(] (80:13-80:14)
                                  identifier [shellRendered] (80:14-80:27)
                                  ) [)] (80:27-80:28)
                              ERROR [{
            console] (80:29-81:19)
                                { [{] (80:29-80:30)
                                identifier [console] (81:12-81:19)
                              . [.] (81:19-81:20)
                              property_identifier [error] (81:20-81:25)
                            arguments [(error)] (81:25-81:32)
                              ( [(] (81:25-81:26)
                              identifier [error] (81:26-81:31)
                              ) [)] (81:31-81:32)
                        ERROR [;] (81:32-81:33)
                          ; [;] (81:32-81:33)
                        } [}] (82:10-82:11)
                    ERROR [}] (83:8-83:9)
                      } [}] (83:8-83:9)
                    , [,] (83:9-83:10)
                    ERROR [}] (84:6-84:7)
                      } [}] (84:6-84:7)
                    ) [)] (85:4-85:5)
                  ERROR [;

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request] (85:5-92:9)
                    ; [;] (85:5-85:6)
                    identifier [setTimeout] (87:4-87:14)
                    ( [(] (87:14-87:15)
                    identifier [abort] (87:15-87:20)
                    , [,] (87:20-87:21)
                    identifier [ABORT_DELAY] (87:22-87:33)
                    ) [)] (87:33-87:34)
                    ; [;] (87:34-87:35)
                    } [}] (88:2-88:3)
                    ) [)] (88:3-88:4)
                    ; [;] (88:4-88:5)
                    } [}] (89:0-89:1)
                    function [function] (91:0-91:8)
                    identifier [handleBrowserRequest] (91:9-91:29)
                    ( [(] (91:29-91:30)
                    identifier [request] (92:2-92:9)
                  type_annotation [: Request] (92:9-92:18)
                    : [:] (92:9-92:10)
                    type_identifier [Request] (92:11-92:18)
                  ERROR [,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject)] (92:18-97:38)
                    , [,] (92:18-92:19)
                    identifier [responseStatusCode] (93:2-93:20)
                    : [:] (93:20-93:21)
                    number [number] (93:22-93:28)
                    , [,] (93:28-93:29)
                    identifier [responseHeaders] (94:2-94:17)
                    : [:] (94:17-94:18)
                    identifier [Headers] (94:19-94:26)
                    , [,] (94:26-94:27)
                    identifier [remixContext] (95:2-95:14)
                    : [:] (95:14-95:15)
                    identifier [EntryContext] (95:16-95:28)
                    ) [)] (96:0-96:1)
                    { [{] (96:2-96:3)
                    return [return] (97:2-97:8)
                    new [new] (97:9-97:12)
                    identifier [Promise] (97:13-97:20)
                    ( [(] (97:20-97:21)
                    ( [(] (97:21-97:22)
                    identifier [resolve] (97:22-97:29)
                    , [,] (97:29-97:30)
                    identifier [reject] (97:31-97:37)
                    ) [)] (97:37-97:38)
                  => [=>] (97:39-97:41)
                  statement_block [{
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  }] (97:42-138:3)
                    { [{] (97:42-97:43)
                    lexical_declaration [let shellRendered = false;] (98:4-98:30)
                      let [let] (98:4-98:7)
                      variable_declarator [shellRendered = false] (98:8-98:29)
                        identifier [shellRendered] (98:8-98:21)
                        = [=] (98:22-98:23)
                        false [false] (98:24-98:29)
                      ; [;] (98:29-98:30)
                    lexical_declaration [const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);] (99:4-137:35)
                      const [const] (99:4-99:9)
                      variable_declarator [{ pipe, abort } = renderToPipeableStream] (99:10-99:50)
                        object_pattern [{ pipe, abort }] (99:10-99:25)
                          { [{] (99:10-99:11)
                          shorthand_property_identifier_pattern [pipe] (99:12-99:16)
                          , [,] (99:16-99:17)
                          shorthand_property_identifier_pattern [abort] (99:18-99:23)
                          } [}] (99:24-99:25)
                        = [=] (99:26-99:27)
                        identifier [renderToPipeableStream] (99:28-99:50)
                      ERROR [(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY)] (99:50-137:34)
                        ( [(] (99:50-99:51)
                        type_parameters [<RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable] (100:6-109:57)
                          < [<] (100:6-100:7)
                          ERROR [RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();] (100:7-108:41)
                            nested_type_identifier [RemixServer
        context={remixContext}
        url={request.url] (100:7-102:24)
                              identifier [RemixServer] (100:7-100:18)
                              ERROR [context={remixContext}
        url={request] (101:8-102:20)
                                identifier [context] (101:8-101:15)
                                = [=] (101:15-101:16)
                                object_type [{remixContext}] (101:16-101:30)
                                  { [{] (101:16-101:17)
                                  property_signature [remixContext] (101:17-101:29)
                                    property_identifier [remixContext] (101:17-101:29)
                                  } [}] (101:29-101:30)
                                identifier [url] (102:8-102:11)
                                = [=] (102:11-102:12)
                                { [{] (102:12-102:13)
                                identifier [request] (102:13-102:20)
                              . [.] (102:20-102:21)
                              type_identifier [url] (102:21-102:24)
                            } [}] (102:24-102:25)
                            type_parameter [abortDelay={ABORT_DELAY}] (103:8-103:32)
                              type_identifier [abortDelay] (103:8-103:18)
                              default_type [={ABORT_DELAY}] (103:18-103:32)
                                = [=] (103:18-103:19)
                                object_type [{ABORT_DELAY}] (103:19-103:32)
                                  { [{] (103:19-103:20)
                                  property_signature [ABORT_DELAY] (103:20-103:31)
                                    property_identifier [ABORT_DELAY] (103:20-103:31)
                                  } [}] (103:31-103:32)
                            ERROR [/>] (104:6-104:8)
                              / [/] (104:6-104:7)
                              > [>] (104:7-104:8)
                            , [,] (104:8-104:9)
                            { [{] (105:6-105:7)
                            method_signature [onShellReady()] (106:8-106:22)
                              property_identifier [onShellReady] (106:8-106:20)
                              formal_parameters [()] (106:20-106:22)
                                ( [(] (106:20-106:21)
                                ) [)] (106:21-106:22)
                            { [{] (106:23-106:24)
                            property_identifier [shellRendered] (107:10-107:23)
                            = [=] (107:24-107:25)
                            literal_type [true] (107:26-107:30)
                              true [true] (107:26-107:30)
                            ; [;] (107:30-107:31)
                            const [const] (108:10-108:15)
                            identifier [body] (108:16-108:20)
                            = [=] (108:21-108:22)
                            new [new] (108:23-108:26)
                            ERROR [PassThrough] (108:27-108:38)
                              identifier [PassThrough] (108:27-108:38)
                            formal_parameters [()] (108:38-108:40)
                              ( [(] (108:38-108:39)
                              ) [)] (108:39-108:40)
                            ; [;] (108:40-108:41)
                          type_parameter [const stream = createReadableStreamFromReadable] (109:10-109:57)
                            const [const] (109:10-109:15)
                            type_identifier [stream] (109:16-109:22)
                            default_type [= createReadableStreamFromReadable] (109:23-109:57)
                              = [=] (109:23-109:24)
                              type_identifier [createReadableStreamFromReadable] (109:25-109:57)
                          > [] (109:57-109:57)
                        ERROR [(body);

          responseHeaders.set] (109:57-111:29)
                          formal_parameters [(body)] (109:57-109:63)
                            ( [(] (109:57-109:58)
                            required_parameter [body] (109:58-109:62)
                              identifier [body] (109:58-109:62)
                            ) [)] (109:62-109:63)
                          ; [;] (109:63-109:64)
                          identifier [responseHeaders] (111:10-111:25)
                          . [.] (111:25-111:26)
                          set [set] (111:26-111:29)
                        formal_parameters [("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    )] (111:29-135:5)
                          ( [(] (111:29-111:30)
                          required_parameter ["Content-Type"] (111:30-111:44)
                            non_null_expression ["Content-Type"] (111:30-111:44)
                              string ["Content-Type"] (111:30-111:44)
                                " ["] (111:30-111:31)
                                string_fragment [Content-Type] (111:31-111:43)
                                " ["] (111:43-111:44)
                              ! [] (111:44-111:44)
                          , [,] (111:44-111:45)
                          ERROR ["text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown)] (111:46-122:36)
                            string ["text/html"] (111:46-111:57)
                              " ["] (111:46-111:47)
                              string_fragment [text/html] (111:47-111:56)
                              " ["] (111:56-111:57)
                            ) [)] (111:57-111:58)
                            ; [;] (111:58-111:59)
                            call_expression [resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          )] (113:10-118:11)
                              identifier [resolve] (113:10-113:17)
                              arguments [(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          )] (113:17-118:11)
                                ( [(] (113:17-113:18)
                                new_expression [new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })] (114:12-117:14)
                                  new [new] (114:12-114:15)
                                  identifier [Response] (114:16-114:24)
                                  arguments [(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })] (114:24-117:14)
                                    ( [(] (114:24-114:25)
                                    identifier [stream] (114:25-114:31)
                                    , [,] (114:31-114:32)
                                    object [{
              headers: responseHeaders,
              status: responseStatusCode,
            }] (114:33-117:13)
                                      { [{] (114:33-114:34)
                                      pair [headers: responseHeaders] (115:14-115:38)
                                        property_identifier [headers] (115:14-115:21)
                                        : [:] (115:21-115:22)
                                        identifier [responseHeaders] (115:23-115:38)
                                      , [,] (115:38-115:39)
                                      pair [status: responseStatusCode] (116:14-116:40)
                                        property_identifier [status] (116:14-116:20)
                                        : [:] (116:20-116:21)
                                        identifier [responseStatusCode] (116:22-116:40)
                                      , [,] (116:40-116:41)
                                      } [}] (117:12-117:13)
                                    ) [)] (117:13-117:14)
                                ) [)] (118:10-118:11)
                            ; [;] (118:11-118:12)
                            call_expression [pipe(body)] (120:10-120:20)
                              identifier [pipe] (120:10-120:14)
                              arguments [(body)] (120:14-120:20)
                                ( [(] (120:14-120:15)
                                identifier [body] (120:15-120:19)
                                ) [)] (120:19-120:20)
                            ; [;] (120:20-120:21)
                            } [}] (121:8-121:9)
                            , [,] (121:9-121:10)
                            call_expression [onShellError(error: unknown)] (122:8-122:36)
                              identifier [onShellError] (122:8-122:20)
                              arguments [(error: unknown)] (122:20-122:36)
                                ( [(] (122:20-122:21)
                                identifier [error] (122:21-122:26)
                                ERROR [: unknown] (122:26-122:35)
                                  : [:] (122:26-122:27)
                                  unknown [unknown] (122:28-122:35)
                                ) [)] (122:35-122:36)
                          required_parameter [{
          reject(error);
        }] (122:37-124:9)
                            object_pattern [{
          reject(error);
        }] (122:37-124:9)
                              { [{] (122:37-122:38)
                              ERROR [reject(error);] (123:10-123:24)
                                property_identifier [reject] (123:10-123:16)
                                formal_parameters [(error)] (123:16-123:23)
                                  ( [(] (123:16-123:17)
                                  required_parameter [error] (123:17-123:22)
                                    identifier [error] (123:17-123:22)
                                  ) [)] (123:22-123:23)
                                ; [;] (123:23-123:24)
                              } [}] (124:8-124:9)
                          , [,] (124:9-124:10)
                          ERROR [onError(error: unknown)] (125:8-125:31)
                            call_expression [onError(error: unknown)] (125:8-125:31)
                              identifier [onError] (125:8-125:15)
                              arguments [(error: unknown)] (125:15-125:31)
                                ( [(] (125:15-125:16)
                                identifier [error] (125:16-125:21)
                                ERROR [: unknown] (125:21-125:30)
                                  : [:] (125:21-125:22)
                                  unknown [unknown] (125:23-125:30)
                                ) [)] (125:30-125:31)
                          required_parameter [{
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }] (125:32-132:11)
                            object_pattern [{
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }] (125:32-132:11)
                              { [{] (125:32-125:33)
                              object_assignment_pattern [responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error)] (126:10-131:32)
                                shorthand_property_identifier_pattern [responseStatusCode] (126:10-126:28)
                                = [=] (126:29-126:30)
                                call_expression [500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error)] (126:31-131:32)
                                  member_expression [500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error] (126:31-131:25)
                                    call_expression [500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered)] (126:31-130:28)
                                      number [500] (126:31-126:34)
                                      ERROR [;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if] (126:34-130:12)
                                        ; [;] (126:34-126:35)
                                        comment [// Log streaming rendering errors from inside the shell.  Don't log] (127:10-127:77)
                                        comment [// errors encountered during initial shell rendering since they'll] (128:10-128:76)
                                        comment [// reject and get logged in handleDocumentRequest.] (129:10-129:60)
                                        if [if] (130:10-130:12)
                                      arguments [(shellRendered)] (130:13-130:28)
                                        ( [(] (130:13-130:14)
                                        identifier [shellRendered] (130:14-130:27)
                                        ) [)] (130:27-130:28)
                                    ERROR [{
            console] (130:29-131:19)
                                      { [{] (130:29-130:30)
                                      identifier [console] (131:12-131:19)
                                    . [.] (131:19-131:20)
                                    property_identifier [error] (131:20-131:25)
                                  arguments [(error)] (131:25-131:32)
                                    ( [(] (131:25-131:26)
                                    identifier [error] (131:26-131:31)
                                    ) [)] (131:31-131:32)
                              ERROR [;] (131:32-131:33)
                                ; [;] (131:32-131:33)
                              } [}] (132:10-132:11)
                          ERROR [}] (133:8-133:9)
                            } [}] (133:8-133:9)
                          , [,] (133:9-133:10)
                          ERROR [}] (134:6-134:7)
                            } [}] (134:6-134:7)
                          ) [)] (135:4-135:5)
                        ; [;] (135:5-135:6)
                        identifier [setTimeout] (137:4-137:14)
                        ( [(] (137:14-137:15)
                        identifier [abort] (137:15-137:20)
                        , [,] (137:20-137:21)
                        identifier [ABORT_DELAY] (137:22-137:33)
                        ) [)] (137:33-137:34)
                      ; [;] (137:34-137:35)
                    } [}] (138:2-138:3)
                ) [)] (138:3-138:4)
          ; [;] (138:4-138:5)
        } [}] (139:0-139:1)
