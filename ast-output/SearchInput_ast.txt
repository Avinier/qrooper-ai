AST for temp_dir\ARTGuru-AI-main\app\components\UI\SearchInput.tsx
==================================================
ERROR [import { useState, useRef, useEffect } from 'react';
import { Search, ChevronLeft, ChevronRight, Send, Loader, Check } from 'lucide-react';


const SearchInput = ({ onSearchStart, onSearchComplete, searchCompleted }) => {
  const [isFocused, setIsFocused] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const scrollContainerRef = useRef(null);
  const scrollIntervalRef = useRef(null);
  const progressIntervalRef = useRef(null);
  
  const recommendations = [
    "Research about digital art trends",
    "Coffee shop social media strategy",
    "Yetis in Kailash marketing campaign",
    "Brand identity exploration",
    "Social media content calendar",
    "Marketing campaign analysis"
  ];

  const constructPrompt = (query) => {
    return `Analyze this query and provide market research insights: "${query}"

Please provide exactly:
- 3 pain points (labeled as PAIN:)
- 4 strategic recommendations (labeled as STRATEGY:)
- 3 psychological triggers (labeled as TRIGGER:)

Format your response exactly like these examples:

Example 1 - Coffee Shop:
PAIN: Long wait times during morning rush hours
PAIN: Inconsistent coffee quality between visits
PAIN: Limited healthy food options

STRATEGY: Implement mobile order-ahead system
STRATEGY: Deploy barista training program
STRATEGY: Expand healthy breakfast menu
STRATEGY: Partner with local nutritionists

TRIGGER: Fear of missing out on morning productivity
TRIGGER: Desire for a personalized experience
TRIGGER: Social status of being a regular

Example 2 - Fitness Tracker:
PAIN: Battery dies during workouts
PAIN: Inaccurate sleep tracking
PAIN: Syncing issues with phone

STRATEGY: Develop fast-charging technology
STRATEGY: Improve sleep algorithms
STRATEGY: Create seamless app integration
STRATEGY: Launch premium health insights

TRIGGER: Anxiety about missing fitness goals
TRIGGER: Need for validation of progress
TRIGGER: Competitive drive with friends

Now, generate insights for: "${query}"
Important: Use exactly the same format with PAIN:, STRATEGY:, and TRIGGER: labels, one item per line.`;
  };

  const transformResponse = (textResponse) => {
    // Parse the text response into structured data
    const pains = textResponse.match(/PAIN: .+/g)?.map(p => p.replace('PAIN: ', '')) || [];
    const strategies = textResponse.match(/STRATEGY: .+/g)?.map(s => s.replace('STRATEGY: ', '')) || [];
    const triggers = textResponse.match(/TRIGGER: .+/g)?.map(t => t.replace('TRIGGER: ', '')) || [];

    // Create the structured items array
    const items = [
      {
        id: 1,
        type: 'painPoints',
        height: 'h-64',
        width: 'col-span-2',
        data: pains.map((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))
      },
      {
        id: 2,
        type: 'strategic',
        height: 'h-[400px]',
        width: 'col-span-1',
        data: strategies.map((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))
      },
      {
        id: 3,
        type: 'triggers',
        height: 'min-h-72',
        width: 'col-span-3',
        data: triggers.map((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))
      }
    ];

    return { items };
  };

  const makeApiCall = async (query) => {
    try {
      const response = await fetch("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      });

      const data = await response.json();
      const textResponse = data.choices[0].message.content;
      
      console.log('Raw LLM Response:', textResponse);
      
      // Transform the text response into our structured format
      const structuredData = transformResponse(textResponse);
      console.log('Structured Data:', structuredData);
      
      return structuredData;
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      setIsLoading(true);
      onSearchStart?.();
      
      try {
        progressIntervalRef.current = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50);

        const result = await makeApiCall(searchQuery);
        console.log('Final structured data:', result);

        setProgress(100);
        setTimeout(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500);
      } catch (error) {
        setIsLoading(false);
        setProgress(0);
      }

      if (progressIntervalRef.current) {
        clearInterval(progressIntervalRef.current);
      }
    }
  };

  const scroll = (direction) => {
    const container = scrollContainerRef.current;
    if (!container) return;

    const scrollAmount = container.querySelector('button').offsetWidth + 16;
    const currentScroll = container.scrollLeft;
    const maxScroll = container.scrollWidth - container.clientWidth;
    
    let targetScroll = direction === 'left' 
      ? currentScroll - scrollAmount 
      : currentScroll + scrollAmount;

    if (targetScroll > maxScroll) targetScroll = 0;
    if (targetScroll < 0) targetScroll = maxScroll;

    container.scrollTo({
      left: targetScroll,
      behavior: 'smooth'
    });
  };

  useEffect(() => {
    const startAutoScroll = () => {
      scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000);
    };

    if (!isLoading) {
      startAutoScroll();
    }

    return () => {
      if (scrollIntervalRef.current) {
        clearInterval(scrollIntervalRef.current);
      }
    };
  }, [isPaused, isLoading]);

  return (
    <div className="w-full max-w-3xl mx-auto px-4 font-subheading">
      {/* Search Input Container */}
      <form 
        onSubmit={handleSubmit}
        className={`
          relative
          backdrop-blur-xl
          bg-white/35
          rounded-xl
          border
          border-white/40
          transition-all
          duration-500
          before:absolute
          before:inset-0
          before:backdrop-blur-xl
          before:bg-white/5
          before:rounded-xl
          before:-z-10
          ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
        `}
      >
        <div className="flex items-center px-6 py-4">
          <Search className={`w-6 h-6 text-white ${isLoading ? 'animate-pulse' : ''}`} />
          <input
            type="text"
            placeholder="What would you like to explore?"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            disabled={searchCompleted}
            className="
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
          />
          <button 
            type="submit"
            className="
              ml-4
              p-1.5
              rounded-full
              bg-white/10
              border
              border-white/20
              transition-all
              duration-300
              hover:bg-white/20
              hover:border-white/30
              hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
              group
              disabled:opacity-50
              disabled:cursor-not-allowed
            "
            disabled={!searchQuery.trim() || isLoading}
          >
            {!searchCompleted && <Send 
              className={`
                w-5 
                h-5 
                text-white 
                group-hover:text-grey/70 
                transition-colors 
                duration-300
                ${isLoading ? 'animate-pulse' : ''}
              `}
            />}
          </button>
        </div>
      </form>

      {/* Loading Progress */}
      {isLoading && (
        <div className="mt-8 space-y-6">
          <div className="backdrop-blur-xl bg-white/20 border border-white/40 rounded-xl shadow-[0_0_30px_rgba(255,255,255,0.2)]">
            <div className="p-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-lg font-medium text-grey">Processing Query...</span>
                  <Loader className="w-6 h-6 animate-spin text-grey" />
                </div>

                <div className="relative w-full h-2 bg-white/10 rounded-full overflow-hidden">
                  <div 
                    className="absolute top-0 left-0 h-full bg-white rounded-full transition-all duration-300 shadow-[0_0_20px_rgba(255,255,255,0.7)] animate-pulse"
                    style={{ width: `${progress}%` }}
                  />
                </div>

                <div className="grid grid-cols-3 gap-4 text-sm text-grey">
                  <div className="flex items-center gap-2">
                    {progress > 33 ? (
                      <Check className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]" />
                    ) : (
                      <Loader className="w-4 h-4 animate-spin text-grey" />
                    )}
                    Analyzing Query
                  </div>
                  <div className="flex items-center gap-2">
                    {progress > 66 ? (
                      <Check className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]" />
                    ) : (
                      <Loader className="w-4 h-4 animate-spin text-grey" />
                    )}
                    Processing
                  </div>
                  <div className="flex items-center gap-2">
                    {progress > 90 ? (
                      <Check className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]" />
                    ) : (
                      <Loader className="w-4 h-4 animate-spin text-grey" />
                    )}
                    Generating Response
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Recommendations Carousel */}
      {!searchCompleted && !isLoading && (
        <div 
          className="mt-6 relative"
          onMouseEnter={() => setIsPaused(true)}
          onMouseLeave={() => setIsPaused(false)}
        >
          <button
            onClick={() => scroll('left')}
            className="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 z-10
              w-8 h-8 rounded-full bg-white/10 backdrop-blur-lg border border-white/20
              flex items-center justify-center
              transition-all duration-300
              hover:bg-white/20 hover:border-white/30
              disabled:opacity-0 disabled:pointer-events-none"
          >
            <ChevronLeft className="w-4 h-4 text-grey/50" />
          </button>

          <div
            ref={scrollContainerRef}
            className="flex items-center gap-4 overflow-x-hidden scroll-smooth mx-8"
          >
            {[...recommendations, ...recommendations].map((recommendation, index) => (
              <button
                key={index}
                onClick={() => setSearchQuery(recommendation)}
                className="
                  whitespace-nowrap
                  px-6
                  py-2.5
                  rounded-full
                  backdrop-blur-lg
                  bg-white/10
                  border
                  border-white/20
                  text-grey/50
                  text-sm
                  transition-all
                  duration-300
                  hover:bg-white/20
                  hover:border-white/30
                  hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
                  flex-shrink-0
                "
              >
                {recommendation}
              </button>
            ))}
          </div>

          <button
            onClick={() => scroll('right')}
            className="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 z-10
              w-8 h-8 rounded-full bg-white/10 backdrop-blur-lg border border-white/20
              flex items-center justify-center
              transition-all duration-300
              hover:bg-white/20 hover:border-white/30
              disabled:opacity-0 disabled:pointer-events-none"
          >
            <ChevronRight className="w-4 h-4 text-grey/50" />
          </button>
        </div>
      )}
    </div>
  );
};

export default SearchInput;] (0:0-431:27)
  import_statement [import { useState, useRef, useEffect } from 'react';] (0:0-0:52)
    import [import] (0:0-0:6)
    import_clause [{ useState, useRef, useEffect }] (0:7-0:38)
      named_imports [{ useState, useRef, useEffect }] (0:7-0:38)
        { [{] (0:7-0:8)
        import_specifier [useState] (0:9-0:17)
          identifier [useState] (0:9-0:17)
        , [,] (0:17-0:18)
        import_specifier [useRef] (0:19-0:25)
          identifier [useRef] (0:19-0:25)
        , [,] (0:25-0:26)
        import_specifier [useEffect] (0:27-0:36)
          identifier [useEffect] (0:27-0:36)
        } [}] (0:37-0:38)
    from [from] (0:39-0:43)
    string ['react'] (0:44-0:51)
      ' ['] (0:44-0:45)
      string_fragment [react] (0:45-0:50)
      ' ['] (0:50-0:51)
    ; [;] (0:51-0:52)
  import_statement [import { Search, ChevronLeft, ChevronRight, Send, Loader, Check } from 'lucide-react';] (1:0-1:86)
    import [import] (1:0-1:6)
    import_clause [{ Search, ChevronLeft, ChevronRight, Send, Loader, Check }] (1:7-1:65)
      named_imports [{ Search, ChevronLeft, ChevronRight, Send, Loader, Check }] (1:7-1:65)
        { [{] (1:7-1:8)
        import_specifier [Search] (1:9-1:15)
          identifier [Search] (1:9-1:15)
        , [,] (1:15-1:16)
        import_specifier [ChevronLeft] (1:17-1:28)
          identifier [ChevronLeft] (1:17-1:28)
        , [,] (1:28-1:29)
        import_specifier [ChevronRight] (1:30-1:42)
          identifier [ChevronRight] (1:30-1:42)
        , [,] (1:42-1:43)
        import_specifier [Send] (1:44-1:48)
          identifier [Send] (1:44-1:48)
        , [,] (1:48-1:49)
        import_specifier [Loader] (1:50-1:56)
          identifier [Loader] (1:50-1:56)
        , [,] (1:56-1:57)
        import_specifier [Check] (1:58-1:63)
          identifier [Check] (1:58-1:63)
        } [}] (1:64-1:65)
    from [from] (1:66-1:70)
    string ['lucide-react'] (1:71-1:85)
      ' ['] (1:71-1:72)
      string_fragment [lucide-react] (1:72-1:84)
      ' ['] (1:84-1:85)
    ; [;] (1:85-1:86)
  const [const] (4:0-4:5)
  identifier [SearchInput] (4:6-4:17)
  = [=] (4:18-4:19)
  formal_parameters [({ onSearchStart, onSearchComplete, searchCompleted })] (4:20-4:74)
    ( [(] (4:20-4:21)
    required_parameter [{ onSearchStart, onSearchComplete, searchCompleted }] (4:21-4:73)
      object_pattern [{ onSearchStart, onSearchComplete, searchCompleted }] (4:21-4:73)
        { [{] (4:21-4:22)
        shorthand_property_identifier_pattern [onSearchStart] (4:23-4:36)
        , [,] (4:36-4:37)
        shorthand_property_identifier_pattern [onSearchComplete] (4:38-4:54)
        , [,] (4:54-4:55)
        shorthand_property_identifier_pattern [searchCompleted] (4:56-4:71)
        } [}] (4:72-4:73)
    ) [)] (4:73-4:74)
  => [=>] (4:75-4:77)
  { [{] (4:78-4:79)
  lexical_declaration [const [isFocused, setIsFocused] = useState(false);] (5:2-5:52)
    const [const] (5:2-5:7)
    variable_declarator [[isFocused, setIsFocused] = useState(false)] (5:8-5:51)
      array_pattern [[isFocused, setIsFocused]] (5:8-5:33)
        [ [[] (5:8-5:9)
        identifier [isFocused] (5:9-5:18)
        , [,] (5:18-5:19)
        identifier [setIsFocused] (5:20-5:32)
        ] []] (5:32-5:33)
      = [=] (5:34-5:35)
      call_expression [useState(false)] (5:36-5:51)
        identifier [useState] (5:36-5:44)
        arguments [(false)] (5:44-5:51)
          ( [(] (5:44-5:45)
          false [false] (5:45-5:50)
          ) [)] (5:50-5:51)
    ; [;] (5:51-5:52)
  lexical_declaration [const [isPaused, setIsPaused] = useState(false);] (6:2-6:50)
    const [const] (6:2-6:7)
    variable_declarator [[isPaused, setIsPaused] = useState(false)] (6:8-6:49)
      array_pattern [[isPaused, setIsPaused]] (6:8-6:31)
        [ [[] (6:8-6:9)
        identifier [isPaused] (6:9-6:17)
        , [,] (6:17-6:18)
        identifier [setIsPaused] (6:19-6:30)
        ] []] (6:30-6:31)
      = [=] (6:32-6:33)
      call_expression [useState(false)] (6:34-6:49)
        identifier [useState] (6:34-6:42)
        arguments [(false)] (6:42-6:49)
          ( [(] (6:42-6:43)
          false [false] (6:43-6:48)
          ) [)] (6:48-6:49)
    ; [;] (6:49-6:50)
  lexical_declaration [const [searchQuery, setSearchQuery] = useState('');] (7:2-7:53)
    const [const] (7:2-7:7)
    variable_declarator [[searchQuery, setSearchQuery] = useState('')] (7:8-7:52)
      array_pattern [[searchQuery, setSearchQuery]] (7:8-7:37)
        [ [[] (7:8-7:9)
        identifier [searchQuery] (7:9-7:20)
        , [,] (7:20-7:21)
        identifier [setSearchQuery] (7:22-7:36)
        ] []] (7:36-7:37)
      = [=] (7:38-7:39)
      call_expression [useState('')] (7:40-7:52)
        identifier [useState] (7:40-7:48)
        arguments [('')] (7:48-7:52)
          ( [(] (7:48-7:49)
          string [''] (7:49-7:51)
            ' ['] (7:49-7:50)
            ' ['] (7:50-7:51)
          ) [)] (7:51-7:52)
    ; [;] (7:52-7:53)
  lexical_declaration [const [isLoading, setIsLoading] = useState(false);] (8:2-8:52)
    const [const] (8:2-8:7)
    variable_declarator [[isLoading, setIsLoading] = useState(false)] (8:8-8:51)
      array_pattern [[isLoading, setIsLoading]] (8:8-8:33)
        [ [[] (8:8-8:9)
        identifier [isLoading] (8:9-8:18)
        , [,] (8:18-8:19)
        identifier [setIsLoading] (8:20-8:32)
        ] []] (8:32-8:33)
      = [=] (8:34-8:35)
      call_expression [useState(false)] (8:36-8:51)
        identifier [useState] (8:36-8:44)
        arguments [(false)] (8:44-8:51)
          ( [(] (8:44-8:45)
          false [false] (8:45-8:50)
          ) [)] (8:50-8:51)
    ; [;] (8:51-8:52)
  lexical_declaration [const [progress, setProgress] = useState(0);] (9:2-9:46)
    const [const] (9:2-9:7)
    variable_declarator [[progress, setProgress] = useState(0)] (9:8-9:45)
      array_pattern [[progress, setProgress]] (9:8-9:31)
        [ [[] (9:8-9:9)
        identifier [progress] (9:9-9:17)
        , [,] (9:17-9:18)
        identifier [setProgress] (9:19-9:30)
        ] []] (9:30-9:31)
      = [=] (9:32-9:33)
      call_expression [useState(0)] (9:34-9:45)
        identifier [useState] (9:34-9:42)
        arguments [(0)] (9:42-9:45)
          ( [(] (9:42-9:43)
          number [0] (9:43-9:44)
          ) [)] (9:44-9:45)
    ; [;] (9:45-9:46)
  lexical_declaration [const scrollContainerRef = useRef(null);] (10:2-10:42)
    const [const] (10:2-10:7)
    variable_declarator [scrollContainerRef = useRef(null)] (10:8-10:41)
      identifier [scrollContainerRef] (10:8-10:26)
      = [=] (10:27-10:28)
      call_expression [useRef(null)] (10:29-10:41)
        identifier [useRef] (10:29-10:35)
        arguments [(null)] (10:35-10:41)
          ( [(] (10:35-10:36)
          null [null] (10:36-10:40)
          ) [)] (10:40-10:41)
    ; [;] (10:41-10:42)
  lexical_declaration [const scrollIntervalRef = useRef(null);] (11:2-11:41)
    const [const] (11:2-11:7)
    variable_declarator [scrollIntervalRef = useRef(null)] (11:8-11:40)
      identifier [scrollIntervalRef] (11:8-11:25)
      = [=] (11:26-11:27)
      call_expression [useRef(null)] (11:28-11:40)
        identifier [useRef] (11:28-11:34)
        arguments [(null)] (11:34-11:40)
          ( [(] (11:34-11:35)
          null [null] (11:35-11:39)
          ) [)] (11:39-11:40)
    ; [;] (11:40-11:41)
  lexical_declaration [const progressIntervalRef = useRef(null);] (12:2-12:43)
    const [const] (12:2-12:7)
    variable_declarator [progressIntervalRef = useRef(null)] (12:8-12:42)
      identifier [progressIntervalRef] (12:8-12:27)
      = [=] (12:28-12:29)
      call_expression [useRef(null)] (12:30-12:42)
        identifier [useRef] (12:30-12:36)
        arguments [(null)] (12:36-12:42)
          ( [(] (12:36-12:37)
          null [null] (12:37-12:41)
          ) [)] (12:41-12:42)
    ; [;] (12:42-12:43)
  lexical_declaration [const recommendations = [
    "Research about digital art trends",
    "Coffee shop social media strategy",
    "Yetis in Kailash marketing campaign",
    "Brand identity exploration",
    "Social media content calendar",
    "Marketing campaign analysis"
  ];] (14:2-21:4)
    const [const] (14:2-14:7)
    variable_declarator [recommendations = [
    "Research about digital art trends",
    "Coffee shop social media strategy",
    "Yetis in Kailash marketing campaign",
    "Brand identity exploration",
    "Social media content calendar",
    "Marketing campaign analysis"
  ]] (14:8-21:3)
      identifier [recommendations] (14:8-14:23)
      = [=] (14:24-14:25)
      array [[
    "Research about digital art trends",
    "Coffee shop social media strategy",
    "Yetis in Kailash marketing campaign",
    "Brand identity exploration",
    "Social media content calendar",
    "Marketing campaign analysis"
  ]] (14:26-21:3)
        [ [[] (14:26-14:27)
        string ["Research about digital art trends"] (15:4-15:39)
          " ["] (15:4-15:5)
          string_fragment [Research about digital art trends] (15:5-15:38)
          " ["] (15:38-15:39)
        , [,] (15:39-15:40)
        string ["Coffee shop social media strategy"] (16:4-16:39)
          " ["] (16:4-16:5)
          string_fragment [Coffee shop social media strategy] (16:5-16:38)
          " ["] (16:38-16:39)
        , [,] (16:39-16:40)
        string ["Yetis in Kailash marketing campaign"] (17:4-17:41)
          " ["] (17:4-17:5)
          string_fragment [Yetis in Kailash marketing campaign] (17:5-17:40)
          " ["] (17:40-17:41)
        , [,] (17:41-17:42)
        string ["Brand identity exploration"] (18:4-18:32)
          " ["] (18:4-18:5)
          string_fragment [Brand identity exploration] (18:5-18:31)
          " ["] (18:31-18:32)
        , [,] (18:32-18:33)
        string ["Social media content calendar"] (19:4-19:35)
          " ["] (19:4-19:5)
          string_fragment [Social media content calendar] (19:5-19:34)
          " ["] (19:34-19:35)
        , [,] (19:35-19:36)
        string ["Marketing campaign analysis"] (20:4-20:33)
          " ["] (20:4-20:5)
          string_fragment [Marketing campaign analysis] (20:5-20:32)
          " ["] (20:32-20:33)
        ] []] (21:2-21:3)
    ; [;] (21:3-21:4)
  lexical_declaration [const constructPrompt = (query) => {
    return `Analyze this query and provide market research insights: "${query}"

Please provide exactly:
- 3 pain points (labeled as PAIN:)
- 4 strategic recommendations (labeled as STRATEGY:)
- 3 psychological triggers (labeled as TRIGGER:)

Format your response exactly like these examples:

Example 1 - Coffee Shop:
PAIN: Long wait times during morning rush hours
PAIN: Inconsistent coffee quality between visits
PAIN: Limited healthy food options

STRATEGY: Implement mobile order-ahead system
STRATEGY: Deploy barista training program
STRATEGY: Expand healthy breakfast menu
STRATEGY: Partner with local nutritionists

TRIGGER: Fear of missing out on morning productivity
TRIGGER: Desire for a personalized experience
TRIGGER: Social status of being a regular

Example 2 - Fitness Tracker:
PAIN: Battery dies during workouts
PAIN: Inaccurate sleep tracking
PAIN: Syncing issues with phone

STRATEGY: Develop fast-charging technology
STRATEGY: Improve sleep algorithms
STRATEGY: Create seamless app integration
STRATEGY: Launch premium health insights

TRIGGER: Anxiety about missing fitness goals
TRIGGER: Need for validation of progress
TRIGGER: Competitive drive with friends

Now, generate insights for: "${query}"
Important: Use exactly the same format with PAIN:, STRATEGY:, and TRIGGER: labels, one item per line.`;
  };] (23:2-63:4)
    const [const] (23:2-23:7)
    variable_declarator [constructPrompt = (query) => {
    return `Analyze this query and provide market research insights: "${query}"

Please provide exactly:
- 3 pain points (labeled as PAIN:)
- 4 strategic recommendations (labeled as STRATEGY:)
- 3 psychological triggers (labeled as TRIGGER:)

Format your response exactly like these examples:

Example 1 - Coffee Shop:
PAIN: Long wait times during morning rush hours
PAIN: Inconsistent coffee quality between visits
PAIN: Limited healthy food options

STRATEGY: Implement mobile order-ahead system
STRATEGY: Deploy barista training program
STRATEGY: Expand healthy breakfast menu
STRATEGY: Partner with local nutritionists

TRIGGER: Fear of missing out on morning productivity
TRIGGER: Desire for a personalized experience
TRIGGER: Social status of being a regular

Example 2 - Fitness Tracker:
PAIN: Battery dies during workouts
PAIN: Inaccurate sleep tracking
PAIN: Syncing issues with phone

STRATEGY: Develop fast-charging technology
STRATEGY: Improve sleep algorithms
STRATEGY: Create seamless app integration
STRATEGY: Launch premium health insights

TRIGGER: Anxiety about missing fitness goals
TRIGGER: Need for validation of progress
TRIGGER: Competitive drive with friends

Now, generate insights for: "${query}"
Important: Use exactly the same format with PAIN:, STRATEGY:, and TRIGGER: labels, one item per line.`;
  }] (23:8-63:3)
      identifier [constructPrompt] (23:8-23:23)
      = [=] (23:24-23:25)
      arrow_function [(query) => {
    return `Analyze this query and provide market research insights: "${query}"

Please provide exactly:
- 3 pain points (labeled as PAIN:)
- 4 strategic recommendations (labeled as STRATEGY:)
- 3 psychological triggers (labeled as TRIGGER:)

Format your response exactly like these examples:

Example 1 - Coffee Shop:
PAIN: Long wait times during morning rush hours
PAIN: Inconsistent coffee quality between visits
PAIN: Limited healthy food options

STRATEGY: Implement mobile order-ahead system
STRATEGY: Deploy barista training program
STRATEGY: Expand healthy breakfast menu
STRATEGY: Partner with local nutritionists

TRIGGER: Fear of missing out on morning productivity
TRIGGER: Desire for a personalized experience
TRIGGER: Social status of being a regular

Example 2 - Fitness Tracker:
PAIN: Battery dies during workouts
PAIN: Inaccurate sleep tracking
PAIN: Syncing issues with phone

STRATEGY: Develop fast-charging technology
STRATEGY: Improve sleep algorithms
STRATEGY: Create seamless app integration
STRATEGY: Launch premium health insights

TRIGGER: Anxiety about missing fitness goals
TRIGGER: Need for validation of progress
TRIGGER: Competitive drive with friends

Now, generate insights for: "${query}"
Important: Use exactly the same format with PAIN:, STRATEGY:, and TRIGGER: labels, one item per line.`;
  }] (23:26-63:3)
        formal_parameters [(query)] (23:26-23:33)
          ( [(] (23:26-23:27)
          required_parameter [query] (23:27-23:32)
            identifier [query] (23:27-23:32)
          ) [)] (23:32-23:33)
        => [=>] (23:34-23:36)
        statement_block [{
    return `Analyze this query and provide market research insights: "${query}"

Please provide exactly:
- 3 pain points (labeled as PAIN:)
- 4 strategic recommendations (labeled as STRATEGY:)
- 3 psychological triggers (labeled as TRIGGER:)

Format your response exactly like these examples:

Example 1 - Coffee Shop:
PAIN: Long wait times during morning rush hours
PAIN: Inconsistent coffee quality between visits
PAIN: Limited healthy food options

STRATEGY: Implement mobile order-ahead system
STRATEGY: Deploy barista training program
STRATEGY: Expand healthy breakfast menu
STRATEGY: Partner with local nutritionists

TRIGGER: Fear of missing out on morning productivity
TRIGGER: Desire for a personalized experience
TRIGGER: Social status of being a regular

Example 2 - Fitness Tracker:
PAIN: Battery dies during workouts
PAIN: Inaccurate sleep tracking
PAIN: Syncing issues with phone

STRATEGY: Develop fast-charging technology
STRATEGY: Improve sleep algorithms
STRATEGY: Create seamless app integration
STRATEGY: Launch premium health insights

TRIGGER: Anxiety about missing fitness goals
TRIGGER: Need for validation of progress
TRIGGER: Competitive drive with friends

Now, generate insights for: "${query}"
Important: Use exactly the same format with PAIN:, STRATEGY:, and TRIGGER: labels, one item per line.`;
  }] (23:37-63:3)
          { [{] (23:37-23:38)
          return_statement [return `Analyze this query and provide market research insights: "${query}"

Please provide exactly:
- 3 pain points (labeled as PAIN:)
- 4 strategic recommendations (labeled as STRATEGY:)
- 3 psychological triggers (labeled as TRIGGER:)

Format your response exactly like these examples:

Example 1 - Coffee Shop:
PAIN: Long wait times during morning rush hours
PAIN: Inconsistent coffee quality between visits
PAIN: Limited healthy food options

STRATEGY: Implement mobile order-ahead system
STRATEGY: Deploy barista training program
STRATEGY: Expand healthy breakfast menu
STRATEGY: Partner with local nutritionists

TRIGGER: Fear of missing out on morning productivity
TRIGGER: Desire for a personalized experience
TRIGGER: Social status of being a regular

Example 2 - Fitness Tracker:
PAIN: Battery dies during workouts
PAIN: Inaccurate sleep tracking
PAIN: Syncing issues with phone

STRATEGY: Develop fast-charging technology
STRATEGY: Improve sleep algorithms
STRATEGY: Create seamless app integration
STRATEGY: Launch premium health insights

TRIGGER: Anxiety about missing fitness goals
TRIGGER: Need for validation of progress
TRIGGER: Competitive drive with friends

Now, generate insights for: "${query}"
Important: Use exactly the same format with PAIN:, STRATEGY:, and TRIGGER: labels, one item per line.`;] (24:4-62:103)
            return [return] (24:4-24:10)
            template_string [`Analyze this query and provide market research insights: "${query}"

Please provide exactly:
- 3 pain points (labeled as PAIN:)
- 4 strategic recommendations (labeled as STRATEGY:)
- 3 psychological triggers (labeled as TRIGGER:)

Format your response exactly like these examples:

Example 1 - Coffee Shop:
PAIN: Long wait times during morning rush hours
PAIN: Inconsistent coffee quality between visits
PAIN: Limited healthy food options

STRATEGY: Implement mobile order-ahead system
STRATEGY: Deploy barista training program
STRATEGY: Expand healthy breakfast menu
STRATEGY: Partner with local nutritionists

TRIGGER: Fear of missing out on morning productivity
TRIGGER: Desire for a personalized experience
TRIGGER: Social status of being a regular

Example 2 - Fitness Tracker:
PAIN: Battery dies during workouts
PAIN: Inaccurate sleep tracking
PAIN: Syncing issues with phone

STRATEGY: Develop fast-charging technology
STRATEGY: Improve sleep algorithms
STRATEGY: Create seamless app integration
STRATEGY: Launch premium health insights

TRIGGER: Anxiety about missing fitness goals
TRIGGER: Need for validation of progress
TRIGGER: Competitive drive with friends

Now, generate insights for: "${query}"
Important: Use exactly the same format with PAIN:, STRATEGY:, and TRIGGER: labels, one item per line.`] (24:11-62:102)
              ` [`] (24:11-24:12)
              template_substitution [${query}] (24:70-24:78)
                ${ [${] (24:70-24:72)
                identifier [query] (24:72-24:77)
                } [}] (24:77-24:78)
              template_substitution [${query}] (61:29-61:37)
                ${ [${] (61:29-61:31)
                identifier [query] (61:31-61:36)
                } [}] (61:36-61:37)
              ` [`] (62:101-62:102)
            ; [;] (62:102-62:103)
          } [}] (63:2-63:3)
    ; [;] (63:3-63:4)
  lexical_declaration [const transformResponse = (textResponse) => {
    // Parse the text response into structured data
    const pains = textResponse.match(/PAIN: .+/g)?.map(p => p.replace('PAIN: ', '')) || [];
    const strategies = textResponse.match(/STRATEGY: .+/g)?.map(s => s.replace('STRATEGY: ', '')) || [];
    const triggers = textResponse.match(/TRIGGER: .+/g)?.map(t => t.replace('TRIGGER: ', '')) || [];

    // Create the structured items array
    const items = [
      {
        id: 1,
        type: 'painPoints',
        height: 'h-64',
        width: 'col-span-2',
        data: pains.map((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))
      },
      {
        id: 2,
        type: 'strategic',
        height: 'h-[400px]',
        width: 'col-span-1',
        data: strategies.map((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))
      },
      {
        id: 3,
        type: 'triggers',
        height: 'min-h-72',
        width: 'col-span-3',
        data: triggers.map((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))
      }
    ];

    return { items };
  };] (65:2-111:4)
    const [const] (65:2-65:7)
    variable_declarator [transformResponse = (textResponse) => {
    // Parse the text response into structured data
    const pains = textResponse.match(/PAIN: .+/g)?.map(p => p.replace('PAIN: ', '')) || [];
    const strategies = textResponse.match(/STRATEGY: .+/g)?.map(s => s.replace('STRATEGY: ', '')) || [];
    const triggers = textResponse.match(/TRIGGER: .+/g)?.map(t => t.replace('TRIGGER: ', '')) || [];

    // Create the structured items array
    const items = [
      {
        id: 1,
        type: 'painPoints',
        height: 'h-64',
        width: 'col-span-2',
        data: pains.map((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))
      },
      {
        id: 2,
        type: 'strategic',
        height: 'h-[400px]',
        width: 'col-span-1',
        data: strategies.map((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))
      },
      {
        id: 3,
        type: 'triggers',
        height: 'min-h-72',
        width: 'col-span-3',
        data: triggers.map((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))
      }
    ];

    return { items };
  }] (65:8-111:3)
      identifier [transformResponse] (65:8-65:25)
      = [=] (65:26-65:27)
      arrow_function [(textResponse) => {
    // Parse the text response into structured data
    const pains = textResponse.match(/PAIN: .+/g)?.map(p => p.replace('PAIN: ', '')) || [];
    const strategies = textResponse.match(/STRATEGY: .+/g)?.map(s => s.replace('STRATEGY: ', '')) || [];
    const triggers = textResponse.match(/TRIGGER: .+/g)?.map(t => t.replace('TRIGGER: ', '')) || [];

    // Create the structured items array
    const items = [
      {
        id: 1,
        type: 'painPoints',
        height: 'h-64',
        width: 'col-span-2',
        data: pains.map((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))
      },
      {
        id: 2,
        type: 'strategic',
        height: 'h-[400px]',
        width: 'col-span-1',
        data: strategies.map((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))
      },
      {
        id: 3,
        type: 'triggers',
        height: 'min-h-72',
        width: 'col-span-3',
        data: triggers.map((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))
      }
    ];

    return { items };
  }] (65:28-111:3)
        formal_parameters [(textResponse)] (65:28-65:42)
          ( [(] (65:28-65:29)
          required_parameter [textResponse] (65:29-65:41)
            identifier [textResponse] (65:29-65:41)
          ) [)] (65:41-65:42)
        => [=>] (65:43-65:45)
        statement_block [{
    // Parse the text response into structured data
    const pains = textResponse.match(/PAIN: .+/g)?.map(p => p.replace('PAIN: ', '')) || [];
    const strategies = textResponse.match(/STRATEGY: .+/g)?.map(s => s.replace('STRATEGY: ', '')) || [];
    const triggers = textResponse.match(/TRIGGER: .+/g)?.map(t => t.replace('TRIGGER: ', '')) || [];

    // Create the structured items array
    const items = [
      {
        id: 1,
        type: 'painPoints',
        height: 'h-64',
        width: 'col-span-2',
        data: pains.map((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))
      },
      {
        id: 2,
        type: 'strategic',
        height: 'h-[400px]',
        width: 'col-span-1',
        data: strategies.map((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))
      },
      {
        id: 3,
        type: 'triggers',
        height: 'min-h-72',
        width: 'col-span-3',
        data: triggers.map((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))
      }
    ];

    return { items };
  }] (65:46-111:3)
          { [{] (65:46-65:47)
          comment [// Parse the text response into structured data] (66:4-66:51)
          lexical_declaration [const pains = textResponse.match(/PAIN: .+/g)?.map(p => p.replace('PAIN: ', '')) || [];] (67:4-67:91)
            const [const] (67:4-67:9)
            variable_declarator [pains = textResponse.match(/PAIN: .+/g)?.map(p => p.replace('PAIN: ', '')) || []] (67:10-67:90)
              identifier [pains] (67:10-67:15)
              = [=] (67:16-67:17)
              binary_expression [textResponse.match(/PAIN: .+/g)?.map(p => p.replace('PAIN: ', '')) || []] (67:18-67:90)
                call_expression [textResponse.match(/PAIN: .+/g)?.map(p => p.replace('PAIN: ', ''))] (67:18-67:84)
                  member_expression [textResponse.match(/PAIN: .+/g)?.map] (67:18-67:54)
                    call_expression [textResponse.match(/PAIN: .+/g)] (67:18-67:49)
                      member_expression [textResponse.match] (67:18-67:36)
                        identifier [textResponse] (67:18-67:30)
                        . [.] (67:30-67:31)
                        property_identifier [match] (67:31-67:36)
                      arguments [(/PAIN: .+/g)] (67:36-67:49)
                        ( [(] (67:36-67:37)
                        regex [/PAIN: .+/g] (67:37-67:48)
                          / [/] (67:37-67:38)
                          regex_pattern [PAIN: .+] (67:38-67:46)
                          / [/] (67:46-67:47)
                          regex_flags [g] (67:47-67:48)
                        ) [)] (67:48-67:49)
                    optional_chain [?.] (67:49-67:51)
                      ?. [?.] (67:49-67:51)
                    property_identifier [map] (67:51-67:54)
                  arguments [(p => p.replace('PAIN: ', ''))] (67:54-67:84)
                    ( [(] (67:54-67:55)
                    arrow_function [p => p.replace('PAIN: ', '')] (67:55-67:83)
                      identifier [p] (67:55-67:56)
                      => [=>] (67:57-67:59)
                      call_expression [p.replace('PAIN: ', '')] (67:60-67:83)
                        member_expression [p.replace] (67:60-67:69)
                          identifier [p] (67:60-67:61)
                          . [.] (67:61-67:62)
                          property_identifier [replace] (67:62-67:69)
                        arguments [('PAIN: ', '')] (67:69-67:83)
                          ( [(] (67:69-67:70)
                          string ['PAIN: '] (67:70-67:78)
                            ' ['] (67:70-67:71)
                            string_fragment [PAIN: ] (67:71-67:77)
                            ' ['] (67:77-67:78)
                          , [,] (67:78-67:79)
                          string [''] (67:80-67:82)
                            ' ['] (67:80-67:81)
                            ' ['] (67:81-67:82)
                          ) [)] (67:82-67:83)
                    ) [)] (67:83-67:84)
                || [||] (67:85-67:87)
                array [[]] (67:88-67:90)
                  [ [[] (67:88-67:89)
                  ] []] (67:89-67:90)
            ; [;] (67:90-67:91)
          lexical_declaration [const strategies = textResponse.match(/STRATEGY: .+/g)?.map(s => s.replace('STRATEGY: ', '')) || [];] (68:4-68:104)
            const [const] (68:4-68:9)
            variable_declarator [strategies = textResponse.match(/STRATEGY: .+/g)?.map(s => s.replace('STRATEGY: ', '')) || []] (68:10-68:103)
              identifier [strategies] (68:10-68:20)
              = [=] (68:21-68:22)
              binary_expression [textResponse.match(/STRATEGY: .+/g)?.map(s => s.replace('STRATEGY: ', '')) || []] (68:23-68:103)
                call_expression [textResponse.match(/STRATEGY: .+/g)?.map(s => s.replace('STRATEGY: ', ''))] (68:23-68:97)
                  member_expression [textResponse.match(/STRATEGY: .+/g)?.map] (68:23-68:63)
                    call_expression [textResponse.match(/STRATEGY: .+/g)] (68:23-68:58)
                      member_expression [textResponse.match] (68:23-68:41)
                        identifier [textResponse] (68:23-68:35)
                        . [.] (68:35-68:36)
                        property_identifier [match] (68:36-68:41)
                      arguments [(/STRATEGY: .+/g)] (68:41-68:58)
                        ( [(] (68:41-68:42)
                        regex [/STRATEGY: .+/g] (68:42-68:57)
                          / [/] (68:42-68:43)
                          regex_pattern [STRATEGY: .+] (68:43-68:55)
                          / [/] (68:55-68:56)
                          regex_flags [g] (68:56-68:57)
                        ) [)] (68:57-68:58)
                    optional_chain [?.] (68:58-68:60)
                      ?. [?.] (68:58-68:60)
                    property_identifier [map] (68:60-68:63)
                  arguments [(s => s.replace('STRATEGY: ', ''))] (68:63-68:97)
                    ( [(] (68:63-68:64)
                    arrow_function [s => s.replace('STRATEGY: ', '')] (68:64-68:96)
                      identifier [s] (68:64-68:65)
                      => [=>] (68:66-68:68)
                      call_expression [s.replace('STRATEGY: ', '')] (68:69-68:96)
                        member_expression [s.replace] (68:69-68:78)
                          identifier [s] (68:69-68:70)
                          . [.] (68:70-68:71)
                          property_identifier [replace] (68:71-68:78)
                        arguments [('STRATEGY: ', '')] (68:78-68:96)
                          ( [(] (68:78-68:79)
                          string ['STRATEGY: '] (68:79-68:91)
                            ' ['] (68:79-68:80)
                            string_fragment [STRATEGY: ] (68:80-68:90)
                            ' ['] (68:90-68:91)
                          , [,] (68:91-68:92)
                          string [''] (68:93-68:95)
                            ' ['] (68:93-68:94)
                            ' ['] (68:94-68:95)
                          ) [)] (68:95-68:96)
                    ) [)] (68:96-68:97)
                || [||] (68:98-68:100)
                array [[]] (68:101-68:103)
                  [ [[] (68:101-68:102)
                  ] []] (68:102-68:103)
            ; [;] (68:103-68:104)
          lexical_declaration [const triggers = textResponse.match(/TRIGGER: .+/g)?.map(t => t.replace('TRIGGER: ', '')) || [];] (69:4-69:100)
            const [const] (69:4-69:9)
            variable_declarator [triggers = textResponse.match(/TRIGGER: .+/g)?.map(t => t.replace('TRIGGER: ', '')) || []] (69:10-69:99)
              identifier [triggers] (69:10-69:18)
              = [=] (69:19-69:20)
              binary_expression [textResponse.match(/TRIGGER: .+/g)?.map(t => t.replace('TRIGGER: ', '')) || []] (69:21-69:99)
                call_expression [textResponse.match(/TRIGGER: .+/g)?.map(t => t.replace('TRIGGER: ', ''))] (69:21-69:93)
                  member_expression [textResponse.match(/TRIGGER: .+/g)?.map] (69:21-69:60)
                    call_expression [textResponse.match(/TRIGGER: .+/g)] (69:21-69:55)
                      member_expression [textResponse.match] (69:21-69:39)
                        identifier [textResponse] (69:21-69:33)
                        . [.] (69:33-69:34)
                        property_identifier [match] (69:34-69:39)
                      arguments [(/TRIGGER: .+/g)] (69:39-69:55)
                        ( [(] (69:39-69:40)
                        regex [/TRIGGER: .+/g] (69:40-69:54)
                          / [/] (69:40-69:41)
                          regex_pattern [TRIGGER: .+] (69:41-69:52)
                          / [/] (69:52-69:53)
                          regex_flags [g] (69:53-69:54)
                        ) [)] (69:54-69:55)
                    optional_chain [?.] (69:55-69:57)
                      ?. [?.] (69:55-69:57)
                    property_identifier [map] (69:57-69:60)
                  arguments [(t => t.replace('TRIGGER: ', ''))] (69:60-69:93)
                    ( [(] (69:60-69:61)
                    arrow_function [t => t.replace('TRIGGER: ', '')] (69:61-69:92)
                      identifier [t] (69:61-69:62)
                      => [=>] (69:63-69:65)
                      call_expression [t.replace('TRIGGER: ', '')] (69:66-69:92)
                        member_expression [t.replace] (69:66-69:75)
                          identifier [t] (69:66-69:67)
                          . [.] (69:67-69:68)
                          property_identifier [replace] (69:68-69:75)
                        arguments [('TRIGGER: ', '')] (69:75-69:92)
                          ( [(] (69:75-69:76)
                          string ['TRIGGER: '] (69:76-69:87)
                            ' ['] (69:76-69:77)
                            string_fragment [TRIGGER: ] (69:77-69:86)
                            ' ['] (69:86-69:87)
                          , [,] (69:87-69:88)
                          string [''] (69:89-69:91)
                            ' ['] (69:89-69:90)
                            ' ['] (69:90-69:91)
                          ) [)] (69:91-69:92)
                    ) [)] (69:92-69:93)
                || [||] (69:94-69:96)
                array [[]] (69:97-69:99)
                  [ [[] (69:97-69:98)
                  ] []] (69:98-69:99)
            ; [;] (69:99-69:100)
          comment [// Create the structured items array] (71:4-71:40)
          lexical_declaration [const items = [
      {
        id: 1,
        type: 'painPoints',
        height: 'h-64',
        width: 'col-span-2',
        data: pains.map((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))
      },
      {
        id: 2,
        type: 'strategic',
        height: 'h-[400px]',
        width: 'col-span-1',
        data: strategies.map((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))
      },
      {
        id: 3,
        type: 'triggers',
        height: 'min-h-72',
        width: 'col-span-3',
        data: triggers.map((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))
      }
    ];] (72:4-108:6)
            const [const] (72:4-72:9)
            variable_declarator [items = [
      {
        id: 1,
        type: 'painPoints',
        height: 'h-64',
        width: 'col-span-2',
        data: pains.map((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))
      },
      {
        id: 2,
        type: 'strategic',
        height: 'h-[400px]',
        width: 'col-span-1',
        data: strategies.map((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))
      },
      {
        id: 3,
        type: 'triggers',
        height: 'min-h-72',
        width: 'col-span-3',
        data: triggers.map((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))
      }
    ]] (72:10-108:5)
              identifier [items] (72:10-72:15)
              = [=] (72:16-72:17)
              array [[
      {
        id: 1,
        type: 'painPoints',
        height: 'h-64',
        width: 'col-span-2',
        data: pains.map((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))
      },
      {
        id: 2,
        type: 'strategic',
        height: 'h-[400px]',
        width: 'col-span-1',
        data: strategies.map((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))
      },
      {
        id: 3,
        type: 'triggers',
        height: 'min-h-72',
        width: 'col-span-3',
        data: triggers.map((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))
      }
    ]] (72:18-108:5)
                [ [[] (72:18-72:19)
                object [{
        id: 1,
        type: 'painPoints',
        height: 'h-64',
        width: 'col-span-2',
        data: pains.map((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))
      }] (73:6-84:7)
                  { [{] (73:6-73:7)
                  pair [id: 1] (74:8-74:13)
                    property_identifier [id] (74:8-74:10)
                    : [:] (74:10-74:11)
                    number [1] (74:12-74:13)
                  , [,] (74:13-74:14)
                  pair [type: 'painPoints'] (75:8-75:26)
                    property_identifier [type] (75:8-75:12)
                    : [:] (75:12-75:13)
                    string ['painPoints'] (75:14-75:26)
                      ' ['] (75:14-75:15)
                      string_fragment [painPoints] (75:15-75:25)
                      ' ['] (75:25-75:26)
                  , [,] (75:26-75:27)
                  pair [height: 'h-64'] (76:8-76:22)
                    property_identifier [height] (76:8-76:14)
                    : [:] (76:14-76:15)
                    string ['h-64'] (76:16-76:22)
                      ' ['] (76:16-76:17)
                      string_fragment [h-64] (76:17-76:21)
                      ' ['] (76:21-76:22)
                  , [,] (76:22-76:23)
                  pair [width: 'col-span-2'] (77:8-77:27)
                    property_identifier [width] (77:8-77:13)
                    : [:] (77:13-77:14)
                    string ['col-span-2'] (77:15-77:27)
                      ' ['] (77:15-77:16)
                      string_fragment [col-span-2] (77:16-77:26)
                      ' ['] (77:26-77:27)
                  , [,] (77:27-77:28)
                  pair [data: pains.map((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))] (78:8-83:11)
                    property_identifier [data] (78:8-78:12)
                    : [:] (78:12-78:13)
                    call_expression [pains.map((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))] (78:14-83:11)
                      member_expression [pains.map] (78:14-78:23)
                        identifier [pains] (78:14-78:19)
                        . [.] (78:19-78:20)
                        property_identifier [map] (78:20-78:23)
                      arguments [((text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }))] (78:23-83:11)
                        ( [(] (78:23-78:24)
                        arrow_function [(text, index) => ({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        })] (78:24-83:10)
                          formal_parameters [(text, index)] (78:24-78:37)
                            ( [(] (78:24-78:25)
                            required_parameter [text] (78:25-78:29)
                              identifier [text] (78:25-78:29)
                            , [,] (78:29-78:30)
                            required_parameter [index] (78:31-78:36)
                              identifier [index] (78:31-78:36)
                            ) [)] (78:36-78:37)
                          => [=>] (78:38-78:40)
                          parenthesized_expression [({
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        })] (78:41-83:10)
                            ( [(] (78:41-78:42)
                            object [{
          id: index + 1,
          source: ['Reddit', 'Twitter', 'Reviews'][index % 3],
          text,
          frequency: Math.floor(Math.random() * (85 - 65) + 65)  // Random frequency between 65-85
        }] (78:42-83:9)
                              { [{] (78:42-78:43)
                              pair [id: index + 1] (79:10-79:23)
                                property_identifier [id] (79:10-79:12)
                                : [:] (79:12-79:13)
                                binary_expression [index + 1] (79:14-79:23)
                                  identifier [index] (79:14-79:19)
                                  + [+] (79:20-79:21)
                                  number [1] (79:22-79:23)
                              , [,] (79:23-79:24)
                              pair [source: ['Reddit', 'Twitter', 'Reviews'][index % 3]] (80:10-80:61)
                                property_identifier [source] (80:10-80:16)
                                : [:] (80:16-80:17)
                                subscript_expression [['Reddit', 'Twitter', 'Reviews'][index % 3]] (80:18-80:61)
                                  array [['Reddit', 'Twitter', 'Reviews']] (80:18-80:50)
                                    [ [[] (80:18-80:19)
                                    string ['Reddit'] (80:19-80:27)
                                      ' ['] (80:19-80:20)
                                      string_fragment [Reddit] (80:20-80:26)
                                      ' ['] (80:26-80:27)
                                    , [,] (80:27-80:28)
                                    string ['Twitter'] (80:29-80:38)
                                      ' ['] (80:29-80:30)
                                      string_fragment [Twitter] (80:30-80:37)
                                      ' ['] (80:37-80:38)
                                    , [,] (80:38-80:39)
                                    string ['Reviews'] (80:40-80:49)
                                      ' ['] (80:40-80:41)
                                      string_fragment [Reviews] (80:41-80:48)
                                      ' ['] (80:48-80:49)
                                    ] []] (80:49-80:50)
                                  [ [[] (80:50-80:51)
                                  binary_expression [index % 3] (80:51-80:60)
                                    identifier [index] (80:51-80:56)
                                    % [%] (80:57-80:58)
                                    number [3] (80:59-80:60)
                                  ] []] (80:60-80:61)
                              , [,] (80:61-80:62)
                              shorthand_property_identifier [text] (81:10-81:14)
                              , [,] (81:14-81:15)
                              pair [frequency: Math.floor(Math.random() * (85 - 65) + 65)] (82:10-82:63)
                                property_identifier [frequency] (82:10-82:19)
                                : [:] (82:19-82:20)
                                call_expression [Math.floor(Math.random() * (85 - 65) + 65)] (82:21-82:63)
                                  member_expression [Math.floor] (82:21-82:31)
                                    identifier [Math] (82:21-82:25)
                                    . [.] (82:25-82:26)
                                    property_identifier [floor] (82:26-82:31)
                                  arguments [(Math.random() * (85 - 65) + 65)] (82:31-82:63)
                                    ( [(] (82:31-82:32)
                                    binary_expression [Math.random() * (85 - 65) + 65] (82:32-82:62)
                                      binary_expression [Math.random() * (85 - 65)] (82:32-82:57)
                                        call_expression [Math.random()] (82:32-82:45)
                                          member_expression [Math.random] (82:32-82:43)
                                            identifier [Math] (82:32-82:36)
                                            . [.] (82:36-82:37)
                                            property_identifier [random] (82:37-82:43)
                                          arguments [()] (82:43-82:45)
                                            ( [(] (82:43-82:44)
                                            ) [)] (82:44-82:45)
                                        * [*] (82:46-82:47)
                                        parenthesized_expression [(85 - 65)] (82:48-82:57)
                                          ( [(] (82:48-82:49)
                                          binary_expression [85 - 65] (82:49-82:56)
                                            number [85] (82:49-82:51)
                                            - [-] (82:52-82:53)
                                            number [65] (82:54-82:56)
                                          ) [)] (82:56-82:57)
                                      + [+] (82:58-82:59)
                                      number [65] (82:60-82:62)
                                    ) [)] (82:62-82:63)
                              comment [// Random frequency between 65-85] (82:65-82:98)
                              } [}] (83:8-83:9)
                            ) [)] (83:9-83:10)
                        ) [)] (83:10-83:11)
                  } [}] (84:6-84:7)
                , [,] (84:7-84:8)
                object [{
        id: 2,
        type: 'strategic',
        height: 'h-[400px]',
        width: 'col-span-1',
        data: strategies.map((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))
      }] (85:6-95:7)
                  { [{] (85:6-85:7)
                  pair [id: 2] (86:8-86:13)
                    property_identifier [id] (86:8-86:10)
                    : [:] (86:10-86:11)
                    number [2] (86:12-86:13)
                  , [,] (86:13-86:14)
                  pair [type: 'strategic'] (87:8-87:25)
                    property_identifier [type] (87:8-87:12)
                    : [:] (87:12-87:13)
                    string ['strategic'] (87:14-87:25)
                      ' ['] (87:14-87:15)
                      string_fragment [strategic] (87:15-87:24)
                      ' ['] (87:24-87:25)
                  , [,] (87:25-87:26)
                  pair [height: 'h-[400px]'] (88:8-88:27)
                    property_identifier [height] (88:8-88:14)
                    : [:] (88:14-88:15)
                    string ['h-[400px]'] (88:16-88:27)
                      ' ['] (88:16-88:17)
                      string_fragment [h-[400px]] (88:17-88:26)
                      ' ['] (88:26-88:27)
                  , [,] (88:27-88:28)
                  pair [width: 'col-span-1'] (89:8-89:27)
                    property_identifier [width] (89:8-89:13)
                    : [:] (89:13-89:14)
                    string ['col-span-1'] (89:15-89:27)
                      ' ['] (89:15-89:16)
                      string_fragment [col-span-1] (89:16-89:26)
                      ' ['] (89:26-89:27)
                  , [,] (89:27-89:28)
                  pair [data: strategies.map((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))] (90:8-94:11)
                    property_identifier [data] (90:8-90:12)
                    : [:] (90:12-90:13)
                    call_expression [strategies.map((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))] (90:14-94:11)
                      member_expression [strategies.map] (90:14-90:28)
                        identifier [strategies] (90:14-90:24)
                        . [.] (90:24-90:25)
                        property_identifier [map] (90:25-90:28)
                      arguments [((text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }))] (90:28-94:11)
                        ( [(] (90:28-90:29)
                        arrow_function [(text, index) => ({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        })] (90:29-94:10)
                          formal_parameters [(text, index)] (90:29-90:42)
                            ( [(] (90:29-90:30)
                            required_parameter [text] (90:30-90:34)
                              identifier [text] (90:30-90:34)
                            , [,] (90:34-90:35)
                            required_parameter [index] (90:36-90:41)
                              identifier [index] (90:36-90:41)
                            ) [)] (90:41-90:42)
                          => [=>] (90:43-90:45)
                          parenthesized_expression [({
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        })] (90:46-94:10)
                            ( [(] (90:46-90:47)
                            object [{
          id: index + 1,
          category: ['USP', 'Messaging', 'Target', 'Channel'][index],
          text
        }] (90:47-94:9)
                              { [{] (90:47-90:48)
                              pair [id: index + 1] (91:10-91:23)
                                property_identifier [id] (91:10-91:12)
                                : [:] (91:12-91:13)
                                binary_expression [index + 1] (91:14-91:23)
                                  identifier [index] (91:14-91:19)
                                  + [+] (91:20-91:21)
                                  number [1] (91:22-91:23)
                              , [,] (91:23-91:24)
                              pair [category: ['USP', 'Messaging', 'Target', 'Channel'][index]] (92:10-92:68)
                                property_identifier [category] (92:10-92:18)
                                : [:] (92:18-92:19)
                                subscript_expression [['USP', 'Messaging', 'Target', 'Channel'][index]] (92:20-92:68)
                                  array [['USP', 'Messaging', 'Target', 'Channel']] (92:20-92:61)
                                    [ [[] (92:20-92:21)
                                    string ['USP'] (92:21-92:26)
                                      ' ['] (92:21-92:22)
                                      string_fragment [USP] (92:22-92:25)
                                      ' ['] (92:25-92:26)
                                    , [,] (92:26-92:27)
                                    string ['Messaging'] (92:28-92:39)
                                      ' ['] (92:28-92:29)
                                      string_fragment [Messaging] (92:29-92:38)
                                      ' ['] (92:38-92:39)
                                    , [,] (92:39-92:40)
                                    string ['Target'] (92:41-92:49)
                                      ' ['] (92:41-92:42)
                                      string_fragment [Target] (92:42-92:48)
                                      ' ['] (92:48-92:49)
                                    , [,] (92:49-92:50)
                                    string ['Channel'] (92:51-92:60)
                                      ' ['] (92:51-92:52)
                                      string_fragment [Channel] (92:52-92:59)
                                      ' ['] (92:59-92:60)
                                    ] []] (92:60-92:61)
                                  [ [[] (92:61-92:62)
                                  identifier [index] (92:62-92:67)
                                  ] []] (92:67-92:68)
                              , [,] (92:68-92:69)
                              shorthand_property_identifier [text] (93:10-93:14)
                              } [}] (94:8-94:9)
                            ) [)] (94:9-94:10)
                        ) [)] (94:10-94:11)
                  } [}] (95:6-95:7)
                , [,] (95:7-95:8)
                object [{
        id: 3,
        type: 'triggers',
        height: 'min-h-72',
        width: 'col-span-3',
        data: triggers.map((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))
      }] (96:6-107:7)
                  { [{] (96:6-96:7)
                  pair [id: 3] (97:8-97:13)
                    property_identifier [id] (97:8-97:10)
                    : [:] (97:10-97:11)
                    number [3] (97:12-97:13)
                  , [,] (97:13-97:14)
                  pair [type: 'triggers'] (98:8-98:24)
                    property_identifier [type] (98:8-98:12)
                    : [:] (98:12-98:13)
                    string ['triggers'] (98:14-98:24)
                      ' ['] (98:14-98:15)
                      string_fragment [triggers] (98:15-98:23)
                      ' ['] (98:23-98:24)
                  , [,] (98:24-98:25)
                  pair [height: 'min-h-72'] (99:8-99:26)
                    property_identifier [height] (99:8-99:14)
                    : [:] (99:14-99:15)
                    string ['min-h-72'] (99:16-99:26)
                      ' ['] (99:16-99:17)
                      string_fragment [min-h-72] (99:17-99:25)
                      ' ['] (99:25-99:26)
                  , [,] (99:26-99:27)
                  pair [width: 'col-span-3'] (100:8-100:27)
                    property_identifier [width] (100:8-100:13)
                    : [:] (100:13-100:14)
                    string ['col-span-3'] (100:15-100:27)
                      ' ['] (100:15-100:16)
                      string_fragment [col-span-3] (100:16-100:26)
                      ' ['] (100:26-100:27)
                  , [,] (100:27-100:28)
                  pair [data: triggers.map((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))] (101:8-106:11)
                    property_identifier [data] (101:8-101:12)
                    : [:] (101:12-101:13)
                    call_expression [triggers.map((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))] (101:14-106:11)
                      member_expression [triggers.map] (101:14-101:26)
                        identifier [triggers] (101:14-101:22)
                        . [.] (101:22-101:23)
                        property_identifier [map] (101:23-101:26)
                      arguments [((text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }))] (101:26-106:11)
                        ( [(] (101:26-101:27)
                        arrow_function [(text, index) => ({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        })] (101:27-106:10)
                          formal_parameters [(text, index)] (101:27-101:40)
                            ( [(] (101:27-101:28)
                            required_parameter [text] (101:28-101:32)
                              identifier [text] (101:28-101:32)
                            , [,] (101:32-101:33)
                            required_parameter [index] (101:34-101:39)
                              identifier [index] (101:34-101:39)
                            ) [)] (101:39-101:40)
                          => [=>] (101:41-101:43)
                          parenthesized_expression [({
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        })] (101:44-106:10)
                            ( [(] (101:44-101:45)
                            object [{
          id: index + 1,
          type: ['Emotional', 'Practical', 'Social'][index],
          text,
          strength: (0.95 - (index * 0.1)).toFixed(2)  // Decreasing strength: 0.95, 0.85, 0.75
        }] (101:45-106:9)
                              { [{] (101:45-101:46)
                              pair [id: index + 1] (102:10-102:23)
                                property_identifier [id] (102:10-102:12)
                                : [:] (102:12-102:13)
                                binary_expression [index + 1] (102:14-102:23)
                                  identifier [index] (102:14-102:19)
                                  + [+] (102:20-102:21)
                                  number [1] (102:22-102:23)
                              , [,] (102:23-102:24)
                              pair [type: ['Emotional', 'Practical', 'Social'][index]] (103:10-103:59)
                                property_identifier [type] (103:10-103:14)
                                : [:] (103:14-103:15)
                                subscript_expression [['Emotional', 'Practical', 'Social'][index]] (103:16-103:59)
                                  array [['Emotional', 'Practical', 'Social']] (103:16-103:52)
                                    [ [[] (103:16-103:17)
                                    string ['Emotional'] (103:17-103:28)
                                      ' ['] (103:17-103:18)
                                      string_fragment [Emotional] (103:18-103:27)
                                      ' ['] (103:27-103:28)
                                    , [,] (103:28-103:29)
                                    string ['Practical'] (103:30-103:41)
                                      ' ['] (103:30-103:31)
                                      string_fragment [Practical] (103:31-103:40)
                                      ' ['] (103:40-103:41)
                                    , [,] (103:41-103:42)
                                    string ['Social'] (103:43-103:51)
                                      ' ['] (103:43-103:44)
                                      string_fragment [Social] (103:44-103:50)
                                      ' ['] (103:50-103:51)
                                    ] []] (103:51-103:52)
                                  [ [[] (103:52-103:53)
                                  identifier [index] (103:53-103:58)
                                  ] []] (103:58-103:59)
                              , [,] (103:59-103:60)
                              shorthand_property_identifier [text] (104:10-104:14)
                              , [,] (104:14-104:15)
                              pair [strength: (0.95 - (index * 0.1)).toFixed(2)] (105:10-105:53)
                                property_identifier [strength] (105:10-105:18)
                                : [:] (105:18-105:19)
                                call_expression [(0.95 - (index * 0.1)).toFixed(2)] (105:20-105:53)
                                  member_expression [(0.95 - (index * 0.1)).toFixed] (105:20-105:50)
                                    parenthesized_expression [(0.95 - (index * 0.1))] (105:20-105:42)
                                      ( [(] (105:20-105:21)
                                      binary_expression [0.95 - (index * 0.1)] (105:21-105:41)
                                        number [0.95] (105:21-105:25)
                                        - [-] (105:26-105:27)
                                        parenthesized_expression [(index * 0.1)] (105:28-105:41)
                                          ( [(] (105:28-105:29)
                                          binary_expression [index * 0.1] (105:29-105:40)
                                            identifier [index] (105:29-105:34)
                                            * [*] (105:35-105:36)
                                            number [0.1] (105:37-105:40)
                                          ) [)] (105:40-105:41)
                                      ) [)] (105:41-105:42)
                                    . [.] (105:42-105:43)
                                    property_identifier [toFixed] (105:43-105:50)
                                  arguments [(2)] (105:50-105:53)
                                    ( [(] (105:50-105:51)
                                    number [2] (105:51-105:52)
                                    ) [)] (105:52-105:53)
                              comment [// Decreasing strength: 0.95, 0.85, 0.75] (105:55-105:95)
                              } [}] (106:8-106:9)
                            ) [)] (106:9-106:10)
                        ) [)] (106:10-106:11)
                  } [}] (107:6-107:7)
                ] []] (108:4-108:5)
            ; [;] (108:5-108:6)
          return_statement [return { items };] (110:4-110:21)
            return [return] (110:4-110:10)
            object [{ items }] (110:11-110:20)
              { [{] (110:11-110:12)
              shorthand_property_identifier [items] (110:13-110:18)
              } [}] (110:19-110:20)
            ; [;] (110:20-110:21)
          } [}] (111:2-111:3)
    ; [;] (111:3-111:4)
  lexical_declaration [const makeApiCall = async (query) => {
    try {
      const response = await fetch("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      });

      const data = await response.json();
      const textResponse = data.choices[0].message.content;
      
      console.log('Raw LLM Response:', textResponse);
      
      // Transform the text response into our structured format
      const structuredData = transformResponse(textResponse);
      console.log('Structured Data:', structuredData);
      
      return structuredData;
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  };] (113:2-153:4)
    const [const] (113:2-113:7)
    variable_declarator [makeApiCall = async (query) => {
    try {
      const response = await fetch("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      });

      const data = await response.json();
      const textResponse = data.choices[0].message.content;
      
      console.log('Raw LLM Response:', textResponse);
      
      // Transform the text response into our structured format
      const structuredData = transformResponse(textResponse);
      console.log('Structured Data:', structuredData);
      
      return structuredData;
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }] (113:8-153:3)
      identifier [makeApiCall] (113:8-113:19)
      = [=] (113:20-113:21)
      arrow_function [async (query) => {
    try {
      const response = await fetch("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      });

      const data = await response.json();
      const textResponse = data.choices[0].message.content;
      
      console.log('Raw LLM Response:', textResponse);
      
      // Transform the text response into our structured format
      const structuredData = transformResponse(textResponse);
      console.log('Structured Data:', structuredData);
      
      return structuredData;
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }] (113:22-153:3)
        async [async] (113:22-113:27)
        formal_parameters [(query)] (113:28-113:35)
          ( [(] (113:28-113:29)
          required_parameter [query] (113:29-113:34)
            identifier [query] (113:29-113:34)
          ) [)] (113:34-113:35)
        => [=>] (113:36-113:38)
        statement_block [{
    try {
      const response = await fetch("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      });

      const data = await response.json();
      const textResponse = data.choices[0].message.content;
      
      console.log('Raw LLM Response:', textResponse);
      
      // Transform the text response into our structured format
      const structuredData = transformResponse(textResponse);
      console.log('Structured Data:', structuredData);
      
      return structuredData;
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }] (113:39-153:3)
          { [{] (113:39-113:40)
          try_statement [try {
      const response = await fetch("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      });

      const data = await response.json();
      const textResponse = data.choices[0].message.content;
      
      console.log('Raw LLM Response:', textResponse);
      
      // Transform the text response into our structured format
      const structuredData = transformResponse(textResponse);
      console.log('Structured Data:', structuredData);
      
      return structuredData;
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }] (114:4-152:5)
            try [try] (114:4-114:7)
            statement_block [{
      const response = await fetch("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      });

      const data = await response.json();
      const textResponse = data.choices[0].message.content;
      
      console.log('Raw LLM Response:', textResponse);
      
      // Transform the text response into our structured format
      const structuredData = transformResponse(textResponse);
      console.log('Structured Data:', structuredData);
      
      return structuredData;
    }] (114:8-149:5)
              { [{] (114:8-114:9)
              lexical_declaration [const response = await fetch("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      });] (115:6-137:9)
                const [const] (115:6-115:11)
                variable_declarator [response = await fetch("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      })] (115:12-137:8)
                  identifier [response] (115:12-115:20)
                  = [=] (115:21-115:22)
                  await_expression [await fetch("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      })] (115:23-137:8)
                    await [await] (115:23-115:28)
                    call_expression [fetch("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      })] (115:29-137:8)
                      identifier [fetch] (115:29-115:34)
                      arguments [("https://api.fireworks.ai/inference/v1/chat/completions", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      })] (115:34-137:8)
                        ( [(] (115:34-115:35)
                        string ["https://api.fireworks.ai/inference/v1/chat/completions"] (115:35-115:91)
                          " ["] (115:35-115:36)
                          string_fragment [https://api.fireworks.ai/inference/v1/chat/completions] (115:36-115:90)
                          " ["] (115:90-115:91)
                        , [,] (115:91-115:92)
                        object [{
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        },
        body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })
      }] (115:93-137:7)
                          { [{] (115:93-115:94)
                          pair [method: "POST"] (116:8-116:22)
                            property_identifier [method] (116:8-116:14)
                            : [:] (116:14-116:15)
                            string ["POST"] (116:16-116:22)
                              " ["] (116:16-116:17)
                              string_fragment [POST] (116:17-116:21)
                              " ["] (116:21-116:22)
                          , [,] (116:22-116:23)
                          pair [headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        }] (117:8-121:9)
                            property_identifier [headers] (117:8-117:15)
                            : [:] (117:15-117:16)
                            object [{
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`
        }] (117:17-121:9)
                              { [{] (117:17-117:18)
                              pair ["Accept": "application/json"] (118:10-118:38)
                                string ["Accept"] (118:10-118:18)
                                  " ["] (118:10-118:11)
                                  string_fragment [Accept] (118:11-118:17)
                                  " ["] (118:17-118:18)
                                : [:] (118:18-118:19)
                                string ["application/json"] (118:20-118:38)
                                  " ["] (118:20-118:21)
                                  string_fragment [application/json] (118:21-118:37)
                                  " ["] (118:37-118:38)
                              , [,] (118:38-118:39)
                              pair ["Content-Type": "application/json"] (119:10-119:44)
                                string ["Content-Type"] (119:10-119:24)
                                  " ["] (119:10-119:11)
                                  string_fragment [Content-Type] (119:11-119:23)
                                  " ["] (119:23-119:24)
                                : [:] (119:24-119:25)
                                string ["application/json"] (119:26-119:44)
                                  " ["] (119:26-119:27)
                                  string_fragment [application/json] (119:27-119:43)
                                  " ["] (119:43-119:44)
                              , [,] (119:44-119:45)
                              pair ["Authorization": `Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`] (120:10-120:63)
                                string ["Authorization"] (120:10-120:25)
                                  " ["] (120:10-120:11)
                                  string_fragment [Authorization] (120:11-120:24)
                                  " ["] (120:24-120:25)
                                : [:] (120:25-120:26)
                                template_string [`Bearer fw_3ZgmhfzNVWDcFehkr8Kf8esg`] (120:27-120:63)
                                  ` [`] (120:27-120:28)
                                  ` [`] (120:62-120:63)
                              } [}] (121:8-121:9)
                          , [,] (121:9-121:10)
                          pair [body: JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })] (122:8-136:10)
                            property_identifier [body] (122:8-122:12)
                            : [:] (122:12-122:13)
                            call_expression [JSON.stringify({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })] (122:14-136:10)
                              member_expression [JSON.stringify] (122:14-122:28)
                                identifier [JSON] (122:14-122:18)
                                . [.] (122:18-122:19)
                                property_identifier [stringify] (122:19-122:28)
                              arguments [({
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        })] (122:28-136:10)
                                ( [(] (122:28-122:29)
                                object [{
          model: "accounts/fireworks/models/deepseek-v3",
          max_tokens: 4096,
          top_p: 1,
          top_k: 40,
          presence_penalty: 0,
          frequency_penalty: 0,
          temperature: 0.7,
          messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]
        }] (122:29-136:9)
                                  { [{] (122:29-122:30)
                                  pair [model: "accounts/fireworks/models/deepseek-v3"] (123:10-123:56)
                                    property_identifier [model] (123:10-123:15)
                                    : [:] (123:15-123:16)
                                    string ["accounts/fireworks/models/deepseek-v3"] (123:17-123:56)
                                      " ["] (123:17-123:18)
                                      string_fragment [accounts/fireworks/models/deepseek-v3] (123:18-123:55)
                                      " ["] (123:55-123:56)
                                  , [,] (123:56-123:57)
                                  pair [max_tokens: 4096] (124:10-124:26)
                                    property_identifier [max_tokens] (124:10-124:20)
                                    : [:] (124:20-124:21)
                                    number [4096] (124:22-124:26)
                                  , [,] (124:26-124:27)
                                  pair [top_p: 1] (125:10-125:18)
                                    property_identifier [top_p] (125:10-125:15)
                                    : [:] (125:15-125:16)
                                    number [1] (125:17-125:18)
                                  , [,] (125:18-125:19)
                                  pair [top_k: 40] (126:10-126:19)
                                    property_identifier [top_k] (126:10-126:15)
                                    : [:] (126:15-126:16)
                                    number [40] (126:17-126:19)
                                  , [,] (126:19-126:20)
                                  pair [presence_penalty: 0] (127:10-127:29)
                                    property_identifier [presence_penalty] (127:10-127:26)
                                    : [:] (127:26-127:27)
                                    number [0] (127:28-127:29)
                                  , [,] (127:29-127:30)
                                  pair [frequency_penalty: 0] (128:10-128:30)
                                    property_identifier [frequency_penalty] (128:10-128:27)
                                    : [:] (128:27-128:28)
                                    number [0] (128:29-128:30)
                                  , [,] (128:30-128:31)
                                  pair [temperature: 0.7] (129:10-129:26)
                                    property_identifier [temperature] (129:10-129:21)
                                    : [:] (129:21-129:22)
                                    number [0.7] (129:23-129:26)
                                  , [,] (129:26-129:27)
                                  pair [messages: [
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]] (130:10-135:11)
                                    property_identifier [messages] (130:10-130:18)
                                    : [:] (130:18-130:19)
                                    array [[
            {
              role: "user",
              content: constructPrompt(query)
            }
          ]] (130:20-135:11)
                                      [ [[] (130:20-130:21)
                                      object [{
              role: "user",
              content: constructPrompt(query)
            }] (131:12-134:13)
                                        { [{] (131:12-131:13)
                                        pair [role: "user"] (132:14-132:26)
                                          property_identifier [role] (132:14-132:18)
                                          : [:] (132:18-132:19)
                                          string ["user"] (132:20-132:26)
                                            " ["] (132:20-132:21)
                                            string_fragment [user] (132:21-132:25)
                                            " ["] (132:25-132:26)
                                        , [,] (132:26-132:27)
                                        pair [content: constructPrompt(query)] (133:14-133:45)
                                          property_identifier [content] (133:14-133:21)
                                          : [:] (133:21-133:22)
                                          call_expression [constructPrompt(query)] (133:23-133:45)
                                            identifier [constructPrompt] (133:23-133:38)
                                            arguments [(query)] (133:38-133:45)
                                              ( [(] (133:38-133:39)
                                              identifier [query] (133:39-133:44)
                                              ) [)] (133:44-133:45)
                                        } [}] (134:12-134:13)
                                      ] []] (135:10-135:11)
                                  } [}] (136:8-136:9)
                                ) [)] (136:9-136:10)
                          } [}] (137:6-137:7)
                        ) [)] (137:7-137:8)
                ; [;] (137:8-137:9)
              lexical_declaration [const data = await response.json();] (139:6-139:41)
                const [const] (139:6-139:11)
                variable_declarator [data = await response.json()] (139:12-139:40)
                  identifier [data] (139:12-139:16)
                  = [=] (139:17-139:18)
                  await_expression [await response.json()] (139:19-139:40)
                    await [await] (139:19-139:24)
                    call_expression [response.json()] (139:25-139:40)
                      member_expression [response.json] (139:25-139:38)
                        identifier [response] (139:25-139:33)
                        . [.] (139:33-139:34)
                        property_identifier [json] (139:34-139:38)
                      arguments [()] (139:38-139:40)
                        ( [(] (139:38-139:39)
                        ) [)] (139:39-139:40)
                ; [;] (139:40-139:41)
              lexical_declaration [const textResponse = data.choices[0].message.content;] (140:6-140:59)
                const [const] (140:6-140:11)
                variable_declarator [textResponse = data.choices[0].message.content] (140:12-140:58)
                  identifier [textResponse] (140:12-140:24)
                  = [=] (140:25-140:26)
                  member_expression [data.choices[0].message.content] (140:27-140:58)
                    member_expression [data.choices[0].message] (140:27-140:50)
                      subscript_expression [data.choices[0]] (140:27-140:42)
                        member_expression [data.choices] (140:27-140:39)
                          identifier [data] (140:27-140:31)
                          . [.] (140:31-140:32)
                          property_identifier [choices] (140:32-140:39)
                        [ [[] (140:39-140:40)
                        number [0] (140:40-140:41)
                        ] []] (140:41-140:42)
                      . [.] (140:42-140:43)
                      property_identifier [message] (140:43-140:50)
                    . [.] (140:50-140:51)
                    property_identifier [content] (140:51-140:58)
                ; [;] (140:58-140:59)
              expression_statement [console.log('Raw LLM Response:', textResponse);] (142:6-142:53)
                call_expression [console.log('Raw LLM Response:', textResponse)] (142:6-142:52)
                  member_expression [console.log] (142:6-142:17)
                    identifier [console] (142:6-142:13)
                    . [.] (142:13-142:14)
                    property_identifier [log] (142:14-142:17)
                  arguments [('Raw LLM Response:', textResponse)] (142:17-142:52)
                    ( [(] (142:17-142:18)
                    string ['Raw LLM Response:'] (142:18-142:37)
                      ' ['] (142:18-142:19)
                      string_fragment [Raw LLM Response:] (142:19-142:36)
                      ' ['] (142:36-142:37)
                    , [,] (142:37-142:38)
                    identifier [textResponse] (142:39-142:51)
                    ) [)] (142:51-142:52)
                ; [;] (142:52-142:53)
              comment [// Transform the text response into our structured format] (144:6-144:63)
              lexical_declaration [const structuredData = transformResponse(textResponse);] (145:6-145:61)
                const [const] (145:6-145:11)
                variable_declarator [structuredData = transformResponse(textResponse)] (145:12-145:60)
                  identifier [structuredData] (145:12-145:26)
                  = [=] (145:27-145:28)
                  call_expression [transformResponse(textResponse)] (145:29-145:60)
                    identifier [transformResponse] (145:29-145:46)
                    arguments [(textResponse)] (145:46-145:60)
                      ( [(] (145:46-145:47)
                      identifier [textResponse] (145:47-145:59)
                      ) [)] (145:59-145:60)
                ; [;] (145:60-145:61)
              expression_statement [console.log('Structured Data:', structuredData);] (146:6-146:54)
                call_expression [console.log('Structured Data:', structuredData)] (146:6-146:53)
                  member_expression [console.log] (146:6-146:17)
                    identifier [console] (146:6-146:13)
                    . [.] (146:13-146:14)
                    property_identifier [log] (146:14-146:17)
                  arguments [('Structured Data:', structuredData)] (146:17-146:53)
                    ( [(] (146:17-146:18)
                    string ['Structured Data:'] (146:18-146:36)
                      ' ['] (146:18-146:19)
                      string_fragment [Structured Data:] (146:19-146:35)
                      ' ['] (146:35-146:36)
                    , [,] (146:36-146:37)
                    identifier [structuredData] (146:38-146:52)
                    ) [)] (146:52-146:53)
                ; [;] (146:53-146:54)
              return_statement [return structuredData;] (148:6-148:28)
                return [return] (148:6-148:12)
                identifier [structuredData] (148:13-148:27)
                ; [;] (148:27-148:28)
              } [}] (149:4-149:5)
            catch_clause [catch (error) {
      console.error('API Error:', error);
      throw error;
    }] (149:6-152:5)
              catch [catch] (149:6-149:11)
              ( [(] (149:12-149:13)
              identifier [error] (149:13-149:18)
              ) [)] (149:18-149:19)
              statement_block [{
      console.error('API Error:', error);
      throw error;
    }] (149:20-152:5)
                { [{] (149:20-149:21)
                expression_statement [console.error('API Error:', error);] (150:6-150:41)
                  call_expression [console.error('API Error:', error)] (150:6-150:40)
                    member_expression [console.error] (150:6-150:19)
                      identifier [console] (150:6-150:13)
                      . [.] (150:13-150:14)
                      property_identifier [error] (150:14-150:19)
                    arguments [('API Error:', error)] (150:19-150:40)
                      ( [(] (150:19-150:20)
                      string ['API Error:'] (150:20-150:32)
                        ' ['] (150:20-150:21)
                        string_fragment [API Error:] (150:21-150:31)
                        ' ['] (150:31-150:32)
                      , [,] (150:32-150:33)
                      identifier [error] (150:34-150:39)
                      ) [)] (150:39-150:40)
                  ; [;] (150:40-150:41)
                throw_statement [throw error;] (151:6-151:18)
                  throw [throw] (151:6-151:11)
                  identifier [error] (151:12-151:17)
                  ; [;] (151:17-151:18)
                } [}] (152:4-152:5)
          } [}] (153:2-153:3)
    ; [;] (153:3-153:4)
  lexical_declaration [const handleSubmit = async (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      setIsLoading(true);
      onSearchStart?.();
      
      try {
        progressIntervalRef.current = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50);

        const result = await makeApiCall(searchQuery);
        console.log('Final structured data:', result);

        setProgress(100);
        setTimeout(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500);
      } catch (error) {
        setIsLoading(false);
        setProgress(0);
      }

      if (progressIntervalRef.current) {
        clearInterval(progressIntervalRef.current);
      }
    }
  };] (155:2-189:4)
    const [const] (155:2-155:7)
    variable_declarator [handleSubmit = async (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      setIsLoading(true);
      onSearchStart?.();
      
      try {
        progressIntervalRef.current = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50);

        const result = await makeApiCall(searchQuery);
        console.log('Final structured data:', result);

        setProgress(100);
        setTimeout(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500);
      } catch (error) {
        setIsLoading(false);
        setProgress(0);
      }

      if (progressIntervalRef.current) {
        clearInterval(progressIntervalRef.current);
      }
    }
  }] (155:8-189:3)
      identifier [handleSubmit] (155:8-155:20)
      = [=] (155:21-155:22)
      arrow_function [async (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      setIsLoading(true);
      onSearchStart?.();
      
      try {
        progressIntervalRef.current = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50);

        const result = await makeApiCall(searchQuery);
        console.log('Final structured data:', result);

        setProgress(100);
        setTimeout(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500);
      } catch (error) {
        setIsLoading(false);
        setProgress(0);
      }

      if (progressIntervalRef.current) {
        clearInterval(progressIntervalRef.current);
      }
    }
  }] (155:23-189:3)
        async [async] (155:23-155:28)
        formal_parameters [(e)] (155:29-155:32)
          ( [(] (155:29-155:30)
          required_parameter [e] (155:30-155:31)
            identifier [e] (155:30-155:31)
          ) [)] (155:31-155:32)
        => [=>] (155:33-155:35)
        statement_block [{
    e.preventDefault();
    if (searchQuery.trim()) {
      setIsLoading(true);
      onSearchStart?.();
      
      try {
        progressIntervalRef.current = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50);

        const result = await makeApiCall(searchQuery);
        console.log('Final structured data:', result);

        setProgress(100);
        setTimeout(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500);
      } catch (error) {
        setIsLoading(false);
        setProgress(0);
      }

      if (progressIntervalRef.current) {
        clearInterval(progressIntervalRef.current);
      }
    }
  }] (155:36-189:3)
          { [{] (155:36-155:37)
          expression_statement [e.preventDefault();] (156:4-156:23)
            call_expression [e.preventDefault()] (156:4-156:22)
              member_expression [e.preventDefault] (156:4-156:20)
                identifier [e] (156:4-156:5)
                . [.] (156:5-156:6)
                property_identifier [preventDefault] (156:6-156:20)
              arguments [()] (156:20-156:22)
                ( [(] (156:20-156:21)
                ) [)] (156:21-156:22)
            ; [;] (156:22-156:23)
          if_statement [if (searchQuery.trim()) {
      setIsLoading(true);
      onSearchStart?.();
      
      try {
        progressIntervalRef.current = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50);

        const result = await makeApiCall(searchQuery);
        console.log('Final structured data:', result);

        setProgress(100);
        setTimeout(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500);
      } catch (error) {
        setIsLoading(false);
        setProgress(0);
      }

      if (progressIntervalRef.current) {
        clearInterval(progressIntervalRef.current);
      }
    }] (157:4-188:5)
            if [if] (157:4-157:6)
            parenthesized_expression [(searchQuery.trim())] (157:7-157:27)
              ( [(] (157:7-157:8)
              call_expression [searchQuery.trim()] (157:8-157:26)
                member_expression [searchQuery.trim] (157:8-157:24)
                  identifier [searchQuery] (157:8-157:19)
                  . [.] (157:19-157:20)
                  property_identifier [trim] (157:20-157:24)
                arguments [()] (157:24-157:26)
                  ( [(] (157:24-157:25)
                  ) [)] (157:25-157:26)
              ) [)] (157:26-157:27)
            statement_block [{
      setIsLoading(true);
      onSearchStart?.();
      
      try {
        progressIntervalRef.current = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50);

        const result = await makeApiCall(searchQuery);
        console.log('Final structured data:', result);

        setProgress(100);
        setTimeout(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500);
      } catch (error) {
        setIsLoading(false);
        setProgress(0);
      }

      if (progressIntervalRef.current) {
        clearInterval(progressIntervalRef.current);
      }
    }] (157:28-188:5)
              { [{] (157:28-157:29)
              expression_statement [setIsLoading(true);] (158:6-158:25)
                call_expression [setIsLoading(true)] (158:6-158:24)
                  identifier [setIsLoading] (158:6-158:18)
                  arguments [(true)] (158:18-158:24)
                    ( [(] (158:18-158:19)
                    true [true] (158:19-158:23)
                    ) [)] (158:23-158:24)
                ; [;] (158:24-158:25)
              expression_statement [onSearchStart?.();] (159:6-159:24)
                call_expression [onSearchStart?.()] (159:6-159:23)
                  identifier [onSearchStart] (159:6-159:19)
                  ?. [?.] (159:19-159:21)
                  arguments [()] (159:21-159:23)
                    ( [(] (159:21-159:22)
                    ) [)] (159:22-159:23)
                ; [;] (159:23-159:24)
              try_statement [try {
        progressIntervalRef.current = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50);

        const result = await makeApiCall(searchQuery);
        console.log('Final structured data:', result);

        setProgress(100);
        setTimeout(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500);
      } catch (error) {
        setIsLoading(false);
        setProgress(0);
      }] (161:6-183:7)
                try [try] (161:6-161:9)
                statement_block [{
        progressIntervalRef.current = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50);

        const result = await makeApiCall(searchQuery);
        console.log('Final structured data:', result);

        setProgress(100);
        setTimeout(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500);
      }] (161:10-180:7)
                  { [{] (161:10-161:11)
                  expression_statement [progressIntervalRef.current = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50);] (162:8-170:15)
                    assignment_expression [progressIntervalRef.current = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50)] (162:8-170:14)
                      member_expression [progressIntervalRef.current] (162:8-162:35)
                        identifier [progressIntervalRef] (162:8-162:27)
                        . [.] (162:27-162:28)
                        property_identifier [current] (162:28-162:35)
                      = [=] (162:36-162:37)
                      call_expression [setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50)] (162:38-170:14)
                        identifier [setInterval] (162:38-162:49)
                        arguments [(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }, 50)] (162:49-170:14)
                          ( [(] (162:49-162:50)
                          arrow_function [() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }] (162:50-170:9)
                            formal_parameters [()] (162:50-162:52)
                              ( [(] (162:50-162:51)
                              ) [)] (162:51-162:52)
                            => [=>] (162:53-162:55)
                            statement_block [{
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });
        }] (162:56-170:9)
                              { [{] (162:56-162:57)
                              expression_statement [setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          });] (163:10-169:13)
                                call_expression [setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          })] (163:10-169:12)
                                  identifier [setProgress] (163:10-163:21)
                                  arguments [(prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          })] (163:21-169:12)
                                    ( [(] (163:21-163:22)
                                    arrow_function [prev => {
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          }] (163:22-169:11)
                                      identifier [prev] (163:22-163:26)
                                      => [=>] (163:27-163:29)
                                      statement_block [{
            if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }
            return prev + 1;
          }] (163:30-169:11)
                                        { [{] (163:30-163:31)
                                        if_statement [if (prev >= 90) {
              clearInterval(progressIntervalRef.current);
              return 90;
            }] (164:12-167:13)
                                          if [if] (164:12-164:14)
                                          parenthesized_expression [(prev >= 90)] (164:15-164:27)
                                            ( [(] (164:15-164:16)
                                            binary_expression [prev >= 90] (164:16-164:26)
                                              identifier [prev] (164:16-164:20)
                                              >= [>=] (164:21-164:23)
                                              number [90] (164:24-164:26)
                                            ) [)] (164:26-164:27)
                                          statement_block [{
              clearInterval(progressIntervalRef.current);
              return 90;
            }] (164:28-167:13)
                                            { [{] (164:28-164:29)
                                            expression_statement [clearInterval(progressIntervalRef.current);] (165:14-165:57)
                                              call_expression [clearInterval(progressIntervalRef.current)] (165:14-165:56)
                                                identifier [clearInterval] (165:14-165:27)
                                                arguments [(progressIntervalRef.current)] (165:27-165:56)
                                                  ( [(] (165:27-165:28)
                                                  member_expression [progressIntervalRef.current] (165:28-165:55)
                                                    identifier [progressIntervalRef] (165:28-165:47)
                                                    . [.] (165:47-165:48)
                                                    property_identifier [current] (165:48-165:55)
                                                  ) [)] (165:55-165:56)
                                              ; [;] (165:56-165:57)
                                            return_statement [return 90;] (166:14-166:24)
                                              return [return] (166:14-166:20)
                                              number [90] (166:21-166:23)
                                              ; [;] (166:23-166:24)
                                            } [}] (167:12-167:13)
                                        return_statement [return prev + 1;] (168:12-168:28)
                                          return [return] (168:12-168:18)
                                          binary_expression [prev + 1] (168:19-168:27)
                                            identifier [prev] (168:19-168:23)
                                            + [+] (168:24-168:25)
                                            number [1] (168:26-168:27)
                                          ; [;] (168:27-168:28)
                                        } [}] (169:10-169:11)
                                    ) [)] (169:11-169:12)
                                ; [;] (169:12-169:13)
                              } [}] (170:8-170:9)
                          , [,] (170:9-170:10)
                          number [50] (170:11-170:13)
                          ) [)] (170:13-170:14)
                    ; [;] (170:14-170:15)
                  lexical_declaration [const result = await makeApiCall(searchQuery);] (172:8-172:54)
                    const [const] (172:8-172:13)
                    variable_declarator [result = await makeApiCall(searchQuery)] (172:14-172:53)
                      identifier [result] (172:14-172:20)
                      = [=] (172:21-172:22)
                      await_expression [await makeApiCall(searchQuery)] (172:23-172:53)
                        await [await] (172:23-172:28)
                        call_expression [makeApiCall(searchQuery)] (172:29-172:53)
                          identifier [makeApiCall] (172:29-172:40)
                          arguments [(searchQuery)] (172:40-172:53)
                            ( [(] (172:40-172:41)
                            identifier [searchQuery] (172:41-172:52)
                            ) [)] (172:52-172:53)
                    ; [;] (172:53-172:54)
                  expression_statement [console.log('Final structured data:', result);] (173:8-173:54)
                    call_expression [console.log('Final structured data:', result)] (173:8-173:53)
                      member_expression [console.log] (173:8-173:19)
                        identifier [console] (173:8-173:15)
                        . [.] (173:15-173:16)
                        property_identifier [log] (173:16-173:19)
                      arguments [('Final structured data:', result)] (173:19-173:53)
                        ( [(] (173:19-173:20)
                        string ['Final structured data:'] (173:20-173:44)
                          ' ['] (173:20-173:21)
                          string_fragment [Final structured data:] (173:21-173:43)
                          ' ['] (173:43-173:44)
                        , [,] (173:44-173:45)
                        identifier [result] (173:46-173:52)
                        ) [)] (173:52-173:53)
                    ; [;] (173:53-173:54)
                  expression_statement [setProgress(100);] (175:8-175:25)
                    call_expression [setProgress(100)] (175:8-175:24)
                      identifier [setProgress] (175:8-175:19)
                      arguments [(100)] (175:19-175:24)
                        ( [(] (175:19-175:20)
                        number [100] (175:20-175:23)
                        ) [)] (175:23-175:24)
                    ; [;] (175:24-175:25)
                  expression_statement [setTimeout(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500);] (176:8-179:16)
                    call_expression [setTimeout(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500)] (176:8-179:15)
                      identifier [setTimeout] (176:8-176:18)
                      arguments [(() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }, 500)] (176:18-179:15)
                        ( [(] (176:18-176:19)
                        arrow_function [() => {
          setIsLoading(false);
          onSearchComplete?.(result);
        }] (176:19-179:9)
                          formal_parameters [()] (176:19-176:21)
                            ( [(] (176:19-176:20)
                            ) [)] (176:20-176:21)
                          => [=>] (176:22-176:24)
                          statement_block [{
          setIsLoading(false);
          onSearchComplete?.(result);
        }] (176:25-179:9)
                            { [{] (176:25-176:26)
                            expression_statement [setIsLoading(false);] (177:10-177:30)
                              call_expression [setIsLoading(false)] (177:10-177:29)
                                identifier [setIsLoading] (177:10-177:22)
                                arguments [(false)] (177:22-177:29)
                                  ( [(] (177:22-177:23)
                                  false [false] (177:23-177:28)
                                  ) [)] (177:28-177:29)
                              ; [;] (177:29-177:30)
                            expression_statement [onSearchComplete?.(result);] (178:10-178:37)
                              call_expression [onSearchComplete?.(result)] (178:10-178:36)
                                identifier [onSearchComplete] (178:10-178:26)
                                ?. [?.] (178:26-178:28)
                                arguments [(result)] (178:28-178:36)
                                  ( [(] (178:28-178:29)
                                  identifier [result] (178:29-178:35)
                                  ) [)] (178:35-178:36)
                              ; [;] (178:36-178:37)
                            } [}] (179:8-179:9)
                        , [,] (179:9-179:10)
                        number [500] (179:11-179:14)
                        ) [)] (179:14-179:15)
                    ; [;] (179:15-179:16)
                  } [}] (180:6-180:7)
                catch_clause [catch (error) {
        setIsLoading(false);
        setProgress(0);
      }] (180:8-183:7)
                  catch [catch] (180:8-180:13)
                  ( [(] (180:14-180:15)
                  identifier [error] (180:15-180:20)
                  ) [)] (180:20-180:21)
                  statement_block [{
        setIsLoading(false);
        setProgress(0);
      }] (180:22-183:7)
                    { [{] (180:22-180:23)
                    expression_statement [setIsLoading(false);] (181:8-181:28)
                      call_expression [setIsLoading(false)] (181:8-181:27)
                        identifier [setIsLoading] (181:8-181:20)
                        arguments [(false)] (181:20-181:27)
                          ( [(] (181:20-181:21)
                          false [false] (181:21-181:26)
                          ) [)] (181:26-181:27)
                      ; [;] (181:27-181:28)
                    expression_statement [setProgress(0);] (182:8-182:23)
                      call_expression [setProgress(0)] (182:8-182:22)
                        identifier [setProgress] (182:8-182:19)
                        arguments [(0)] (182:19-182:22)
                          ( [(] (182:19-182:20)
                          number [0] (182:20-182:21)
                          ) [)] (182:21-182:22)
                      ; [;] (182:22-182:23)
                    } [}] (183:6-183:7)
              if_statement [if (progressIntervalRef.current) {
        clearInterval(progressIntervalRef.current);
      }] (185:6-187:7)
                if [if] (185:6-185:8)
                parenthesized_expression [(progressIntervalRef.current)] (185:9-185:38)
                  ( [(] (185:9-185:10)
                  member_expression [progressIntervalRef.current] (185:10-185:37)
                    identifier [progressIntervalRef] (185:10-185:29)
                    . [.] (185:29-185:30)
                    property_identifier [current] (185:30-185:37)
                  ) [)] (185:37-185:38)
                statement_block [{
        clearInterval(progressIntervalRef.current);
      }] (185:39-187:7)
                  { [{] (185:39-185:40)
                  expression_statement [clearInterval(progressIntervalRef.current);] (186:8-186:51)
                    call_expression [clearInterval(progressIntervalRef.current)] (186:8-186:50)
                      identifier [clearInterval] (186:8-186:21)
                      arguments [(progressIntervalRef.current)] (186:21-186:50)
                        ( [(] (186:21-186:22)
                        member_expression [progressIntervalRef.current] (186:22-186:49)
                          identifier [progressIntervalRef] (186:22-186:41)
                          . [.] (186:41-186:42)
                          property_identifier [current] (186:42-186:49)
                        ) [)] (186:49-186:50)
                    ; [;] (186:50-186:51)
                  } [}] (187:6-187:7)
              } [}] (188:4-188:5)
          } [}] (189:2-189:3)
    ; [;] (189:3-189:4)
  lexical_declaration [const scroll = (direction) => {
    const container = scrollContainerRef.current;
    if (!container) return;

    const scrollAmount = container.querySelector('button').offsetWidth + 16;
    const currentScroll = container.scrollLeft;
    const maxScroll = container.scrollWidth - container.clientWidth;
    
    let targetScroll = direction === 'left' 
      ? currentScroll - scrollAmount 
      : currentScroll + scrollAmount;

    if (targetScroll > maxScroll) targetScroll = 0;
    if (targetScroll < 0) targetScroll = maxScroll;

    container.scrollTo({
      left: targetScroll,
      behavior: 'smooth'
    });
  };] (191:2-210:4)
    const [const] (191:2-191:7)
    variable_declarator [scroll = (direction) => {
    const container = scrollContainerRef.current;
    if (!container) return;

    const scrollAmount = container.querySelector('button').offsetWidth + 16;
    const currentScroll = container.scrollLeft;
    const maxScroll = container.scrollWidth - container.clientWidth;
    
    let targetScroll = direction === 'left' 
      ? currentScroll - scrollAmount 
      : currentScroll + scrollAmount;

    if (targetScroll > maxScroll) targetScroll = 0;
    if (targetScroll < 0) targetScroll = maxScroll;

    container.scrollTo({
      left: targetScroll,
      behavior: 'smooth'
    });
  }] (191:8-210:3)
      identifier [scroll] (191:8-191:14)
      = [=] (191:15-191:16)
      arrow_function [(direction) => {
    const container = scrollContainerRef.current;
    if (!container) return;

    const scrollAmount = container.querySelector('button').offsetWidth + 16;
    const currentScroll = container.scrollLeft;
    const maxScroll = container.scrollWidth - container.clientWidth;
    
    let targetScroll = direction === 'left' 
      ? currentScroll - scrollAmount 
      : currentScroll + scrollAmount;

    if (targetScroll > maxScroll) targetScroll = 0;
    if (targetScroll < 0) targetScroll = maxScroll;

    container.scrollTo({
      left: targetScroll,
      behavior: 'smooth'
    });
  }] (191:17-210:3)
        formal_parameters [(direction)] (191:17-191:28)
          ( [(] (191:17-191:18)
          required_parameter [direction] (191:18-191:27)
            identifier [direction] (191:18-191:27)
          ) [)] (191:27-191:28)
        => [=>] (191:29-191:31)
        statement_block [{
    const container = scrollContainerRef.current;
    if (!container) return;

    const scrollAmount = container.querySelector('button').offsetWidth + 16;
    const currentScroll = container.scrollLeft;
    const maxScroll = container.scrollWidth - container.clientWidth;
    
    let targetScroll = direction === 'left' 
      ? currentScroll - scrollAmount 
      : currentScroll + scrollAmount;

    if (targetScroll > maxScroll) targetScroll = 0;
    if (targetScroll < 0) targetScroll = maxScroll;

    container.scrollTo({
      left: targetScroll,
      behavior: 'smooth'
    });
  }] (191:32-210:3)
          { [{] (191:32-191:33)
          lexical_declaration [const container = scrollContainerRef.current;] (192:4-192:49)
            const [const] (192:4-192:9)
            variable_declarator [container = scrollContainerRef.current] (192:10-192:48)
              identifier [container] (192:10-192:19)
              = [=] (192:20-192:21)
              member_expression [scrollContainerRef.current] (192:22-192:48)
                identifier [scrollContainerRef] (192:22-192:40)
                . [.] (192:40-192:41)
                property_identifier [current] (192:41-192:48)
            ; [;] (192:48-192:49)
          if_statement [if (!container) return;] (193:4-193:27)
            if [if] (193:4-193:6)
            parenthesized_expression [(!container)] (193:7-193:19)
              ( [(] (193:7-193:8)
              unary_expression [!container] (193:8-193:18)
                ! [!] (193:8-193:9)
                identifier [container] (193:9-193:18)
              ) [)] (193:18-193:19)
            return_statement [return;] (193:20-193:27)
              return [return] (193:20-193:26)
              ; [;] (193:26-193:27)
          lexical_declaration [const scrollAmount = container.querySelector('button').offsetWidth + 16;] (195:4-195:76)
            const [const] (195:4-195:9)
            variable_declarator [scrollAmount = container.querySelector('button').offsetWidth + 16] (195:10-195:75)
              identifier [scrollAmount] (195:10-195:22)
              = [=] (195:23-195:24)
              binary_expression [container.querySelector('button').offsetWidth + 16] (195:25-195:75)
                member_expression [container.querySelector('button').offsetWidth] (195:25-195:70)
                  call_expression [container.querySelector('button')] (195:25-195:58)
                    member_expression [container.querySelector] (195:25-195:48)
                      identifier [container] (195:25-195:34)
                      . [.] (195:34-195:35)
                      property_identifier [querySelector] (195:35-195:48)
                    arguments [('button')] (195:48-195:58)
                      ( [(] (195:48-195:49)
                      string ['button'] (195:49-195:57)
                        ' ['] (195:49-195:50)
                        string_fragment [button] (195:50-195:56)
                        ' ['] (195:56-195:57)
                      ) [)] (195:57-195:58)
                  . [.] (195:58-195:59)
                  property_identifier [offsetWidth] (195:59-195:70)
                + [+] (195:71-195:72)
                number [16] (195:73-195:75)
            ; [;] (195:75-195:76)
          lexical_declaration [const currentScroll = container.scrollLeft;] (196:4-196:47)
            const [const] (196:4-196:9)
            variable_declarator [currentScroll = container.scrollLeft] (196:10-196:46)
              identifier [currentScroll] (196:10-196:23)
              = [=] (196:24-196:25)
              member_expression [container.scrollLeft] (196:26-196:46)
                identifier [container] (196:26-196:35)
                . [.] (196:35-196:36)
                property_identifier [scrollLeft] (196:36-196:46)
            ; [;] (196:46-196:47)
          lexical_declaration [const maxScroll = container.scrollWidth - container.clientWidth;] (197:4-197:68)
            const [const] (197:4-197:9)
            variable_declarator [maxScroll = container.scrollWidth - container.clientWidth] (197:10-197:67)
              identifier [maxScroll] (197:10-197:19)
              = [=] (197:20-197:21)
              binary_expression [container.scrollWidth - container.clientWidth] (197:22-197:67)
                member_expression [container.scrollWidth] (197:22-197:43)
                  identifier [container] (197:22-197:31)
                  . [.] (197:31-197:32)
                  property_identifier [scrollWidth] (197:32-197:43)
                - [-] (197:44-197:45)
                member_expression [container.clientWidth] (197:46-197:67)
                  identifier [container] (197:46-197:55)
                  . [.] (197:55-197:56)
                  property_identifier [clientWidth] (197:56-197:67)
            ; [;] (197:67-197:68)
          lexical_declaration [let targetScroll = direction === 'left' 
      ? currentScroll - scrollAmount 
      : currentScroll + scrollAmount;] (199:4-201:37)
            let [let] (199:4-199:7)
            variable_declarator [targetScroll = direction === 'left' 
      ? currentScroll - scrollAmount 
      : currentScroll + scrollAmount] (199:8-201:36)
              identifier [targetScroll] (199:8-199:20)
              = [=] (199:21-199:22)
              ternary_expression [direction === 'left' 
      ? currentScroll - scrollAmount 
      : currentScroll + scrollAmount] (199:23-201:36)
                binary_expression [direction === 'left'] (199:23-199:43)
                  identifier [direction] (199:23-199:32)
                  === [===] (199:33-199:36)
                  string ['left'] (199:37-199:43)
                    ' ['] (199:37-199:38)
                    string_fragment [left] (199:38-199:42)
                    ' ['] (199:42-199:43)
                ? [?] (200:6-200:7)
                binary_expression [currentScroll - scrollAmount] (200:8-200:36)
                  identifier [currentScroll] (200:8-200:21)
                  - [-] (200:22-200:23)
                  identifier [scrollAmount] (200:24-200:36)
                : [:] (201:6-201:7)
                binary_expression [currentScroll + scrollAmount] (201:8-201:36)
                  identifier [currentScroll] (201:8-201:21)
                  + [+] (201:22-201:23)
                  identifier [scrollAmount] (201:24-201:36)
            ; [;] (201:36-201:37)
          if_statement [if (targetScroll > maxScroll) targetScroll = 0;] (203:4-203:51)
            if [if] (203:4-203:6)
            parenthesized_expression [(targetScroll > maxScroll)] (203:7-203:33)
              ( [(] (203:7-203:8)
              binary_expression [targetScroll > maxScroll] (203:8-203:32)
                identifier [targetScroll] (203:8-203:20)
                > [>] (203:21-203:22)
                identifier [maxScroll] (203:23-203:32)
              ) [)] (203:32-203:33)
            expression_statement [targetScroll = 0;] (203:34-203:51)
              assignment_expression [targetScroll = 0] (203:34-203:50)
                identifier [targetScroll] (203:34-203:46)
                = [=] (203:47-203:48)
                number [0] (203:49-203:50)
              ; [;] (203:50-203:51)
          if_statement [if (targetScroll < 0) targetScroll = maxScroll;] (204:4-204:51)
            if [if] (204:4-204:6)
            parenthesized_expression [(targetScroll < 0)] (204:7-204:25)
              ( [(] (204:7-204:8)
              binary_expression [targetScroll < 0] (204:8-204:24)
                identifier [targetScroll] (204:8-204:20)
                < [<] (204:21-204:22)
                number [0] (204:23-204:24)
              ) [)] (204:24-204:25)
            expression_statement [targetScroll = maxScroll;] (204:26-204:51)
              assignment_expression [targetScroll = maxScroll] (204:26-204:50)
                identifier [targetScroll] (204:26-204:38)
                = [=] (204:39-204:40)
                identifier [maxScroll] (204:41-204:50)
              ; [;] (204:50-204:51)
          expression_statement [container.scrollTo({
      left: targetScroll,
      behavior: 'smooth'
    });] (206:4-209:7)
            call_expression [container.scrollTo({
      left: targetScroll,
      behavior: 'smooth'
    })] (206:4-209:6)
              member_expression [container.scrollTo] (206:4-206:22)
                identifier [container] (206:4-206:13)
                . [.] (206:13-206:14)
                property_identifier [scrollTo] (206:14-206:22)
              arguments [({
      left: targetScroll,
      behavior: 'smooth'
    })] (206:22-209:6)
                ( [(] (206:22-206:23)
                object [{
      left: targetScroll,
      behavior: 'smooth'
    }] (206:23-209:5)
                  { [{] (206:23-206:24)
                  pair [left: targetScroll] (207:6-207:24)
                    property_identifier [left] (207:6-207:10)
                    : [:] (207:10-207:11)
                    identifier [targetScroll] (207:12-207:24)
                  , [,] (207:24-207:25)
                  pair [behavior: 'smooth'] (208:6-208:24)
                    property_identifier [behavior] (208:6-208:14)
                    : [:] (208:14-208:15)
                    string ['smooth'] (208:16-208:24)
                      ' ['] (208:16-208:17)
                      string_fragment [smooth] (208:17-208:23)
                      ' ['] (208:23-208:24)
                  } [}] (209:4-209:5)
                ) [)] (209:5-209:6)
            ; [;] (209:6-209:7)
          } [}] (210:2-210:3)
    ; [;] (210:3-210:4)
  expression_statement [useEffect(() => {
    const startAutoScroll = () => {
      scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000);
    };

    if (!isLoading) {
      startAutoScroll();
    }

    return () => {
      if (scrollIntervalRef.current) {
        clearInterval(scrollIntervalRef.current);
      }
    };
  }, [isPaused, isLoading]);] (212:2-230:28)
    call_expression [useEffect(() => {
    const startAutoScroll = () => {
      scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000);
    };

    if (!isLoading) {
      startAutoScroll();
    }

    return () => {
      if (scrollIntervalRef.current) {
        clearInterval(scrollIntervalRef.current);
      }
    };
  }, [isPaused, isLoading])] (212:2-230:27)
      identifier [useEffect] (212:2-212:11)
      arguments [(() => {
    const startAutoScroll = () => {
      scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000);
    };

    if (!isLoading) {
      startAutoScroll();
    }

    return () => {
      if (scrollIntervalRef.current) {
        clearInterval(scrollIntervalRef.current);
      }
    };
  }, [isPaused, isLoading])] (212:11-230:27)
        ( [(] (212:11-212:12)
        arrow_function [() => {
    const startAutoScroll = () => {
      scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000);
    };

    if (!isLoading) {
      startAutoScroll();
    }

    return () => {
      if (scrollIntervalRef.current) {
        clearInterval(scrollIntervalRef.current);
      }
    };
  }] (212:12-230:3)
          formal_parameters [()] (212:12-212:14)
            ( [(] (212:12-212:13)
            ) [)] (212:13-212:14)
          => [=>] (212:15-212:17)
          statement_block [{
    const startAutoScroll = () => {
      scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000);
    };

    if (!isLoading) {
      startAutoScroll();
    }

    return () => {
      if (scrollIntervalRef.current) {
        clearInterval(scrollIntervalRef.current);
      }
    };
  }] (212:18-230:3)
            { [{] (212:18-212:19)
            lexical_declaration [const startAutoScroll = () => {
      scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000);
    };] (213:4-219:6)
              const [const] (213:4-213:9)
              variable_declarator [startAutoScroll = () => {
      scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000);
    }] (213:10-219:5)
                identifier [startAutoScroll] (213:10-213:25)
                = [=] (213:26-213:27)
                arrow_function [() => {
      scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000);
    }] (213:28-219:5)
                  formal_parameters [()] (213:28-213:30)
                    ( [(] (213:28-213:29)
                    ) [)] (213:29-213:30)
                  => [=>] (213:31-213:33)
                  statement_block [{
      scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000);
    }] (213:34-219:5)
                    { [{] (213:34-213:35)
                    expression_statement [scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000);] (214:6-218:15)
                      assignment_expression [scrollIntervalRef.current = setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000)] (214:6-218:14)
                        member_expression [scrollIntervalRef.current] (214:6-214:31)
                          identifier [scrollIntervalRef] (214:6-214:23)
                          . [.] (214:23-214:24)
                          property_identifier [current] (214:24-214:31)
                        = [=] (214:32-214:33)
                        call_expression [setInterval(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000)] (214:34-218:14)
                          identifier [setInterval] (214:34-214:45)
                          arguments [(() => {
        if (!isPaused) {
          scroll('right');
        }
      }, 3000)] (214:45-218:14)
                            ( [(] (214:45-214:46)
                            arrow_function [() => {
        if (!isPaused) {
          scroll('right');
        }
      }] (214:46-218:7)
                              formal_parameters [()] (214:46-214:48)
                                ( [(] (214:46-214:47)
                                ) [)] (214:47-214:48)
                              => [=>] (214:49-214:51)
                              statement_block [{
        if (!isPaused) {
          scroll('right');
        }
      }] (214:52-218:7)
                                { [{] (214:52-214:53)
                                if_statement [if (!isPaused) {
          scroll('right');
        }] (215:8-217:9)
                                  if [if] (215:8-215:10)
                                  parenthesized_expression [(!isPaused)] (215:11-215:22)
                                    ( [(] (215:11-215:12)
                                    unary_expression [!isPaused] (215:12-215:21)
                                      ! [!] (215:12-215:13)
                                      identifier [isPaused] (215:13-215:21)
                                    ) [)] (215:21-215:22)
                                  statement_block [{
          scroll('right');
        }] (215:23-217:9)
                                    { [{] (215:23-215:24)
                                    expression_statement [scroll('right');] (216:10-216:26)
                                      call_expression [scroll('right')] (216:10-216:25)
                                        identifier [scroll] (216:10-216:16)
                                        arguments [('right')] (216:16-216:25)
                                          ( [(] (216:16-216:17)
                                          string ['right'] (216:17-216:24)
                                            ' ['] (216:17-216:18)
                                            string_fragment [right] (216:18-216:23)
                                            ' ['] (216:23-216:24)
                                          ) [)] (216:24-216:25)
                                      ; [;] (216:25-216:26)
                                    } [}] (217:8-217:9)
                                } [}] (218:6-218:7)
                            , [,] (218:7-218:8)
                            number [3000] (218:9-218:13)
                            ) [)] (218:13-218:14)
                      ; [;] (218:14-218:15)
                    } [}] (219:4-219:5)
              ; [;] (219:5-219:6)
            if_statement [if (!isLoading) {
      startAutoScroll();
    }] (221:4-223:5)
              if [if] (221:4-221:6)
              parenthesized_expression [(!isLoading)] (221:7-221:19)
                ( [(] (221:7-221:8)
                unary_expression [!isLoading] (221:8-221:18)
                  ! [!] (221:8-221:9)
                  identifier [isLoading] (221:9-221:18)
                ) [)] (221:18-221:19)
              statement_block [{
      startAutoScroll();
    }] (221:20-223:5)
                { [{] (221:20-221:21)
                expression_statement [startAutoScroll();] (222:6-222:24)
                  call_expression [startAutoScroll()] (222:6-222:23)
                    identifier [startAutoScroll] (222:6-222:21)
                    arguments [()] (222:21-222:23)
                      ( [(] (222:21-222:22)
                      ) [)] (222:22-222:23)
                  ; [;] (222:23-222:24)
                } [}] (223:4-223:5)
            return_statement [return () => {
      if (scrollIntervalRef.current) {
        clearInterval(scrollIntervalRef.current);
      }
    };] (225:4-229:6)
              return [return] (225:4-225:10)
              arrow_function [() => {
      if (scrollIntervalRef.current) {
        clearInterval(scrollIntervalRef.current);
      }
    }] (225:11-229:5)
                formal_parameters [()] (225:11-225:13)
                  ( [(] (225:11-225:12)
                  ) [)] (225:12-225:13)
                => [=>] (225:14-225:16)
                statement_block [{
      if (scrollIntervalRef.current) {
        clearInterval(scrollIntervalRef.current);
      }
    }] (225:17-229:5)
                  { [{] (225:17-225:18)
                  if_statement [if (scrollIntervalRef.current) {
        clearInterval(scrollIntervalRef.current);
      }] (226:6-228:7)
                    if [if] (226:6-226:8)
                    parenthesized_expression [(scrollIntervalRef.current)] (226:9-226:36)
                      ( [(] (226:9-226:10)
                      member_expression [scrollIntervalRef.current] (226:10-226:35)
                        identifier [scrollIntervalRef] (226:10-226:27)
                        . [.] (226:27-226:28)
                        property_identifier [current] (226:28-226:35)
                      ) [)] (226:35-226:36)
                    statement_block [{
        clearInterval(scrollIntervalRef.current);
      }] (226:37-228:7)
                      { [{] (226:37-226:38)
                      expression_statement [clearInterval(scrollIntervalRef.current);] (227:8-227:49)
                        call_expression [clearInterval(scrollIntervalRef.current)] (227:8-227:48)
                          identifier [clearInterval] (227:8-227:21)
                          arguments [(scrollIntervalRef.current)] (227:21-227:48)
                            ( [(] (227:21-227:22)
                            member_expression [scrollIntervalRef.current] (227:22-227:47)
                              identifier [scrollIntervalRef] (227:22-227:39)
                              . [.] (227:39-227:40)
                              property_identifier [current] (227:40-227:47)
                            ) [)] (227:47-227:48)
                        ; [;] (227:48-227:49)
                      } [}] (228:6-228:7)
                  } [}] (229:4-229:5)
              ; [;] (229:5-229:6)
            } [}] (230:2-230:3)
        , [,] (230:3-230:4)
        array [[isPaused, isLoading]] (230:5-230:26)
          [ [[] (230:5-230:6)
          identifier [isPaused] (230:6-230:14)
          , [,] (230:14-230:15)
          identifier [isLoading] (230:16-230:25)
          ] []] (230:25-230:26)
        ) [)] (230:26-230:27)
    ; [;] (230:27-230:28)
  return [return] (232:2-232:8)
  ( [(] (232:9-232:10)
  binary_expression [<div className="w-full max-w-3xl mx-auto px-4 font-subheading">
      {/* Search Input Container */}
      <form 
        onSubmit={handleSubmit}
        className={`
          relative
          backdrop-blur-xl
          bg-white/35
          rounded-xl
          border
          border-white/40
          transition-all
          duration-500
          before:absolute
          before:inset-0
          before:backdrop-blur-xl
          before:bg-white/5
          before:rounded-xl
          before:-z-10
          ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
        `}
      >
        <div className="flex items-center px-6 py-4">
          <Search className={`w-6 h-6 text-white ${isLoading ? 'animate-pulse' : ''}`} />
          <input
            type="text"
            placeholder="What would you like to explore?"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            disabled={searchCompleted}
            className="
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
          />
          <button 
            type="submit"
            className="
              ml-4
              p-1.5
              rounded-full
              bg-white/10
              border
              border-white/20
              transition-all
              duration-300
              hover:bg-white/20
              hover:border-white/30
              hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
              group
              disabled:opacity-50
              disabled:cursor-not-allowed
            "
            disabled={!searchQuery.trim() || isLoading}
          >
            {!searchCompleted] (233:4-298:29)
    binary_expression [<div className="w-full max-w-3xl mx-auto px-4 font-subheading">
      {/* Search Input Container */}
      <form 
        onSubmit={handleSubmit}
        className={`
          relative
          backdrop-blur-xl
          bg-white/35
          rounded-xl
          border
          border-white/40
          transition-all
          duration-500
          before:absolute
          before:inset-0
          before:backdrop-blur-xl
          before:bg-white/5
          before:rounded-xl
          before:-z-10
          ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
        `}
      >
        <div className="flex items-center px-6 py-4">
          <Search className={`w-6 h-6 text-white ${isLoading ? 'animate-pulse' : ''}`} />
          <input
            type="text"
            placeholder="What would you like to explore?"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            disabled={searchCompleted}
            className="
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
          />
          <button 
            type="submit"
            className="
              ml-4
              p-1.5
              rounded-full
              bg-white/10
              border
              border-white/20
              transition-all
              duration-300
              hover:bg-white/20
              hover:border-white/30
              hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
              group
              disabled:opacity-50
              disabled:cursor-not-allowed
            "
            disabled={!searchQuery.trim() || isLoading] (233:4-296:54)
      type_assertion [<div className="w-full max-w-3xl mx-auto px-4 font-subheading">
      {/* Search Input Container */}
      <form 
        onSubmit={handleSubmit}
        className={`
          relative
          backdrop-blur-xl
          bg-white/35
          rounded-xl
          border
          border-white/40
          transition-all
          duration-500
          before:absolute
          before:inset-0
          before:backdrop-blur-xl
          before:bg-white/5
          before:rounded-xl
          before:-z-10
          ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
        `] (233:4-253:9)
        type_arguments [<div] (233:4-233:8)
          < [<] (233:4-233:5)
          type_identifier [div] (233:5-233:8)
          > [] (233:8-233:8)
        assignment_expression [className="w-full max-w-3xl mx-auto px-4 font-subheading">
      {/* Search Input Container */}
      <form 
        onSubmit={handleSubmit}
        className={`
          relative
          backdrop-blur-xl
          bg-white/35
          rounded-xl
          border
          border-white/40
          transition-all
          duration-500
          before:absolute
          before:inset-0
          before:backdrop-blur-xl
          before:bg-white/5
          before:rounded-xl
          before:-z-10
          ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
        `] (233:9-253:9)
          identifier [className] (233:9-233:18)
          = [=] (233:18-233:19)
          binary_expression ["w-full max-w-3xl mx-auto px-4 font-subheading">
      {/* Search Input Container */}
      <form 
        onSubmit={handleSubmit}
        className={`
          relative
          backdrop-blur-xl
          bg-white/35
          rounded-xl
          border
          border-white/40
          transition-all
          duration-500
          before:absolute
          before:inset-0
          before:backdrop-blur-xl
          before:bg-white/5
          before:rounded-xl
          before:-z-10
          ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
        `] (233:19-253:9)
            string ["w-full max-w-3xl mx-auto px-4 font-subheading"] (233:19-233:66)
              " ["] (233:19-233:20)
              string_fragment [w-full max-w-3xl mx-auto px-4 font-subheading] (233:20-233:65)
              " ["] (233:65-233:66)
            > [>] (233:66-233:67)
            binary_expression [{/* Search Input Container */}
      <form 
        onSubmit={handleSubmit}
        className={`
          relative
          backdrop-blur-xl
          bg-white/35
          rounded-xl
          border
          border-white/40
          transition-all
          duration-500
          before:absolute
          before:inset-0
          before:backdrop-blur-xl
          before:bg-white/5
          before:rounded-xl
          before:-z-10
          ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
        `] (234:6-253:9)
              object [{/* Search Input Container */}] (234:6-234:36)
                { [{] (234:6-234:7)
                comment [/* Search Input Container */] (234:7-234:35)
                } [}] (234:35-234:36)
              < [<] (235:6-235:7)
              ERROR [form] (235:7-235:11)
                identifier [form] (235:7-235:11)
              assignment_expression [onSubmit={handleSubmit}
        className={`
          relative
          backdrop-blur-xl
          bg-white/35
          rounded-xl
          border
          border-white/40
          transition-all
          duration-500
          before:absolute
          before:inset-0
          before:backdrop-blur-xl
          before:bg-white/5
          before:rounded-xl
          before:-z-10
          ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
        `] (236:8-253:9)
                identifier [onSubmit] (236:8-236:16)
                = [=] (236:16-236:17)
                assignment_expression [{handleSubmit}
        className={`
          relative
          backdrop-blur-xl
          bg-white/35
          rounded-xl
          border
          border-white/40
          transition-all
          duration-500
          before:absolute
          before:inset-0
          before:backdrop-blur-xl
          before:bg-white/5
          before:rounded-xl
          before:-z-10
          ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
        `] (236:17-253:9)
                  object_pattern [{handleSubmit}] (236:17-236:31)
                    { [{] (236:17-236:18)
                    shorthand_property_identifier_pattern [handleSubmit] (236:18-236:30)
                    } [}] (236:30-236:31)
                  ERROR [className] (237:8-237:17)
                    identifier [className] (237:8-237:17)
                  = [=] (237:17-237:18)
                  ERROR [{] (237:18-237:19)
                    { [{] (237:18-237:19)
                  template_string [`
          relative
          backdrop-blur-xl
          bg-white/35
          rounded-xl
          border
          border-white/40
          transition-all
          duration-500
          before:absolute
          before:inset-0
          before:backdrop-blur-xl
          before:bg-white/5
          before:rounded-xl
          before:-z-10
          ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
        `] (237:19-253:9)
                    ` [`] (237:19-237:20)
                    template_substitution [${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}] (252:10-252:126)
                      ${ [${] (252:10-252:12)
                      ternary_expression [isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'] (252:12-252:125)
                        identifier [isFocused] (252:12-252:21)
                        ? [?] (252:22-252:23)
                        string ['shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60'] (252:24-252:81)
                          ' ['] (252:24-252:25)
                          string_fragment [shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60] (252:25-252:80)
                          ' ['] (252:80-252:81)
                        : [:] (252:82-252:83)
                        string ['hover:border-white/50 hover:bg-white/20'] (252:84-252:125)
                          ' ['] (252:84-252:85)
                          string_fragment [hover:border-white/50 hover:bg-white/20] (252:85-252:124)
                          ' ['] (252:124-252:125)
                      } [}] (252:125-252:126)
                    ` [`] (253:8-253:9)
      ERROR [}] (253:9-253:10)
        } [}] (253:9-253:10)
      > [>] (254:6-254:7)
      type_assertion [<div className="flex items-center px-6 py-4">
          <Search className={`w-6 h-6 text-white ${isLoading ? 'animate-pulse' : ''}`} />
          <input
            type="text"
            placeholder="What would you like to explore?"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            disabled={searchCompleted}
            className="
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
          />
          <button 
            type="submit"
            className="
              ml-4
              p-1.5
              rounded-full
              bg-white/10
              border
              border-white/20
              transition-all
              duration-300
              hover:bg-white/20
              hover:border-white/30
              hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
              group
              disabled:opacity-50
              disabled:cursor-not-allowed
            "
            disabled={!searchQuery.trim() || isLoading] (255:8-296:54)
        type_arguments [<div] (255:8-255:12)
          < [<] (255:8-255:9)
          type_identifier [div] (255:9-255:12)
          > [] (255:12-255:12)
        assignment_expression [className="flex items-center px-6 py-4">
          <Search className={`w-6 h-6 text-white ${isLoading ? 'animate-pulse' : ''}`} />
          <input
            type="text"
            placeholder="What would you like to explore?"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            disabled={searchCompleted}
            className="
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
          />
          <button 
            type="submit"
            className="
              ml-4
              p-1.5
              rounded-full
              bg-white/10
              border
              border-white/20
              transition-all
              duration-300
              hover:bg-white/20
              hover:border-white/30
              hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
              group
              disabled:opacity-50
              disabled:cursor-not-allowed
            "
            disabled={!searchQuery.trim() || isLoading] (255:13-296:54)
          identifier [className] (255:13-255:22)
          = [=] (255:22-255:23)
          binary_expression ["flex items-center px-6 py-4">
          <Search className={`w-6 h-6 text-white ${isLoading ? 'animate-pulse' : ''}`} />
          <input
            type="text"
            placeholder="What would you like to explore?"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            disabled={searchCompleted}
            className="
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
          />
          <button 
            type="submit"
            className="
              ml-4
              p-1.5
              rounded-full
              bg-white/10
              border
              border-white/20
              transition-all
              duration-300
              hover:bg-white/20
              hover:border-white/30
              hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
              group
              disabled:opacity-50
              disabled:cursor-not-allowed
            "
            disabled={!searchQuery.trim() || isLoading] (255:23-296:54)
            string ["flex items-center px-6 py-4"] (255:23-255:52)
              " ["] (255:23-255:24)
              string_fragment [flex items-center px-6 py-4] (255:24-255:51)
              " ["] (255:51-255:52)
            > [>] (255:52-255:53)
            ERROR [<Search className={`w-6 h-6 text-white ${isLoading ? 'animate-pulse' : ''}`} />
          <input
            type="text"
            placeholder="What would you like to explore?"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            disabled={searchCompleted}
            className="
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
          />
          <button 
            type="submit"] (256:10-279:25)
              type_parameters [<Search className={`w-6 h-6 text-white ${isLoading ? 'animate-pulse' : ''}`} />] (256:10-256:89)
                < [<] (256:10-256:11)
                ERROR [Search] (256:11-256:17)
                  identifier [Search] (256:11-256:17)
                type_parameter [className={`w-6 h-6 text-white ${isLoading ? 'animate-pulse' : ''}`] (256:18-256:85)
                  type_identifier [className] (256:18-256:27)
                  default_type [={`w-6 h-6 text-white ${isLoading ? 'animate-pulse' : ''}`] (256:27-256:85)
                    = [=] (256:27-256:28)
                    ERROR [{] (256:28-256:29)
                      { [{] (256:28-256:29)
                    template_literal_type [`w-6 h-6 text-white ${isLoading ? 'animate-pulse' : ''}`] (256:29-256:85)
                      ` [`] (256:29-256:30)
                      template_type [${isLoading ? 'animate-pulse' : ''}] (256:49-256:84)
                        ${ [${] (256:49-256:51)
                        ERROR [isLoading ? 'animate-pulse' :] (256:51-256:80)
                          type_identifier [isLoading] (256:51-256:60)
                          flow_maybe_type [? 'animate-pulse'] (256:61-256:78)
                            ? [?] (256:61-256:62)
                            literal_type ['animate-pulse'] (256:63-256:78)
                              string ['animate-pulse'] (256:63-256:78)
                                ' ['] (256:63-256:64)
                                string_fragment [animate-pulse] (256:64-256:77)
                                ' ['] (256:77-256:78)
                          : [:] (256:79-256:80)
                        literal_type [''] (256:81-256:83)
                          string [''] (256:81-256:83)
                            ' ['] (256:81-256:82)
                            ' ['] (256:82-256:83)
                        } [}] (256:83-256:84)
                      ` [`] (256:84-256:85)
                ERROR [} /] (256:85-256:88)
                  } [}] (256:85-256:86)
                  / [/] (256:87-256:88)
                > [>] (256:88-256:89)
              type_parameters [<input
            type="text"
            placeholder="What would you like to explore?"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            disabled={searchCompleted}
            className="
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
          />] (257:10-277:12)
                < [<] (257:10-257:11)
                type_parameter [input
            type="text"
            placeholder="What would you like to explore?"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            disabled={searchCompleted}
            className="
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}] (257:11-276:46)
                  type_identifier [input] (257:11-257:16)
                  ERROR [type] (258:12-258:16)
                    identifier [type] (258:12-258:16)
                  default_type [="text"
            placeholder="What would you like to explore?"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            disabled={searchCompleted}
            className="
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}] (258:16-276:46)
                    = [=] (258:16-258:17)
                    ERROR ["text"
            placeholder="What would you like to explore?"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            disabled={searchCompleted}
            className="
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "
            onFocus={() => setIsFocused(true)}
            onBlur=] (258:17-276:19)
                      literal_type ["text"] (258:17-258:23)
                        string ["text"] (258:17-258:23)
                          " ["] (258:17-258:18)
                          string_fragment [text] (258:18-258:22)
                          " ["] (258:22-258:23)
                      identifier [placeholder] (259:12-259:23)
                      = [=] (259:23-259:24)
                      literal_type ["What would you like to explore?"] (259:24-259:57)
                        string ["What would you like to explore?"] (259:24-259:57)
                          " ["] (259:24-259:25)
                          string_fragment [What would you like to explore?] (259:25-259:56)
                          " ["] (259:56-259:57)
                      identifier [value] (260:12-260:17)
                      = [=] (260:17-260:18)
                      { [{] (260:18-260:19)
                      type_identifier [searchQuery] (260:19-260:30)
                      } [}] (260:30-260:31)
                      type_identifier [onChange] (261:12-261:20)
                      = [=] (261:20-261:21)
                      object_type [{(e) => setSearchQuery(e.target.value)}] (261:21-261:60)
                        { [{] (261:21-261:22)
                        ERROR [(e) =>] (261:22-261:28)
                          formal_parameters [(e)] (261:22-261:25)
                            ( [(] (261:22-261:23)
                            required_parameter [e] (261:23-261:24)
                              identifier [e] (261:23-261:24)
                            ) [)] (261:24-261:25)
                          => [=>] (261:26-261:28)
                        method_signature [setSearchQuery(e.target.value)] (261:29-261:59)
                          property_identifier [setSearchQuery] (261:29-261:43)
                          formal_parameters [(e.target.value)] (261:43-261:59)
                            ( [(] (261:43-261:44)
                            required_parameter [e.target.value] (261:44-261:58)
                              member_expression [e.target.value] (261:44-261:58)
                                member_expression [e.target] (261:44-261:52)
                                  identifier [e] (261:44-261:45)
                                  . [.] (261:45-261:46)
                                  property_identifier [target] (261:46-261:52)
                                . [.] (261:52-261:53)
                                property_identifier [value] (261:53-261:58)
                            ) [)] (261:58-261:59)
                        } [}] (261:59-261:60)
                      identifier [disabled] (262:12-262:20)
                      = [=] (262:20-262:21)
                      { [{] (262:21-262:22)
                      type_identifier [searchCompleted] (262:22-262:37)
                      } [}] (262:37-262:38)
                      type_identifier [className] (263:12-263:21)
                      = [=] (263:21-263:22)
                      literal_type ["
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "] (263:22-274:13)
                        string ["
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            "] (263:22-274:13)
                          " ["] (263:22-263:23)
                          string_fragment [
              w-full
              ml-4
              border-none
              bg-transparent
              text-grey
              placeholder-grey/50
              focus:outline-none
              font-light
              text-lg
              disabled:opacity-50
            ] (263:23-274:12)
                          " ["] (274:12-274:13)
                      identifier [onFocus] (275:12-275:19)
                      = [=] (275:19-275:20)
                      { [{] (275:20-275:21)
                      function_type [() => setIsFocused(true)] (275:21-275:45)
                        formal_parameters [()] (275:21-275:23)
                          ( [(] (275:21-275:22)
                          ) [)] (275:22-275:23)
                        => [=>] (275:24-275:26)
                        ERROR [setIsFocused] (275:27-275:39)
                          identifier [setIsFocused] (275:27-275:39)
                        parenthesized_type [(true)] (275:39-275:45)
                          ( [(] (275:39-275:40)
                          literal_type [true] (275:40-275:44)
                            true [true] (275:40-275:44)
                          ) [)] (275:44-275:45)
                      } [}] (275:45-275:46)
                      type_identifier [onBlur] (276:12-276:18)
                      = [=] (276:18-276:19)
                    object_type [{() => setIsFocused(false)}] (276:19-276:46)
                      { [{] (276:19-276:20)
                      ERROR [() =>] (276:20-276:25)
                        formal_parameters [()] (276:20-276:22)
                          ( [(] (276:20-276:21)
                          ) [)] (276:21-276:22)
                        => [=>] (276:23-276:25)
                      method_signature [setIsFocused(false)] (276:26-276:45)
                        property_identifier [setIsFocused] (276:26-276:38)
                        formal_parameters [(false)] (276:38-276:45)
                          ( [(] (276:38-276:39)
                          ERROR [false] (276:39-276:44)
                            false [false] (276:39-276:44)
                          ) [)] (276:44-276:45)
                      } [}] (276:45-276:46)
                ERROR [/] (277:10-277:11)
                  / [/] (277:10-277:11)
                > [>] (277:11-277:12)
              < [<] (278:10-278:11)
              identifier [button] (278:11-278:17)
              type [type] (279:12-279:16)
              = [=] (279:16-279:17)
              " ["] (279:17-279:18)
              identifier [submit] (279:18-279:24)
              " ["] (279:24-279:25)
            assignment_expression [className="
              ml-4
              p-1.5
              rounded-full
              bg-white/10
              border
              border-white/20
              transition-all
              duration-300
              hover:bg-white/20
              hover:border-white/30
              hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
              group
              disabled:opacity-50
              disabled:cursor-not-allowed
            "
            disabled={!searchQuery.trim() || isLoading] (280:12-296:54)
              identifier [className] (280:12-280:21)
              = [=] (280:21-280:22)
              assignment_expression ["
              ml-4
              p-1.5
              rounded-full
              bg-white/10
              border
              border-white/20
              transition-all
              duration-300
              hover:bg-white/20
              hover:border-white/30
              hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
              group
              disabled:opacity-50
              disabled:cursor-not-allowed
            "
            disabled={!searchQuery.trim() || isLoading] (280:22-296:54)
                member_expression ["
              ml-4
              p-1.5
              rounded-full
              bg-white/10
              border
              border-white/20
              transition-all
              duration-300
              hover:bg-white/20
              hover:border-white/30
              hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
              group
              disabled:opacity-50
              disabled:cursor-not-allowed
            "
            disabled] (280:22-296:20)
                  string ["
              ml-4
              p-1.5
              rounded-full
              bg-white/10
              border
              border-white/20
              transition-all
              duration-300
              hover:bg-white/20
              hover:border-white/30
              hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
              group
              disabled:opacity-50
              disabled:cursor-not-allowed
            "] (280:22-295:13)
                    " ["] (280:22-280:23)
                    string_fragment [
              ml-4
              p-1.5
              rounded-full
              bg-white/10
              border
              border-white/20
              transition-all
              duration-300
              hover:bg-white/20
              hover:border-white/30
              hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
              group
              disabled:opacity-50
              disabled:cursor-not-allowed
            ] (280:23-295:12)
                    " ["] (295:12-295:13)
                  optional_chain [] (295:13-295:13)
                    ?. [] (295:13-295:13)
                  property_identifier [disabled] (296:12-296:20)
                = [=] (296:20-296:21)
                ERROR [{] (296:21-296:22)
                  { [{] (296:21-296:22)
                binary_expression [!searchQuery.trim() || isLoading] (296:22-296:54)
                  unary_expression [!searchQuery.trim()] (296:22-296:41)
                    ! [!] (296:22-296:23)
                    call_expression [searchQuery.trim()] (296:23-296:41)
                      member_expression [searchQuery.trim] (296:23-296:39)
                        identifier [searchQuery] (296:23-296:34)
                        . [.] (296:34-296:35)
                        property_identifier [trim] (296:35-296:39)
                      arguments [()] (296:39-296:41)
                        ( [(] (296:39-296:40)
                        ) [)] (296:40-296:41)
                  || [||] (296:42-296:44)
                  identifier [isLoading] (296:45-296:54)
    ERROR [}] (296:54-296:55)
      } [}] (296:54-296:55)
    > [>] (297:10-297:11)
    ERROR [{] (298:12-298:13)
      { [{] (298:12-298:13)
    unary_expression [!searchCompleted] (298:13-298:29)
      ! [!] (298:13-298:14)
      identifier [searchCompleted] (298:14-298:29)
  && [&&] (298:30-298:32)
  type_parameters [<Send 
              className={`
                w-5 
                h-5 
                text-white 
                group-hover:text-grey/70 
                transition-colors 
                duration-300
                ${isLoading ? 'animate-pulse' : ''}
              `}
            />}
          </button>
        </div>] (298:33-310:14)
    < [<] (298:33-298:34)
    ERROR [Send] (298:34-298:38)
      identifier [Send] (298:34-298:38)
    type_parameter [className={`
                w-5 
                h-5 
                text-white 
                group-hover:text-grey/70 
                transition-colors 
                duration-300
                ${isLoading ? 'animate-pulse' : ''}
              `}
            />}
          </button>
        </div] (299:14-310:13)
      type_identifier [className] (299:14-299:23)
      default_type [={`
                w-5 
                h-5 
                text-white 
                group-hover:text-grey/70 
                transition-colors 
                duration-300
                ${isLoading ? 'animate-pulse' : ''}
              `}
            />}
          </button>
        </div] (299:23-310:13)
        = [=] (299:23-299:24)
        ERROR [{`
                w-5 
                h-5 
                text-white 
                group-hover:text-grey/70 
                transition-colors 
                duration-300
                ${isLoading ? 'animate-pulse' : ''}
              `}
            />}
          </button>
        </] (299:24-310:10)
          { [{] (299:24-299:25)
          template_literal_type [`
                w-5 
                h-5 
                text-white 
                group-hover:text-grey/70 
                transition-colors 
                duration-300
                ${isLoading ? 'animate-pulse' : ''}
              `] (299:25-307:15)
            ` [`] (299:25-299:26)
            template_type [${isLoading ? 'animate-pulse' : ''}] (306:16-306:51)
              ${ [${] (306:16-306:18)
              ERROR [isLoading ? 'animate-pulse' :] (306:18-306:47)
                type_identifier [isLoading] (306:18-306:27)
                flow_maybe_type [? 'animate-pulse'] (306:28-306:45)
                  ? [?] (306:28-306:29)
                  literal_type ['animate-pulse'] (306:30-306:45)
                    string ['animate-pulse'] (306:30-306:45)
                      ' ['] (306:30-306:31)
                      string_fragment [animate-pulse] (306:31-306:44)
                      ' ['] (306:44-306:45)
                : [:] (306:46-306:47)
              literal_type [''] (306:48-306:50)
                string [''] (306:48-306:50)
                  ' ['] (306:48-306:49)
                  ' ['] (306:49-306:50)
              } [}] (306:50-306:51)
            ` [`] (307:14-307:15)
          } [}] (307:15-307:16)
          / [/] (308:12-308:13)
          > [>] (308:13-308:14)
          } [}] (308:14-308:15)
          type_parameters [</button>] (309:10-309:19)
            < [<] (309:10-309:11)
            ERROR [/] (309:11-309:12)
              / [/] (309:11-309:12)
            type_parameter [button] (309:12-309:18)
              type_identifier [button] (309:12-309:18)
            > [>] (309:18-309:19)
          < [<] (310:8-310:9)
          / [/] (310:9-310:10)
        type_identifier [div] (310:10-310:13)
    > [>] (310:13-310:14)
  ERROR [</form>

      {/* Loading Progress */}
      {isLoading &&] (311:6-314:19)
    < [<] (311:6-311:7)
    / [/] (311:7-311:8)
    identifier [form] (311:8-311:12)
    > [>] (311:12-311:13)
    { [{] (313:6-313:7)
    comment [/* Loading Progress */] (313:7-313:29)
    } [}] (313:29-313:30)
    { [{] (314:6-314:7)
    identifier [isLoading] (314:7-314:16)
    && [&&] (314:17-314:19)
  ( [(] (314:20-314:21)
  type_arguments [<div] (315:8-315:12)
    < [<] (315:8-315:9)
    type_identifier [div] (315:9-315:12)
    > [] (315:12-315:12)
  identifier [className] (315:13-315:22)
  = [=] (315:22-315:23)
  string ["mt-8 space-y-6"] (315:23-315:39)
    " ["] (315:23-315:24)
    string_fragment [mt-8 space-y-6] (315:24-315:38)
    " ["] (315:38-315:39)
  > [>] (315:39-315:40)
  type_arguments [<div] (316:10-316:14)
    < [<] (316:10-316:11)
    type_identifier [div] (316:11-316:14)
    > [] (316:14-316:14)
  identifier [className] (316:15-316:24)
  = [=] (316:24-316:25)
  string ["backdrop-blur-xl bg-white/20 border border-white/40 rounded-xl shadow-[0_0_30px_rgba(255,255,255,0.2)]"] (316:25-316:129)
    " ["] (316:25-316:26)
    string_fragment [backdrop-blur-xl bg-white/20 border border-white/40 rounded-xl shadow-[0_0_30px_rgba(255,255,255,0.2)]] (316:26-316:128)
    " ["] (316:128-316:129)
  > [>] (316:129-316:130)
  type_arguments [<div] (317:12-317:16)
    < [<] (317:12-317:13)
    type_identifier [div] (317:13-317:16)
    > [] (317:16-317:16)
  identifier [className] (317:17-317:26)
  = [=] (317:26-317:27)
  string ["p-6"] (317:27-317:32)
    " ["] (317:27-317:28)
    string_fragment [p-6] (317:28-317:31)
    " ["] (317:31-317:32)
  > [>] (317:32-317:33)
  type_arguments [<div] (318:14-318:18)
    < [<] (318:14-318:15)
    type_identifier [div] (318:15-318:18)
    > [] (318:18-318:18)
  identifier [className] (318:19-318:28)
  = [=] (318:28-318:29)
  string ["space-y-4"] (318:29-318:40)
    " ["] (318:29-318:30)
    string_fragment [space-y-4] (318:30-318:39)
    " ["] (318:39-318:40)
  > [>] (318:40-318:41)
  type_arguments [<div] (319:16-319:20)
    < [<] (319:16-319:17)
    type_identifier [div] (319:17-319:20)
    > [] (319:20-319:20)
  identifier [className] (319:21-319:30)
  = [=] (319:30-319:31)
  string ["flex items-center justify-between"] (319:31-319:66)
    " ["] (319:31-319:32)
    string_fragment [flex items-center justify-between] (319:32-319:65)
    " ["] (319:65-319:66)
  > [>] (319:66-319:67)
  type_arguments [<span] (320:18-320:23)
    < [<] (320:18-320:19)
    type_identifier [span] (320:19-320:23)
    > [] (320:23-320:23)
  identifier [className] (320:24-320:33)
  = [=] (320:33-320:34)
  string ["text-lg font-medium text-grey"] (320:34-320:65)
    " ["] (320:34-320:35)
    string_fragment [text-lg font-medium text-grey] (320:35-320:64)
    " ["] (320:64-320:65)
  > [>] (320:65-320:66)
  identifier [Processing] (320:66-320:76)
  ERROR [Query...] (320:77-320:85)
    identifier [Query] (320:77-320:82)
    ... [...] (320:82-320:85)
  < [<] (320:85-320:86)
  instantiation_expression [/span>
                  <Loader className="w-6 h-6 animate-spin text-grey" />] (320:86-321:71)
    regex [/span>] (320:86-320:92)
      / [/] (320:86-320:87)
      regex_pattern [span>] (320:87-320:92)
      / [] (320:92-320:92)
    type_arguments [<Loader className="w-6 h-6 animate-spin text-grey" />] (321:18-321:71)
      < [<] (321:18-321:19)
      ERROR [Loader] (321:19-321:25)
        identifier [Loader] (321:19-321:25)
      type_identifier [className] (321:26-321:35)
      ERROR [="w-6 h-6 animate-spin text-grey" /] (321:35-321:70)
        = [=] (321:35-321:36)
        string ["w-6 h-6 animate-spin text-grey"] (321:36-321:68)
          " ["] (321:36-321:37)
          string_fragment [w-6 h-6 animate-spin text-grey] (321:37-321:67)
          " ["] (321:67-321:68)
        / [/] (321:69-321:70)
      > [>] (321:70-321:71)
  < [<] (322:16-322:17)
  regex [/div>] (322:17-322:22)
    / [/] (322:17-322:18)
    regex_pattern [div>] (322:18-322:22)
    / [] (322:22-322:22)
  < [<] (324:16-324:17)
  ERROR [div] (324:17-324:20)
    identifier [div] (324:17-324:20)
  identifier [className] (324:21-324:30)
  = [=] (324:30-324:31)
  binary_expression ["relative w-full h-2 bg-white/10 rounded-full overflow-hidden">
                  <div 
                    className="absolute top-0 left-0 h-full bg-white rounded-full transition-all duration-300 shadow-[0_0_20px_rgba(255,255,255,0.7)] animate-pulse"
                    style={{ width: `${progress}%` }}
                  />
                </div] (324:31-329:21)
    string ["relative w-full h-2 bg-white/10 rounded-full overflow-hidden"] (324:31-324:93)
      " ["] (324:31-324:32)
      string_fragment [relative w-full h-2 bg-white/10 rounded-full overflow-hidden] (324:32-324:92)
      " ["] (324:92-324:93)
    > [>] (324:93-324:94)
    ERROR [<div 
                    className="absolute top-0 left-0 h-full bg-white rounded-full transition-all duration-300 shadow-[0_0_20px_rgba(255,255,255,0.7)] animate-pulse"
                    style={{ width: `${progress}%` }}
                  />
                </] (325:18-329:18)
      type_parameters [<div 
                    className="absolute top-0 left-0 h-full bg-white rounded-full transition-all duration-300 shadow-[0_0_20px_rgba(255,255,255,0.7)] animate-pulse"
                    style={{ width: `${progress}%` }}
                  />] (325:18-328:20)
        < [<] (325:18-325:19)
        ERROR [div] (325:19-325:22)
          identifier [div] (325:19-325:22)
        type_parameter [className="absolute top-0 left-0 h-full bg-white rounded-full transition-all duration-300 shadow-[0_0_20px_rgba(255,255,255,0.7)] animate-pulse"
                    style={{ width: `${progress}%`] (326:20-327:50)
          type_identifier [className] (326:20-326:29)
          default_type [="absolute top-0 left-0 h-full bg-white rounded-full transition-all duration-300 shadow-[0_0_20px_rgba(255,255,255,0.7)] animate-pulse"
                    style={{ width: `${progress}%`] (326:29-327:50)
            = [=] (326:29-326:30)
            ERROR ["absolute top-0 left-0 h-full bg-white rounded-full transition-all duration-300 shadow-[0_0_20px_rgba(255,255,255,0.7)] animate-pulse"
                    style={{ width:] (326:30-327:35)
              literal_type ["absolute top-0 left-0 h-full bg-white rounded-full transition-all duration-300 shadow-[0_0_20px_rgba(255,255,255,0.7)] animate-pulse"] (326:30-326:164)
                string ["absolute top-0 left-0 h-full bg-white rounded-full transition-all duration-300 shadow-[0_0_20px_rgba(255,255,255,0.7)] animate-pulse"] (326:30-326:164)
                  " ["] (326:30-326:31)
                  string_fragment [absolute top-0 left-0 h-full bg-white rounded-full transition-all duration-300 shadow-[0_0_20px_rgba(255,255,255,0.7)] animate-pulse] (326:31-326:163)
                  " ["] (326:163-326:164)
              identifier [style] (327:20-327:25)
              = [=] (327:25-327:26)
              { [{] (327:26-327:27)
              { [{] (327:27-327:28)
              identifier [width] (327:29-327:34)
              : [:] (327:34-327:35)
            template_literal_type [`${progress}%`] (327:36-327:50)
              ` [`] (327:36-327:37)
              template_type [${progress}] (327:37-327:48)
                ${ [${] (327:37-327:39)
                type_identifier [progress] (327:39-327:47)
                } [}] (327:47-327:48)
              ` [`] (327:49-327:50)
        ERROR [}}
                  /] (327:51-328:19)
          } [}] (327:51-327:52)
          } [}] (327:52-327:53)
          / [/] (328:18-328:19)
        > [>] (328:19-328:20)
      < [<] (329:16-329:17)
      / [/] (329:17-329:18)
    identifier [div] (329:18-329:21)
  > [>] (329:21-329:22)
  type_arguments [<div] (331:16-331:20)
    < [<] (331:16-331:17)
    type_identifier [div] (331:17-331:20)
    > [] (331:20-331:20)
  identifier [className] (331:21-331:30)
  = [=] (331:30-331:31)
  string ["grid grid-cols-3 gap-4 text-sm text-grey"] (331:31-331:73)
    " ["] (331:31-331:32)
    string_fragment [grid grid-cols-3 gap-4 text-sm text-grey] (331:32-331:72)
    " ["] (331:72-331:73)
  > [>] (331:73-331:74)
  type_arguments [<div] (332:18-332:22)
    < [<] (332:18-332:19)
    type_identifier [div] (332:19-332:22)
    > [] (332:22-332:22)
  identifier [className] (332:23-332:32)
  = [=] (332:32-332:33)
  binary_expression ["flex items-center gap-2">
                    {progress > 33] (332:33-333:34)
    binary_expression ["flex items-center gap-2">
                    {progress] (332:33-333:29)
      string ["flex items-center gap-2"] (332:33-332:58)
        " ["] (332:33-332:34)
        string_fragment [flex items-center gap-2] (332:34-332:57)
        " ["] (332:57-332:58)
      > [>] (332:58-332:59)
      object [{progress] (333:20-333:29)
        { [{] (333:20-333:21)
        shorthand_property_identifier [progress] (333:21-333:29)
        } [] (333:29-333:29)
    > [>] (333:30-333:31)
    number [33] (333:32-333:34)
  ? [?] (333:35-333:36)
  parenthesized_expression [(
                      <Check className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]" />
                    )] (333:37-335:21)
    ( [(] (333:37-333:38)
    type_assertion [<Check className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]"] (334:22-334:98)
      type_arguments [<Check] (334:22-334:28)
        < [<] (334:22-334:23)
        type_identifier [Check] (334:23-334:28)
        > [] (334:28-334:28)
      assignment_expression [className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]"] (334:29-334:98)
        identifier [className] (334:29-334:38)
        = [=] (334:38-334:39)
        string ["w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]"] (334:39-334:98)
          " ["] (334:39-334:40)
          string_fragment [w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]] (334:40-334:97)
          " ["] (334:97-334:98)
    ERROR [/>] (334:99-334:101)
      / [/] (334:99-334:100)
      > [>] (334:100-334:101)
    ) [)] (335:20-335:21)
  : [:] (335:22-335:23)
  parenthesized_expression [(
                      <Loader className="w-4 h-4 animate-spin text-grey" />
                    )] (335:24-337:21)
    ( [(] (335:24-335:25)
    type_assertion [<Loader className="w-4 h-4 animate-spin text-grey"] (336:22-336:72)
      type_arguments [<Loader] (336:22-336:29)
        < [<] (336:22-336:23)
        type_identifier [Loader] (336:23-336:29)
        > [] (336:29-336:29)
      assignment_expression [className="w-4 h-4 animate-spin text-grey"] (336:30-336:72)
        identifier [className] (336:30-336:39)
        = [=] (336:39-336:40)
        string ["w-4 h-4 animate-spin text-grey"] (336:40-336:72)
          " ["] (336:40-336:41)
          string_fragment [w-4 h-4 animate-spin text-grey] (336:41-336:71)
          " ["] (336:71-336:72)
    ERROR [/>] (336:73-336:75)
      / [/] (336:73-336:74)
      > [>] (336:74-336:75)
    ) [)] (337:20-337:21)
  ERROR [}
                    Analyzing Query] (337:21-338:35)
    } [}] (337:21-337:22)
    identifier [Analyzing] (338:20-338:29)
    identifier [Query] (338:30-338:35)
  < [<] (339:18-339:19)
  regex [/div>] (339:19-339:24)
    / [/] (339:19-339:20)
    regex_pattern [div>] (339:20-339:24)
    / [] (339:24-339:24)
  < [<] (340:18-340:19)
  ERROR [div] (340:19-340:22)
    identifier [div] (340:19-340:22)
  identifier [className] (340:23-340:32)
  = [=] (340:32-340:33)
  binary_expression ["flex items-center gap-2">
                    {progress > 66] (340:33-341:34)
    binary_expression ["flex items-center gap-2">
                    {progress] (340:33-341:29)
      string ["flex items-center gap-2"] (340:33-340:58)
        " ["] (340:33-340:34)
        string_fragment [flex items-center gap-2] (340:34-340:57)
        " ["] (340:57-340:58)
      > [>] (340:58-340:59)
      object [{progress] (341:20-341:29)
        { [{] (341:20-341:21)
        shorthand_property_identifier [progress] (341:21-341:29)
        } [] (341:29-341:29)
    > [>] (341:30-341:31)
    number [66] (341:32-341:34)
  ? [?] (341:35-341:36)
  parenthesized_expression [(
                      <Check className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]" />
                    )] (341:37-343:21)
    ( [(] (341:37-341:38)
    type_assertion [<Check className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]"] (342:22-342:98)
      type_arguments [<Check] (342:22-342:28)
        < [<] (342:22-342:23)
        type_identifier [Check] (342:23-342:28)
        > [] (342:28-342:28)
      assignment_expression [className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]"] (342:29-342:98)
        identifier [className] (342:29-342:38)
        = [=] (342:38-342:39)
        string ["w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]"] (342:39-342:98)
          " ["] (342:39-342:40)
          string_fragment [w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]] (342:40-342:97)
          " ["] (342:97-342:98)
    ERROR [/>] (342:99-342:101)
      / [/] (342:99-342:100)
      > [>] (342:100-342:101)
    ) [)] (343:20-343:21)
  : [:] (343:22-343:23)
  parenthesized_expression [(
                      <Loader className="w-4 h-4 animate-spin text-grey" />
                    )] (343:24-345:21)
    ( [(] (343:24-343:25)
    type_assertion [<Loader className="w-4 h-4 animate-spin text-grey"] (344:22-344:72)
      type_arguments [<Loader] (344:22-344:29)
        < [<] (344:22-344:23)
        type_identifier [Loader] (344:23-344:29)
        > [] (344:29-344:29)
      assignment_expression [className="w-4 h-4 animate-spin text-grey"] (344:30-344:72)
        identifier [className] (344:30-344:39)
        = [=] (344:39-344:40)
        string ["w-4 h-4 animate-spin text-grey"] (344:40-344:72)
          " ["] (344:40-344:41)
          string_fragment [w-4 h-4 animate-spin text-grey] (344:41-344:71)
          " ["] (344:71-344:72)
    ERROR [/>] (344:73-344:75)
      / [/] (344:73-344:74)
      > [>] (344:74-344:75)
    ) [)] (345:20-345:21)
  ERROR [}
                    Processing] (345:21-346:30)
    } [}] (345:21-345:22)
    identifier [Processing] (346:20-346:30)
  < [<] (347:18-347:19)
  regex [/div>] (347:19-347:24)
    / [/] (347:19-347:20)
    regex_pattern [div>] (347:20-347:24)
    / [] (347:24-347:24)
  < [<] (348:18-348:19)
  ERROR [div] (348:19-348:22)
    identifier [div] (348:19-348:22)
  identifier [className] (348:23-348:32)
  = [=] (348:32-348:33)
  binary_expression ["flex items-center gap-2">
                    {progress > 90] (348:33-349:34)
    binary_expression ["flex items-center gap-2">
                    {progress] (348:33-349:29)
      string ["flex items-center gap-2"] (348:33-348:58)
        " ["] (348:33-348:34)
        string_fragment [flex items-center gap-2] (348:34-348:57)
        " ["] (348:57-348:58)
      > [>] (348:58-348:59)
      object [{progress] (349:20-349:29)
        { [{] (349:20-349:21)
        shorthand_property_identifier [progress] (349:21-349:29)
        } [] (349:29-349:29)
    > [>] (349:30-349:31)
    number [90] (349:32-349:34)
  ? [?] (349:35-349:36)
  parenthesized_expression [(
                      <Check className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]" />
                    )] (349:37-351:21)
    ( [(] (349:37-349:38)
    type_assertion [<Check className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]"] (350:22-350:98)
      type_arguments [<Check] (350:22-350:28)
        < [<] (350:22-350:23)
        type_identifier [Check] (350:23-350:28)
        > [] (350:28-350:28)
      assignment_expression [className="w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]"] (350:29-350:98)
        identifier [className] (350:29-350:38)
        = [=] (350:38-350:39)
        string ["w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]"] (350:39-350:98)
          " ["] (350:39-350:40)
          string_fragment [w-4 h-4 text-grey shadow-[0_0_10px_rgba(255,255,255,0.7)]] (350:40-350:97)
          " ["] (350:97-350:98)
    ERROR [/>] (350:99-350:101)
      / [/] (350:99-350:100)
      > [>] (350:100-350:101)
    ) [)] (351:20-351:21)
  : [:] (351:22-351:23)
  binary_expression [(
                      <Loader className="w-4 h-4 animate-spin text-grey" />
                    )}
                    Generating Response
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Recommendations Carousel */}
      {!searchCompleted && !isLoading] (351:24-364:37)
    member_expression [(
                      <Loader className="w-4 h-4 animate-spin text-grey" />
                    )}
                    Generating Response
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Recommendations Carousel */}
      {!searchCompleted] (351:24-364:23)
      non_null_expression [(
                      <Loader className="w-4 h-4 animate-spin text-grey" />
                    )}
                    Generating Response
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Recommendations Carousel */}
      {!] (351:24-364:8)
        binary_expression [(
                      <Loader className="w-4 h-4 animate-spin text-grey" />
                    )}
                    Generating Response
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Recommendations Carousel */}] (351:24-363:38)
          binary_expression [(
                      <Loader className="w-4 h-4 animate-spin text-grey" />
                    )}
                    Generating Response
                  </div>
                </div] (351:24-356:21)
            parenthesized_expression [(
                      <Loader className="w-4 h-4 animate-spin text-grey" />
                    )] (351:24-353:21)
              ( [(] (351:24-351:25)
              type_assertion [<Loader className="w-4 h-4 animate-spin text-grey"] (352:22-352:72)
                type_arguments [<Loader] (352:22-352:29)
                  < [<] (352:22-352:23)
                  type_identifier [Loader] (352:23-352:29)
                  > [] (352:29-352:29)
                assignment_expression [className="w-4 h-4 animate-spin text-grey"] (352:30-352:72)
                  identifier [className] (352:30-352:39)
                  = [=] (352:39-352:40)
                  string ["w-4 h-4 animate-spin text-grey"] (352:40-352:72)
                    " ["] (352:40-352:41)
                    string_fragment [w-4 h-4 animate-spin text-grey] (352:41-352:71)
                    " ["] (352:71-352:72)
              ERROR [/>] (352:73-352:75)
                / [/] (352:73-352:74)
                > [>] (352:74-352:75)
              ) [)] (353:20-353:21)
            ERROR [}
                    Generating Response] (353:21-354:39)
              } [}] (353:21-353:22)
              identifier [Generating] (354:20-354:30)
              identifier [Response] (354:31-354:39)
            < [<] (355:18-355:19)
            regex [/div>
                </div] (355:19-356:21)
              / [/] (355:19-355:20)
              regex_pattern [div>] (355:20-355:24)
              ERROR [<] (356:16-356:17)
                < [<] (356:16-356:17)
              / [/] (356:17-356:18)
              regex_flags [div] (356:18-356:21)
          > [>] (356:21-356:22)
          type_assertion [</div>
            </div>
          </div>
        </div>
      )}

      {/* Recommendations Carousel */}] (357:14-363:38)
            type_arguments [</div>] (357:14-357:20)
              < [<] (357:14-357:15)
              ERROR [/] (357:15-357:16)
                / [/] (357:15-357:16)
              type_identifier [div] (357:16-357:19)
              > [>] (357:19-357:20)
            type_assertion [</div>
          </div>
        </div>
      )}

      {/* Recommendations Carousel */}] (358:12-363:38)
              type_arguments [</div>] (358:12-358:18)
                < [<] (358:12-358:13)
                ERROR [/] (358:13-358:14)
                  / [/] (358:13-358:14)
                type_identifier [div] (358:14-358:17)
                > [>] (358:17-358:18)
              type_assertion [</div>
        </div>
      )}

      {/* Recommendations Carousel */}] (359:10-363:38)
                type_arguments [</div>] (359:10-359:16)
                  < [<] (359:10-359:11)
                  ERROR [/] (359:11-359:12)
                    / [/] (359:11-359:12)
                  type_identifier [div] (359:12-359:15)
                  > [>] (359:15-359:16)
                ERROR [</div>
      )}] (360:8-361:8)
                  type_parameters [</div>] (360:8-360:14)
                    < [<] (360:8-360:9)
                    ERROR [/] (360:9-360:10)
                      / [/] (360:9-360:10)
                    type_parameter [div] (360:10-360:13)
                      type_identifier [div] (360:10-360:13)
                    > [>] (360:13-360:14)
                  ) [)] (361:6-361:7)
                  } [}] (361:7-361:8)
                object [{/* Recommendations Carousel */}] (363:6-363:38)
                  { [{] (363:6-363:7)
                  comment [/* Recommendations Carousel */] (363:7-363:37)
                  } [}] (363:37-363:38)
        ERROR [{] (364:6-364:7)
          { [{] (364:6-364:7)
        ! [!] (364:7-364:8)
      optional_chain [] (364:8-364:8)
        ?. [] (364:8-364:8)
      property_identifier [searchCompleted] (364:8-364:23)
    && [&&] (364:24-364:26)
    unary_expression [!isLoading] (364:27-364:37)
      ! [!] (364:27-364:28)
      identifier [isLoading] (364:28-364:37)
  && [&&] (364:38-364:40)
  ( [(] (364:41-364:42)
  ERROR [<div 
          className="mt-6 relative"
          onMouseEnter={() => setIsPaused(true)}
          onMouseLeave={() => setIsPaused(false)}
        >
          <button
            onClick={() => scroll('left')}] (365:8-371:42)
    arrow_function [<div 
          className="mt-6 relative"
          onMouseEnter={() => setIsPaused(true)}
          onMouseLeave={() => setIsPaused(false)}
        >
          <button
            onClick={() => scroll('left')] (365:8-371:41)
      type_parameters [<div 
          className="mt-6 relative"
          onMouseEnter={() => setIsPaused(true)}
          onMouseLeave={() => setIsPaused(false)}
        >] (365:8-369:9)
        < [<] (365:8-365:9)
        ERROR [div] (365:9-365:12)
          identifier [div] (365:9-365:12)
        type_parameter [className="mt-6 relative"
          onMouseEnter={() => setIsPaused(true)}
          onMouseLeave={() => setIsPaused(false)}] (366:10-368:49)
          type_identifier [className] (366:10-366:19)
          default_type [="mt-6 relative"
          onMouseEnter={() => setIsPaused(true)}
          onMouseLeave={() => setIsPaused(false)}] (366:19-368:49)
            = [=] (366:19-366:20)
            ERROR ["mt-6 relative"
          onMouseEnter={() => setIsPaused(true)}
          onMouseLeave=] (366:20-368:23)
              literal_type ["mt-6 relative"] (366:20-366:35)
                string ["mt-6 relative"] (366:20-366:35)
                  " ["] (366:20-366:21)
                  string_fragment [mt-6 relative] (366:21-366:34)
                  " ["] (366:34-366:35)
              identifier [onMouseEnter] (367:10-367:22)
              = [=] (367:22-367:23)
              { [{] (367:23-367:24)
              function_type [() => setIsPaused(true)] (367:24-367:47)
                formal_parameters [()] (367:24-367:26)
                  ( [(] (367:24-367:25)
                  ) [)] (367:25-367:26)
                => [=>] (367:27-367:29)
                ERROR [setIsPaused] (367:30-367:41)
                  identifier [setIsPaused] (367:30-367:41)
                parenthesized_type [(true)] (367:41-367:47)
                  ( [(] (367:41-367:42)
                  literal_type [true] (367:42-367:46)
                    true [true] (367:42-367:46)
                  ) [)] (367:46-367:47)
              } [}] (367:47-367:48)
              type_identifier [onMouseLeave] (368:10-368:22)
              = [=] (368:22-368:23)
            object_type [{() => setIsPaused(false)}] (368:23-368:49)
              { [{] (368:23-368:24)
              ERROR [() =>] (368:24-368:29)
                formal_parameters [()] (368:24-368:26)
                  ( [(] (368:24-368:25)
                  ) [)] (368:25-368:26)
                => [=>] (368:27-368:29)
              method_signature [setIsPaused(false)] (368:30-368:48)
                property_identifier [setIsPaused] (368:30-368:41)
                formal_parameters [(false)] (368:41-368:48)
                  ( [(] (368:41-368:42)
                  ERROR [false] (368:42-368:47)
                    false [false] (368:42-368:47)
                  ) [)] (368:47-368:48)
              } [}] (368:48-368:49)
        > [>] (369:8-369:9)
      ERROR [<button
            onClick={] (370:10-371:21)
        < [<] (370:10-370:11)
        identifier [button] (370:11-370:17)
        identifier [onClick] (371:12-371:19)
        = [=] (371:19-371:20)
        { [{] (371:20-371:21)
      formal_parameters [()] (371:21-371:23)
        ( [(] (371:21-371:22)
        ) [)] (371:22-371:23)
      => [=>] (371:24-371:26)
      call_expression [scroll('left')] (371:27-371:41)
        identifier [scroll] (371:27-371:33)
        arguments [('left')] (371:33-371:41)
          ( [(] (371:33-371:34)
          string ['left'] (371:34-371:40)
            ' ['] (371:34-371:35)
            string_fragment [left] (371:35-371:39)
            ' ['] (371:39-371:40)
          ) [)] (371:40-371:41)
    } [}] (371:41-371:42)
  identifier [className] (372:12-372:21)
  = [=] (372:21-372:22)
  string ["absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 z-10
              w-8 h-8 rounded-full bg-white/10 backdrop-blur-lg border border-white/20
              flex items-center justify-center
              transition-all duration-300
              hover:bg-white/20 hover:border-white/30
              disabled:opacity-0 disabled:pointer-events-none"] (372:22-377:62)
    " ["] (372:22-372:23)
    string_fragment [absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 z-10
              w-8 h-8 rounded-full bg-white/10 backdrop-blur-lg border border-white/20
              flex items-center justify-center
              transition-all duration-300
              hover:bg-white/20 hover:border-white/30
              disabled:opacity-0 disabled:pointer-events-none] (372:23-377:61)
    " ["] (377:61-377:62)
  > [>] (378:10-378:11)
  type_arguments [<ChevronLeft] (379:12-379:24)
    < [<] (379:12-379:13)
    type_identifier [ChevronLeft] (379:13-379:24)
    > [] (379:24-379:24)
  identifier [className] (379:25-379:34)
  = [=] (379:34-379:35)
  string ["w-4 h-4 text-grey/50"] (379:35-379:57)
    " ["] (379:35-379:36)
    string_fragment [w-4 h-4 text-grey/50] (379:36-379:56)
    " ["] (379:56-379:57)
  / [/] (379:58-379:59)
  ERROR [>] (379:59-379:60)
    > [>] (379:59-379:60)
  type_arguments [</button>] (380:10-380:19)
    < [<] (380:10-380:11)
    ERROR [/] (380:11-380:12)
      / [/] (380:11-380:12)
    type_identifier [button] (380:12-380:18)
    > [>] (380:18-380:19)
  ERROR [<div
            ref={scrollContainerRef}
            className="flex items-center gap-4 overflow-x-hidden scroll-smooth mx-8"
          >] (382:10-385:11)
    type_parameters [<div
            ref={scrollContainerRef}
            className="flex items-center gap-4 overflow-x-hidden scroll-smooth mx-8"
          >] (382:10-385:11)
      < [<] (382:10-382:11)
      ERROR [div] (382:11-382:14)
        identifier [div] (382:11-382:14)
      type_parameter [ref={scrollContainerRef}
            className="flex items-center gap-4 overflow-x-hidden scroll-smooth mx-8"] (383:12-384:84)
        type_identifier [ref] (383:12-383:15)
        default_type [={scrollContainerRef}
            className="flex items-center gap-4 overflow-x-hidden scroll-smooth mx-8"] (383:15-384:84)
          = [=] (383:15-383:16)
          ERROR [{scrollContainerRef}
            className=] (383:16-384:22)
            object_type [{scrollContainerRef}] (383:16-383:36)
              { [{] (383:16-383:17)
              property_signature [scrollContainerRef] (383:17-383:35)
                property_identifier [scrollContainerRef] (383:17-383:35)
              } [}] (383:35-383:36)
            identifier [className] (384:12-384:21)
            = [=] (384:21-384:22)
          literal_type ["flex items-center gap-4 overflow-x-hidden scroll-smooth mx-8"] (384:22-384:84)
            string ["flex items-center gap-4 overflow-x-hidden scroll-smooth mx-8"] (384:22-384:84)
              " ["] (384:22-384:23)
              string_fragment [flex items-center gap-4 overflow-x-hidden scroll-smooth mx-8] (384:23-384:83)
              " ["] (384:83-384:84)
      > [>] (385:10-385:11)
  { [{] (386:12-386:13)
  ERROR [[...recommendations, ...recommendations].] (386:13-386:54)
    array_pattern [[...recommendations, ...recommendations]] (386:13-386:53)
      [ [[] (386:13-386:14)
      rest_pattern [...recommendations] (386:14-386:32)
        ... [...] (386:14-386:17)
        identifier [recommendations] (386:17-386:32)
      , [,] (386:32-386:33)
      rest_pattern [...recommendations] (386:34-386:52)
        ... [...] (386:34-386:37)
        identifier [recommendations] (386:37-386:52)
      ] []] (386:52-386:53)
    . [.] (386:53-386:54)
  property_identifier [map] (386:54-386:57)
  ( [(] (386:57-386:58)
  formal_parameters [(recommendation, index)] (386:58-386:81)
    ( [(] (386:58-386:59)
    required_parameter [recommendation] (386:59-386:73)
      identifier [recommendation] (386:59-386:73)
    , [,] (386:73-386:74)
    required_parameter [index] (386:75-386:80)
      identifier [index] (386:75-386:80)
    ) [)] (386:80-386:81)
  => [=>] (386:82-386:84)
  ( [(] (386:85-386:86)
  ERROR [<button
                key={index}
                onClick={() => setSearchQuery(recommendation)}] (387:14-389:62)
    type_parameters [<button
                key={index}
                onClick={() => setSearchQuery] (387:14-389:45)
      < [<] (387:14-387:15)
      type_parameter [button
                key={index}
                onClick={() => setSearchQuery] (387:15-389:45)
        type_identifier [button] (387:15-387:21)
        ERROR [key] (388:16-388:19)
          identifier [key] (388:16-388:19)
        default_type [={index}
                onClick={() => setSearchQuery] (388:19-389:45)
          = [=] (388:19-388:20)
          ERROR [{index}
                onClick={] (388:20-389:25)
            object_type [{index}] (388:20-388:27)
              { [{] (388:20-388:21)
              property_signature [index] (388:21-388:26)
                property_identifier [index] (388:21-388:26)
              } [}] (388:26-388:27)
            identifier [onClick] (389:16-389:23)
            = [=] (389:23-389:24)
            { [{] (389:24-389:25)
          function_type [() => setSearchQuery] (389:25-389:45)
            formal_parameters [()] (389:25-389:27)
              ( [(] (389:25-389:26)
              ) [)] (389:26-389:27)
            => [=>] (389:28-389:30)
            type_identifier [setSearchQuery] (389:31-389:45)
      > [] (389:45-389:45)
    formal_parameters [(recommendation)] (389:45-389:61)
      ( [(] (389:45-389:46)
      required_parameter [recommendation] (389:46-389:60)
        identifier [recommendation] (389:46-389:60)
      ) [)] (389:60-389:61)
    } [}] (389:61-389:62)
  identifier [className] (390:16-390:25)
  = [=] (390:25-390:26)
  binary_expression ["
                  whitespace-nowrap
                  px-6
                  py-2.5
                  rounded-full
                  backdrop-blur-lg
                  bg-white/10
                  border
                  border-white/20
                  text-grey/50
                  text-sm
                  transition-all
                  duration-300
                  hover:bg-white/20
                  hover:border-white/30
                  hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
                  flex-shrink-0
                "
              >
                {recommendation}
              </button>
            ))}
          </div] (390:26-412:15)
    string ["
                  whitespace-nowrap
                  px-6
                  py-2.5
                  rounded-full
                  backdrop-blur-lg
                  bg-white/10
                  border
                  border-white/20
                  text-grey/50
                  text-sm
                  transition-all
                  duration-300
                  hover:bg-white/20
                  hover:border-white/30
                  hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
                  flex-shrink-0
                "] (390:26-407:17)
      " ["] (390:26-390:27)
      string_fragment [
                  whitespace-nowrap
                  px-6
                  py-2.5
                  rounded-full
                  backdrop-blur-lg
                  bg-white/10
                  border
                  border-white/20
                  text-grey/50
                  text-sm
                  transition-all
                  duration-300
                  hover:bg-white/20
                  hover:border-white/30
                  hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]
                  flex-shrink-0
                ] (390:27-407:16)
      " ["] (407:16-407:17)
    > [>] (408:14-408:15)
    binary_expression [{recommendation}
              </button>
            ))}
          </div] (409:16-412:15)
      object [{recommendation}] (409:16-409:32)
        { [{] (409:16-409:17)
        shorthand_property_identifier [recommendation] (409:17-409:31)
        } [}] (409:31-409:32)
      < [<] (410:14-410:15)
      regex [/button>
            ))}
          </div] (410:15-412:15)
        / [/] (410:15-410:16)
        regex_pattern [button>] (410:16-410:23)
        ERROR [))}
          <] (411:12-412:11)
          ) [)] (411:12-411:13)
          ) [)] (411:13-411:14)
          } [}] (411:14-411:15)
          < [<] (412:10-412:11)
        / [/] (412:11-412:12)
        regex_flags [div] (412:12-412:15)
  > [>] (412:15-412:16)
  ERROR [<button
            onClick={() => scroll('right')}
            className="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 z-10
              w-8 h-8 rounded-full bg-white/10 backdrop-blur-lg border border-white/20
              flex items-center justify-center
              transition-all duration-300
              hover:bg-white/20 hover:border-white/30
              disabled:opacity-0 disabled:pointer-events-none"
          >
            <ChevronRight] (414:10-423:25)
    type_parameters [<button
            onClick={() => scroll('right')}
            className="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 z-10
              w-8 h-8 rounded-full bg-white/10 backdrop-blur-lg border border-white/20
              flex items-center justify-center
              transition-all duration-300
              hover:bg-white/20 hover:border-white/30
              disabled:opacity-0 disabled:pointer-events-none"
          >] (414:10-422:11)
      < [<] (414:10-414:11)
      ERROR [button] (414:11-414:17)
        identifier [button] (414:11-414:17)
      type_parameter [onClick={() => scroll('right')}
            className="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 z-10
              w-8 h-8 rounded-full bg-white/10 backdrop-blur-lg border border-white/20
              flex items-center justify-center
              transition-all duration-300
              hover:bg-white/20 hover:border-white/30
              disabled:opacity-0 disabled:pointer-events-none"] (415:12-421:62)
        type_identifier [onClick] (415:12-415:19)
        default_type [={() => scroll('right')}
            className="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 z-10
              w-8 h-8 rounded-full bg-white/10 backdrop-blur-lg border border-white/20
              flex items-center justify-center
              transition-all duration-300
              hover:bg-white/20 hover:border-white/30
              disabled:opacity-0 disabled:pointer-events-none"] (415:19-421:62)
          = [=] (415:19-415:20)
          ERROR [{() => scroll('right')}
            className=] (415:20-416:22)
            object_type [{() => scroll('right')}] (415:20-415:43)
              { [{] (415:20-415:21)
              ERROR [() =>] (415:21-415:26)
                formal_parameters [()] (415:21-415:23)
                  ( [(] (415:21-415:22)
                  ) [)] (415:22-415:23)
                => [=>] (415:24-415:26)
              method_signature [scroll('right')] (415:27-415:42)
                property_identifier [scroll] (415:27-415:33)
                formal_parameters [('right')] (415:33-415:42)
                  ( [(] (415:33-415:34)
                  ERROR ['right'] (415:34-415:41)
                    string ['right'] (415:34-415:41)
                      ' ['] (415:34-415:35)
                      string_fragment [right] (415:35-415:40)
                      ' ['] (415:40-415:41)
                  ) [)] (415:41-415:42)
              } [}] (415:42-415:43)
            identifier [className] (416:12-416:21)
            = [=] (416:21-416:22)
          literal_type ["absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 z-10
              w-8 h-8 rounded-full bg-white/10 backdrop-blur-lg border border-white/20
              flex items-center justify-center
              transition-all duration-300
              hover:bg-white/20 hover:border-white/30
              disabled:opacity-0 disabled:pointer-events-none"] (416:22-421:62)
            string ["absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 z-10
              w-8 h-8 rounded-full bg-white/10 backdrop-blur-lg border border-white/20
              flex items-center justify-center
              transition-all duration-300
              hover:bg-white/20 hover:border-white/30
              disabled:opacity-0 disabled:pointer-events-none"] (416:22-421:62)
              " ["] (416:22-416:23)
              string_fragment [absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 z-10
              w-8 h-8 rounded-full bg-white/10 backdrop-blur-lg border border-white/20
              flex items-center justify-center
              transition-all duration-300
              hover:bg-white/20 hover:border-white/30
              disabled:opacity-0 disabled:pointer-events-none] (416:23-421:61)
              " ["] (421:61-421:62)
      > [>] (422:10-422:11)
    < [<] (423:12-423:13)
    identifier [ChevronRight] (423:13-423:25)
  assignment_expression [className="w-4 h-4 text-grey/50" />
          </button>
        </div>
      )}
    </div>
  );
};

export default SearchInput] (423:26-431:26)
    identifier [className] (423:26-423:35)
    = [=] (423:35-423:36)
    binary_expression ["w-4 h-4 text-grey/50" />
          </button>
        </div>
      )}
    </div>
  );
};

export default SearchInput] (423:36-431:26)
      binary_expression ["w-4 h-4 text-grey/50" />
          </button>
        </div>
      )}
    </div] (423:36-427:9)
        string ["w-4 h-4 text-grey/50"] (423:36-423:58)
          " ["] (423:36-423:37)
          string_fragment [w-4 h-4 text-grey/50] (423:37-423:57)
          " ["] (423:57-423:58)
        / [/] (423:59-423:60)
        ERROR [>] (423:60-423:61)
          > [>] (423:60-423:61)
        type_assertion [</button>
        </div>
      )}
    </div] (424:10-427:9)
          type_arguments [</button>] (424:10-424:19)
            < [<] (424:10-424:11)
            ERROR [/] (424:11-424:12)
              / [/] (424:11-424:12)
            type_identifier [button] (424:12-424:18)
            > [>] (424:18-424:19)
          ERROR [</div>
      )}
    </] (425:8-427:6)
            type_parameters [</div>] (425:8-425:14)
              < [<] (425:8-425:9)
              ERROR [/] (425:9-425:10)
                / [/] (425:9-425:10)
              type_parameter [div] (425:10-425:13)
                type_identifier [div] (425:10-425:13)
              > [>] (425:13-425:14)
            ) [)] (426:6-426:7)
            } [}] (426:7-426:8)
            < [<] (427:4-427:5)
            / [/] (427:5-427:6)
          identifier [div] (427:6-427:9)
      > [>] (427:9-427:10)
      ERROR [);
};

export default] (428:2-431:14)
        ) [)] (428:2-428:3)
        ; [;] (428:3-428:4)
        } [}] (429:0-429:1)
        ; [;] (429:1-429:2)
        export [export] (431:0-431:6)
        identifier [default] (431:7-431:14)
      identifier [SearchInput] (431:15-431:26)
  ; [;] (431:26-431:27)
