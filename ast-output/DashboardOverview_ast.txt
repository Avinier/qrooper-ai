AST for temp_dir\ARTGuru-AI-main\app\components\Dashboard\DashboardOverview.tsx
==================================================
ERROR [import React, { useState } from 'react';
import { Link } from '@remix-run/react';
import { AlertCircle, Target, TrendingUp } from 'lucide-react';
import GlowingInput, { GlowingButton } from '../UI/GlowingInput';

const PainPointComponent = ({ data }) => {
  return (
    <div className="space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

const TriggerComponent = ({ data }) => {
  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

const StrategicComponent = ({ data }) => {
  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

const DashboardCard = ({ item }) => {
  const [isFocused, setIsFocused] = useState(false);
  
  const getComponent = () => {
    switch(item.type) {
      case 'painPoints':
        return <PainPointComponent data={item.data} />;
      case 'triggers':
        return <TriggerComponent data={item.data} />;
      case 'strategic':
        return <StrategicComponent data={item.data} />;
      default:
        return null;
    }
  };

  return (
    <div
      className={`
        relative
        break-inside-avoid
        ${item.height}
        backdrop-blur-xl
        bg-white/20
        rounded-xl
        border
        border-white/40
        transition-all
        duration-500
        before:absolute
        before:inset-0
        before:backdrop-blur-xl
        before:bg-white/5
        before:rounded-xl
        before:-z-10
        block
        mb-6
        overflow-hidden
        font-subheading
        ${item.width || ''}
        ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
      `}
      onMouseEnter={() => setIsFocused(true)}
      onMouseLeave={() => setIsFocused(false)}
    >
      {getComponent()}
    </div>
  );
};

const DashboardOverview = ({ items }) => {
  // const items = [
  //   {
  //     id: 1,
  //     type: 'painPoints',
  //     height: 'h-64',
  //     width: 'col-span-2',
  //     data: [
  //       { id: 1, source: 'Reddit', text: "Can't find fresh coffee beans in my area", frequency: 75 },
  //       { id: 2, source: 'Quora', text: "Tired of inconsistent coffee quality", frequency: 82 },
  //       { id: 3, source: 'Reviews', text: "Regular grocery store coffee goes stale", frequency: 68 }
  //     ]
  //   },
  //   {
  //     id: 2,
  //     type: 'strategic',
  //     height: 'h-[400px]',
  //     width: 'col-span-1',
  //     data: [
  //       { id: 1, category: 'USP', text: 'Emphasize bean freshness date on packaging' },
  //       { id: 2, category: 'Messaging', text: 'Focus on "expert-curated" selection process' },
  //       { id: 3, category: 'Target', text: 'Target urban professionals aged 25-40' },
  //       { id: 4, category: 'Channel', text: 'Leverage Instagram and LinkedIn for brand positioning' }
  //     ]
  //   },
  //   {
  //     id: 3,
  //     type: 'triggers',
  //     height: 'min-h-72',
  //     width: 'col-span-3',
  //     data: [
  //       { id: 1, type: 'Emotional', text: 'Fear of missing perfect morning coffee', strength: 0.9 },
  //       { id: 2, type: 'Practical', text: 'Desire for convenience', strength: 0.85 },
  //       { id: 3, type: 'Social', text: 'Status of being a coffee connoisseur', strength: 0.75 }
  //     ]
  //   }
  // ];

  

  return (
    <div className="
      w-[90vw]
      h-[90vh]
      mx-auto
      my-8
      border
      border-white
      rounded-lg
      backdrop-blur-xl
      bg-background/60
      shadow-[0_0_25px_rgba(255,255,255,0.6)]
      border-white/60
      overflow-auto
    ">
      <div className="p-6">
        <h1 className="text-2xl font-semibold mb-6 text-center font-subheading text-grey/80">
          Overview
        </h1>
        <div className="grid grid-cols-3 gap-6">
          {items.map(item => (
            <DashboardCard key={item.id} item={item} />
          ))}
        </div>
        <div className='w-[75%] ml-[400px] my-10'>
        <GlowingInput placeholder='Enter your social media link...'/>
        </div>
      </div>
    </div>
  );
};

export default DashboardOverview;] (0:0-204:33)
  import_statement [import React, { useState } from 'react';] (0:0-0:40)
    import [import] (0:0-0:6)
    import_clause [React, { useState }] (0:7-0:26)
      identifier [React] (0:7-0:12)
      , [,] (0:12-0:13)
      named_imports [{ useState }] (0:14-0:26)
        { [{] (0:14-0:15)
        import_specifier [useState] (0:16-0:24)
          identifier [useState] (0:16-0:24)
        } [}] (0:25-0:26)
    from [from] (0:27-0:31)
    string ['react'] (0:32-0:39)
      ' ['] (0:32-0:33)
      string_fragment [react] (0:33-0:38)
      ' ['] (0:38-0:39)
    ; [;] (0:39-0:40)
  import_statement [import { Link } from '@remix-run/react';] (1:0-1:40)
    import [import] (1:0-1:6)
    import_clause [{ Link }] (1:7-1:15)
      named_imports [{ Link }] (1:7-1:15)
        { [{] (1:7-1:8)
        import_specifier [Link] (1:9-1:13)
          identifier [Link] (1:9-1:13)
        } [}] (1:14-1:15)
    from [from] (1:16-1:20)
    string ['@remix-run/react'] (1:21-1:39)
      ' ['] (1:21-1:22)
      string_fragment [@remix-run/react] (1:22-1:38)
      ' ['] (1:38-1:39)
    ; [;] (1:39-1:40)
  import_statement [import { AlertCircle, Target, TrendingUp } from 'lucide-react';] (2:0-2:63)
    import [import] (2:0-2:6)
    import_clause [{ AlertCircle, Target, TrendingUp }] (2:7-2:42)
      named_imports [{ AlertCircle, Target, TrendingUp }] (2:7-2:42)
        { [{] (2:7-2:8)
        import_specifier [AlertCircle] (2:9-2:20)
          identifier [AlertCircle] (2:9-2:20)
        , [,] (2:20-2:21)
        import_specifier [Target] (2:22-2:28)
          identifier [Target] (2:22-2:28)
        , [,] (2:28-2:29)
        import_specifier [TrendingUp] (2:30-2:40)
          identifier [TrendingUp] (2:30-2:40)
        } [}] (2:41-2:42)
    from [from] (2:43-2:47)
    string ['lucide-react'] (2:48-2:62)
      ' ['] (2:48-2:49)
      string_fragment [lucide-react] (2:49-2:61)
      ' ['] (2:61-2:62)
    ; [;] (2:62-2:63)
  import_statement [import GlowingInput, { GlowingButton } from '../UI/GlowingInput';] (3:0-3:65)
    import [import] (3:0-3:6)
    import_clause [GlowingInput, { GlowingButton }] (3:7-3:38)
      identifier [GlowingInput] (3:7-3:19)
      , [,] (3:19-3:20)
      named_imports [{ GlowingButton }] (3:21-3:38)
        { [{] (3:21-3:22)
        import_specifier [GlowingButton] (3:23-3:36)
          identifier [GlowingButton] (3:23-3:36)
        } [}] (3:37-3:38)
    from [from] (3:39-3:43)
    string ['../UI/GlowingInput'] (3:44-3:64)
      ' ['] (3:44-3:45)
      string_fragment [../UI/GlowingInput] (3:45-3:63)
      ' ['] (3:63-3:64)
    ; [;] (3:64-3:65)
  lexical_declaration [const PainPointComponent = ({ data }) => {
  return (
    <div className="space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
};] (5:0-29:2)
    const [const] (5:0-5:5)
    variable_declarator [PainPointComponent = ({ data }) => {
  return (
    <div className="space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
}] (5:6-29:1)
      identifier [PainPointComponent] (5:6-5:24)
      = [=] (5:25-5:26)
      arrow_function [({ data }) => {
  return (
    <div className="space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
}] (5:27-29:1)
        formal_parameters [({ data })] (5:27-5:37)
          ( [(] (5:27-5:28)
          required_parameter [{ data }] (5:28-5:36)
            object_pattern [{ data }] (5:28-5:36)
              { [{] (5:28-5:29)
              shorthand_property_identifier_pattern [data] (5:30-5:34)
              } [}] (5:35-5:36)
          ) [)] (5:36-5:37)
        => [=>] (5:38-5:40)
        statement_block [{
  return (
    <div className="space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
}] (5:41-29:1)
          { [{] (5:41-5:42)
          return_statement [return (
    <div className="space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))}
      </div>
    </div>
  );] (6:2-28:4)
            return [return] (6:2-6:8)
            parenthesized_expression [(
    <div className="space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))}
      </div>
    </div>
  )] (6:9-28:3)
              ( [(] (6:9-6:10)
              binary_expression [<div className="space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))}
      </div>
    </div>] (7:4-27:10)
                binary_expression [<div className="space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))}
      </div>
    </div] (7:4-27:9)
                  type_assertion [<div className="space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (7:4-25:10)
                    type_arguments [<div] (7:4-7:8)
                      < [<] (7:4-7:5)
                      type_identifier [div] (7:5-7:8)
                      > [] (7:8-7:8)
                    assignment_expression [className="space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (7:9-25:10)
                      identifier [className] (7:9-7:18)
                      = [=] (7:18-7:19)
                      binary_expression ["space-y-5 p-4 w-full">
      <div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (7:19-25:10)
                        string ["space-y-5 p-4 w-full"] (7:19-7:41)
                          " ["] (7:19-7:20)
                          string_fragment [space-y-5 p-4 w-full] (7:20-7:40)
                          " ["] (7:40-7:41)
                        > [>] (7:41-7:42)
                        type_assertion [<div className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (8:6-25:10)
                          type_arguments [<div] (8:6-8:10)
                            < [<] (8:6-8:7)
                            type_identifier [div] (8:7-8:10)
                            > [] (8:10-8:10)
                          assignment_expression [className="flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (8:11-25:10)
                            identifier [className] (8:11-8:20)
                            = [=] (8:20-8:21)
                            binary_expression ["flex items-center gap-2 mb-4">
        <AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (8:21-25:10)
                              string ["flex items-center gap-2 mb-4"] (8:21-8:51)
                                " ["] (8:21-8:22)
                                string_fragment [flex items-center gap-2 mb-4] (8:22-8:50)
                                " ["] (8:50-8:51)
                              > [>] (8:51-8:52)
                              type_assertion [<AlertCircle className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (9:8-25:10)
                                type_arguments [<AlertCircle] (9:8-9:20)
                                  < [<] (9:8-9:9)
                                  type_identifier [AlertCircle] (9:9-9:20)
                                  > [] (9:20-9:20)
                                assignment_expression [className="w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (9:21-25:10)
                                  identifier [className] (9:21-9:30)
                                  = [=] (9:30-9:31)
                                  binary_expression ["w-6 h-6 text-lilac" />
        <h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (9:31-25:10)
                                    string ["w-6 h-6 text-lilac"] (9:31-9:51)
                                      " ["] (9:31-9:32)
                                      string_fragment [w-6 h-6 text-lilac] (9:32-9:50)
                                      " ["] (9:50-9:51)
                                    / [/] (9:52-9:53)
                                    ERROR [>] (9:53-9:54)
                                      > [>] (9:53-9:54)
                                    type_assertion [<h3 className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (10:8-25:10)
                                      type_arguments [<h3] (10:8-10:11)
                                        < [<] (10:8-10:9)
                                        type_identifier [h3] (10:9-10:11)
                                        > [] (10:11-10:11)
                                      assignment_expression [className="text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (10:12-25:10)
                                        identifier [className] (10:12-10:21)
                                        = [=] (10:21-10:22)
                                        binary_expression ["text-lg font-semibold text-grey/80">Pain Points</h3>
      </div>
      <div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (10:22-25:10)
                                          binary_expression ["text-lg font-semibold text-grey/80">Pain Points</h3>
      </div] (10:22-11:11)
                                            string ["text-lg font-semibold text-grey/80"] (10:22-10:58)
                                              " ["] (10:22-10:23)
                                              string_fragment [text-lg font-semibold text-grey/80] (10:23-10:57)
                                              " ["] (10:57-10:58)
                                            > [>] (10:58-10:59)
                                            ERROR [Pain] (10:59-10:63)
                                              identifier [Pain] (10:59-10:63)
                                            binary_expression [Points</h3>
      </div] (10:64-11:11)
                                              identifier [Points] (10:64-10:70)
                                              < [<] (10:70-10:71)
                                              regex [/h3>
      </div] (10:71-11:11)
                                                / [/] (10:71-10:72)
                                                regex_pattern [h3>] (10:72-10:75)
                                                ERROR [<] (11:6-11:7)
                                                  < [<] (11:6-11:7)
                                                / [/] (11:7-11:8)
                                                regex_flags [div] (11:8-11:11)
                                          > [>] (11:11-11:12)
                                          type_assertion [<div className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (12:6-25:10)
                                            type_arguments [<div] (12:6-12:10)
                                              < [<] (12:6-12:7)
                                              type_identifier [div] (12:7-12:10)
                                              > [] (12:10-12:10)
                                            assignment_expression [className="flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (12:11-25:10)
                                              identifier [className] (12:11-12:20)
                                              = [=] (12:20-12:21)
                                              binary_expression ["flex gap-4 overflow-x-auto pb-2 w-full">
        {data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (12:21-25:10)
                                                string ["flex gap-4 overflow-x-auto pb-2 w-full"] (12:21-12:61)
                                                  " ["] (12:21-12:22)
                                                  string_fragment [flex gap-4 overflow-x-auto pb-2 w-full] (12:22-12:60)
                                                  " ["] (12:60-12:61)
                                                > [>] (12:61-12:62)
                                                call_expression [{data.map(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (13:8-25:10)
                                                  member_expression [{data.map] (13:8-13:17)
                                                    object [{data] (13:8-13:13)
                                                      { [{] (13:8-13:9)
                                                      shorthand_property_identifier [data] (13:9-13:13)
                                                      } [] (13:13-13:13)
                                                    . [.] (13:13-13:14)
                                                    property_identifier [map] (13:14-13:17)
                                                  arguments [(point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        ))] (13:17-25:10)
                                                    ( [(] (13:17-13:18)
                                                    arrow_function [point => (
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        )] (13:18-25:9)
                                                      identifier [point] (13:18-13:23)
                                                      => [=>] (13:24-13:26)
                                                      parenthesized_expression [(
          <div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div>
        )] (13:27-25:9)
                                                        ( [(] (13:27-13:28)
                                                        ERROR [<div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">
            <div] (14:10-17:16)
                                                          type_parameters [<div key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300">] (14:10-16:63)
                                                            < [<] (14:10-14:11)
                                                            ERROR [div] (14:11-14:14)
                                                              identifier [div] (14:11-14:14)
                                                            type_parameter [key={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300"] (14:15-16:62)
                                                              type_identifier [key] (14:15-14:18)
                                                              default_type [={point.id} 
            className="min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300"] (14:18-16:62)
                                                                = [=] (14:18-14:19)
                                                                ERROR [{point.id} 
            className=] (14:19-15:22)
                                                                  object_type [{point.id}] (14:19-14:29)
                                                                    { [{] (14:19-14:20)
                                                                    ERROR [point.] (14:20-14:26)
                                                                      property_identifier [point] (14:20-14:25)
                                                                      . [.] (14:25-14:26)
                                                                    property_signature [id] (14:26-14:28)
                                                                      property_identifier [id] (14:26-14:28)
                                                                    } [}] (14:28-14:29)
                                                                  identifier [className] (15:12-15:21)
                                                                  = [=] (15:21-15:22)
                                                                literal_type ["min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300"] (15:22-16:62)
                                                                  string ["min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300"] (15:22-16:62)
                                                                    " ["] (15:22-15:23)
                                                                    string_fragment [min-w-[300px] p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-lilac/30 
            hover:border-lilac/50 transition-all duration-300] (15:23-16:61)
                                                                    " ["] (16:61-16:62)
                                                            > [>] (16:62-16:63)
                                                          < [<] (17:12-17:13)
                                                          identifier [div] (17:13-17:16)
                                                        assignment_expression [className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div] (17:17-24:15)
                                                          identifier [className] (17:17-17:26)
                                                          = [=] (17:26-17:27)
                                                          binary_expression ["flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div] (17:27-24:15)
                                                            string ["flex items-center justify-between mb-2"] (17:27-17:67)
                                                              " ["] (17:27-17:28)
                                                              string_fragment [flex items-center justify-between mb-2] (17:28-17:66)
                                                              " ["] (17:66-17:67)
                                                            > [>] (17:67-17:68)
                                                            type_assertion [<span className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div] (18:14-24:15)
                                                              type_arguments [<span] (18:14-18:19)
                                                                < [<] (18:14-18:15)
                                                                type_identifier [span] (18:15-18:19)
                                                                > [] (18:19-18:19)
                                                              assignment_expression [className="text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div] (18:20-24:15)
                                                                identifier [className] (18:20-18:29)
                                                                = [=] (18:29-18:30)
                                                                binary_expression ["text-sm font-medium text-lilac">{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div] (18:30-24:15)
                                                                  string ["text-sm font-medium text-lilac"] (18:30-18:62)
                                                                    " ["] (18:30-18:31)
                                                                    string_fragment [text-sm font-medium text-lilac] (18:31-18:61)
                                                                    " ["] (18:61-18:62)
                                                                  > [>] (18:62-18:63)
                                                                  binary_expression [{point.source}</span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div] (18:63-24:15)
                                                                    object [{point.source}] (18:63-18:77)
                                                                      { [{] (18:63-18:64)
                                                                      ERROR [point.] (18:64-18:70)
                                                                        identifier [point] (18:64-18:69)
                                                                        . [.] (18:69-18:70)
                                                                      shorthand_property_identifier [source] (18:70-18:76)
                                                                      } [}] (18:76-18:77)
                                                                    < [<] (18:77-18:78)
                                                                    binary_expression [/span>
              <span className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div] (18:78-24:15)
                                                                      regex [/span>] (18:78-18:84)
                                                                        / [/] (18:78-18:79)
                                                                        regex_pattern [span>] (18:79-18:84)
                                                                        / [] (18:84-18:84)
                                                                      < [<] (19:14-19:15)
                                                                      ERROR [span] (19:15-19:19)
                                                                        identifier [span] (19:15-19:19)
                                                                      assignment_expression [className="px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div] (19:20-24:15)
                                                                        identifier [className] (19:20-19:29)
                                                                        = [=] (19:29-19:30)
                                                                        binary_expression ["px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20">
                {point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div] (19:30-24:15)
                                                                          string ["px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20"] (19:30-19:108)
                                                                            " ["] (19:30-19:31)
                                                                            string_fragment [px-3 py-1 bg-lilac/10 text-lilac rounded-full text-sm border border-lilac/20] (19:31-19:107)
                                                                            " ["] (19:107-19:108)
                                                                          > [>] (19:108-19:109)
                                                                          binary_expression [{point.frequency}%
              </span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div] (20:16-24:15)
                                                                            object [{point.frequency}] (20:16-20:33)
                                                                              { [{] (20:16-20:17)
                                                                              ERROR [point.] (20:17-20:23)
                                                                                identifier [point] (20:17-20:22)
                                                                                . [.] (20:22-20:23)
                                                                              shorthand_property_identifier [frequency] (20:23-20:32)
                                                                              } [}] (20:32-20:33)
                                                                            % [%] (20:33-20:34)
                                                                            type_assertion [</span>
            </div>
            <p className="text-grey/90">{point.text}</p>
          </div] (21:14-24:15)
                                                                              type_arguments [</span>] (21:14-21:21)
                                                                                < [<] (21:14-21:15)
                                                                                ERROR [/] (21:15-21:16)
                                                                                  / [/] (21:15-21:16)
                                                                                type_identifier [span] (21:16-21:20)
                                                                                > [>] (21:20-21:21)
                                                                              type_assertion [</div>
            <p className="text-grey/90">{point.text}</p>
          </div] (22:12-24:15)
                                                                                type_arguments [</div>] (22:12-22:18)
                                                                                  < [<] (22:12-22:13)
                                                                                  ERROR [/] (22:13-22:14)
                                                                                    / [/] (22:13-22:14)
                                                                                  type_identifier [div] (22:14-22:17)
                                                                                  > [>] (22:17-22:18)
                                                                                type_assertion [<p className="text-grey/90">{point.text}</p>
          </div] (23:12-24:15)
                                                                                  type_arguments [<p] (23:12-23:14)
                                                                                    < [<] (23:12-23:13)
                                                                                    type_identifier [p] (23:13-23:14)
                                                                                    > [] (23:14-23:14)
                                                                                  assignment_expression [className="text-grey/90">{point.text}</p>
          </div] (23:15-24:15)
                                                                                    identifier [className] (23:15-23:24)
                                                                                    = [=] (23:24-23:25)
                                                                                    binary_expression ["text-grey/90">{point.text}</p>
          </div] (23:25-24:15)
                                                                                      string ["text-grey/90"] (23:25-23:39)
                                                                                        " ["] (23:25-23:26)
                                                                                        string_fragment [text-grey/90] (23:26-23:38)
                                                                                        " ["] (23:38-23:39)
                                                                                      > [>] (23:39-23:40)
                                                                                      binary_expression [{point.text}</p>
          </div] (23:40-24:15)
                                                                                        object [{point.text}] (23:40-23:52)
                                                                                          { [{] (23:40-23:41)
                                                                                          ERROR [point.] (23:41-23:47)
                                                                                            identifier [point] (23:41-23:46)
                                                                                            . [.] (23:46-23:47)
                                                                                          shorthand_property_identifier [text] (23:47-23:51)
                                                                                          } [}] (23:51-23:52)
                                                                                        < [<] (23:52-23:53)
                                                                                        regex [/p>
          </div] (23:53-24:15)
                                                                                          / [/] (23:53-23:54)
                                                                                          regex_pattern [p>] (23:54-23:56)
                                                                                          ERROR [<] (24:10-24:11)
                                                                                            < [<] (24:10-24:11)
                                                                                          / [/] (24:11-24:12)
                                                                                          regex_flags [div] (24:12-24:15)
                                                        ERROR [>] (24:15-24:16)
                                                          > [>] (24:15-24:16)
                                                        ) [)] (25:8-25:9)
                                                    ) [)] (25:9-25:10)
                  ERROR [}] (25:10-25:11)
                    } [}] (25:10-25:11)
                  < [<] (26:6-26:7)
                  regex [/div>
    </div] (26:7-27:9)
                    / [/] (26:7-26:8)
                    regex_pattern [div>] (26:8-26:12)
                    ERROR [<] (27:4-27:5)
                      < [<] (27:4-27:5)
                    / [/] (27:5-27:6)
                    regex_flags [div] (27:6-27:9)
                > [>] (27:9-27:10)
                identifier [] (27:10-27:10)
              ) [)] (28:2-28:3)
            ; [;] (28:3-28:4)
          } [}] (29:0-29:1)
    ; [;] (29:1-29:2)
  lexical_declaration [const TriggerComponent = ({ data }) => {
  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))}
      </div>
    </div>
  );
};] (31:0-57:2)
    const [const] (31:0-31:5)
    variable_declarator [TriggerComponent = ({ data }) => {
  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))}
      </div>
    </div>
  );
}] (31:6-57:1)
      identifier [TriggerComponent] (31:6-31:22)
      = [=] (31:23-31:24)
      arrow_function [({ data }) => {
  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))}
      </div>
    </div>
  );
}] (31:25-57:1)
        formal_parameters [({ data })] (31:25-31:35)
          ( [(] (31:25-31:26)
          required_parameter [{ data }] (31:26-31:34)
            object_pattern [{ data }] (31:26-31:34)
              { [{] (31:26-31:27)
              shorthand_property_identifier_pattern [data] (31:28-31:32)
              } [}] (31:33-31:34)
          ) [)] (31:34-31:35)
        => [=>] (31:36-31:38)
        statement_block [{
  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))}
      </div>
    </div>
  );
}] (31:39-57:1)
          { [{] (31:39-31:40)
          return_statement [return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))}
      </div>
    </div>
  );] (32:2-56:4)
            return [return] (32:2-32:8)
            parenthesized_expression [(
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))}
      </div>
    </div>
  )] (32:9-56:3)
              ( [(] (32:9-32:10)
              binary_expression [<div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))}
      </div>
    </div>] (33:4-55:10)
                binary_expression [<div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))}
      </div>
    </div] (33:4-55:9)
                  type_assertion [<div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (33:4-53:10)
                    type_arguments [<div] (33:4-33:8)
                      < [<] (33:4-33:5)
                      type_identifier [div] (33:5-33:8)
                      > [] (33:8-33:8)
                    assignment_expression [className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (33:9-53:10)
                      identifier [className] (33:9-33:18)
                      = [=] (33:18-33:19)
                      binary_expression ["space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (33:19-53:10)
                        string ["space-y-4 p-4"] (33:19-33:34)
                          " ["] (33:19-33:20)
                          string_fragment [space-y-4 p-4] (33:20-33:33)
                          " ["] (33:33-33:34)
                        > [>] (33:34-33:35)
                        type_assertion [<div className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (34:6-53:10)
                          type_arguments [<div] (34:6-34:10)
                            < [<] (34:6-34:7)
                            type_identifier [div] (34:7-34:10)
                            > [] (34:10-34:10)
                          assignment_expression [className="flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (34:11-53:10)
                            identifier [className] (34:11-34:20)
                            = [=] (34:20-34:21)
                            binary_expression ["flex items-center gap-2 mb-4">
        <Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (34:21-53:10)
                              string ["flex items-center gap-2 mb-4"] (34:21-34:51)
                                " ["] (34:21-34:22)
                                string_fragment [flex items-center gap-2 mb-4] (34:22-34:50)
                                " ["] (34:50-34:51)
                              > [>] (34:51-34:52)
                              type_assertion [<Target className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (35:8-53:10)
                                type_arguments [<Target] (35:8-35:15)
                                  < [<] (35:8-35:9)
                                  type_identifier [Target] (35:9-35:15)
                                  > [] (35:15-35:15)
                                assignment_expression [className="w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (35:16-53:10)
                                  identifier [className] (35:16-35:25)
                                  = [=] (35:25-35:26)
                                  binary_expression ["w-6 h-6 text-sulu" />
        <h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (35:26-53:10)
                                    string ["w-6 h-6 text-sulu"] (35:26-35:45)
                                      " ["] (35:26-35:27)
                                      string_fragment [w-6 h-6 text-sulu] (35:27-35:44)
                                      " ["] (35:44-35:45)
                                    / [/] (35:46-35:47)
                                    ERROR [>] (35:47-35:48)
                                      > [>] (35:47-35:48)
                                    type_assertion [<h3 className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (36:8-53:10)
                                      type_arguments [<h3] (36:8-36:11)
                                        < [<] (36:8-36:9)
                                        type_identifier [h3] (36:9-36:11)
                                        > [] (36:11-36:11)
                                      assignment_expression [className="text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (36:12-53:10)
                                        identifier [className] (36:12-36:21)
                                        = [=] (36:21-36:22)
                                        binary_expression ["text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div>
      <div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (36:22-53:10)
                                          binary_expression ["text-lg font-semibold text-grey/80">Emotional Triggers</h3>
      </div] (36:22-37:11)
                                            string ["text-lg font-semibold text-grey/80"] (36:22-36:58)
                                              " ["] (36:22-36:23)
                                              string_fragment [text-lg font-semibold text-grey/80] (36:23-36:57)
                                              " ["] (36:57-36:58)
                                            > [>] (36:58-36:59)
                                            binary_expression [Emotional Triggers</h3>
      </div] (36:59-37:11)
                                              identifier [Emotional] (36:59-36:68)
                                              ERROR [Triggers] (36:69-36:77)
                                                identifier [Triggers] (36:69-36:77)
                                              < [<] (36:77-36:78)
                                              regex [/h3>
      </div] (36:78-37:11)
                                                / [/] (36:78-36:79)
                                                regex_pattern [h3>] (36:79-36:82)
                                                ERROR [<] (37:6-37:7)
                                                  < [<] (37:6-37:7)
                                                / [/] (37:7-37:8)
                                                regex_flags [div] (37:8-37:11)
                                          > [>] (37:11-37:12)
                                          type_assertion [<div className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (38:6-53:10)
                                            type_arguments [<div] (38:6-38:10)
                                              < [<] (38:6-38:7)
                                              type_identifier [div] (38:7-38:10)
                                              > [] (38:10-38:10)
                                            assignment_expression [className="space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (38:11-53:10)
                                              identifier [className] (38:11-38:20)
                                              = [=] (38:20-38:21)
                                              binary_expression ["space-y-4">
        {data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (38:21-53:10)
                                                string ["space-y-4"] (38:21-38:32)
                                                  " ["] (38:21-38:22)
                                                  string_fragment [space-y-4] (38:22-38:31)
                                                  " ["] (38:31-38:32)
                                                > [>] (38:32-38:33)
                                                call_expression [{data.map(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (39:8-53:10)
                                                  member_expression [{data.map] (39:8-39:17)
                                                    object [{data] (39:8-39:13)
                                                      { [{] (39:8-39:9)
                                                      shorthand_property_identifier [data] (39:9-39:13)
                                                      } [] (39:13-39:13)
                                                    . [.] (39:13-39:14)
                                                    property_identifier [map] (39:14-39:17)
                                                  arguments [(trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        ))] (39:17-53:10)
                                                    ( [(] (39:17-39:18)
                                                    arrow_function [trigger => (
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        )] (39:18-53:9)
                                                      identifier [trigger] (39:18-39:25)
                                                      => [=>] (39:26-39:28)
                                                      parenthesized_expression [(
          <div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div>
        )] (39:29-53:9)
                                                        ( [(] (39:29-39:30)
                                                        ERROR [<div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">
            <div] (40:10-42:16)
                                                          type_parameters [<div key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300">] (40:10-41:84)
                                                            < [<] (40:10-40:11)
                                                            ERROR [div] (40:11-40:14)
                                                              identifier [div] (40:11-40:14)
                                                            type_parameter [key={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300"] (40:15-41:83)
                                                              type_identifier [key] (40:15-40:18)
                                                              default_type [={trigger.id} className="flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300"] (40:18-41:83)
                                                                = [=] (40:18-40:19)
                                                                ERROR [{trigger.id} className=] (40:19-40:42)
                                                                  object_type [{trigger.id}] (40:19-40:31)
                                                                    { [{] (40:19-40:20)
                                                                    ERROR [trigger.] (40:20-40:28)
                                                                      property_identifier [trigger] (40:20-40:27)
                                                                      . [.] (40:27-40:28)
                                                                    property_signature [id] (40:28-40:30)
                                                                      property_identifier [id] (40:28-40:30)
                                                                    } [}] (40:30-40:31)
                                                                  identifier [className] (40:32-40:41)
                                                                  = [=] (40:41-40:42)
                                                                literal_type ["flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300"] (40:42-41:83)
                                                                  string ["flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300"] (40:42-41:83)
                                                                    " ["] (40:42-40:43)
                                                                    string_fragment [flex items-center gap-4 p-3 backdrop-blur-xl bg-white/5 rounded-xl
            border border-sulu/20 hover:border-sulu/40 transition-all duration-300] (40:43-41:82)
                                                                    " ["] (41:82-41:83)
                                                            > [>] (41:83-41:84)
                                                          < [<] (42:12-42:13)
                                                          identifier [div] (42:13-42:16)
                                                        assignment_expression [className="w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (42:17-52:15)
                                                          identifier [className] (42:17-42:26)
                                                          = [=] (42:26-42:27)
                                                          binary_expression ["w-24 text-sm font-medium text-sulu">{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (42:27-52:15)
                                                            string ["w-24 text-sm font-medium text-sulu"] (42:27-42:63)
                                                              " ["] (42:27-42:28)
                                                              string_fragment [w-24 text-sm font-medium text-sulu] (42:28-42:62)
                                                              " ["] (42:62-42:63)
                                                            > [>] (42:63-42:64)
                                                            binary_expression [{trigger.type}</div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (42:64-52:15)
                                                              object [{trigger.type}] (42:64-42:78)
                                                                { [{] (42:64-42:65)
                                                                ERROR [trigger.] (42:65-42:73)
                                                                  identifier [trigger] (42:65-42:72)
                                                                  . [.] (42:72-42:73)
                                                                shorthand_property_identifier [type] (42:73-42:77)
                                                                } [}] (42:77-42:78)
                                                              < [<] (42:78-42:79)
                                                              binary_expression [/div>
            <div className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (42:79-52:15)
                                                                regex [/div>] (42:79-42:84)
                                                                  / [/] (42:79-42:80)
                                                                  regex_pattern [div>] (42:80-42:84)
                                                                  / [] (42:84-42:84)
                                                                < [<] (43:12-43:13)
                                                                ERROR [div] (43:13-43:16)
                                                                  identifier [div] (43:13-43:16)
                                                                assignment_expression [className="flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (43:17-52:15)
                                                                  identifier [className] (43:17-43:26)
                                                                  = [=] (43:26-43:27)
                                                                  binary_expression ["flex-1">
              <div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (43:27-52:15)
                                                                    string ["flex-1"] (43:27-43:35)
                                                                      " ["] (43:27-43:28)
                                                                      string_fragment [flex-1] (43:28-43:34)
                                                                      " ["] (43:34-43:35)
                                                                    > [>] (43:35-43:36)
                                                                    type_assertion [<div className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (44:14-52:15)
                                                                      type_arguments [<div] (44:14-44:18)
                                                                        < [<] (44:14-44:15)
                                                                        type_identifier [div] (44:15-44:18)
                                                                        > [] (44:18-44:18)
                                                                      assignment_expression [className="w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (44:19-52:15)
                                                                        identifier [className] (44:19-44:28)
                                                                        = [=] (44:28-44:29)
                                                                        binary_expression ["w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div>
            <div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (44:29-52:15)
                                                                          binary_expression ["w-full bg-white/10 rounded-full h-2.5">
                <div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </div] (44:29-50:17)
                                                                            string ["w-full bg-white/10 rounded-full h-2.5"] (44:29-44:68)
                                                                              " ["] (44:29-44:30)
                                                                              string_fragment [w-full bg-white/10 rounded-full h-2.5] (44:30-44:67)
                                                                              " ["] (44:67-44:68)
                                                                            > [>] (44:68-44:69)
                                                                            ERROR [<div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />
              </div>
            </] (45:16-50:14)
                                                                              type_parameters [<div
                  className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%` }}
                />] (45:16-48:18)
                                                                                < [<] (45:16-45:17)
                                                                                ERROR [div] (45:17-45:20)
                                                                                  identifier [div] (45:17-45:20)
                                                                                type_parameter [className="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%`] (46:18-47:62)
                                                                                  type_identifier [className] (46:18-46:27)
                                                                                  default_type [="bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width: `${trigger.strength * 100}%`] (46:27-47:62)
                                                                                    = [=] (46:27-46:28)
                                                                                    ERROR ["bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"
                  style={{ width:] (46:28-47:33)
                                                                                      literal_type ["bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"] (46:28-46:114)
                                                                                        string ["bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500"] (46:28-46:114)
                                                                                          " ["] (46:28-46:29)
                                                                                          string_fragment [bg-gradient-to-r from-sulu/40 to-sulu h-2.5 rounded-full transition-all duration-500] (46:29-46:113)
                                                                                          " ["] (46:113-46:114)
                                                                                      identifier [style] (47:18-47:23)
                                                                                      = [=] (47:23-47:24)
                                                                                      { [{] (47:24-47:25)
                                                                                      { [{] (47:25-47:26)
                                                                                      identifier [width] (47:27-47:32)
                                                                                      : [:] (47:32-47:33)
                                                                                    template_literal_type [`${trigger.strength * 100}%`] (47:34-47:62)
                                                                                      ` [`] (47:34-47:35)
                                                                                      template_type [${trigger.strength * 100}] (47:35-47:60)
                                                                                        ${ [${] (47:35-47:37)
                                                                                        nested_type_identifier [trigger.strength] (47:37-47:53)
                                                                                          identifier [trigger] (47:37-47:44)
                                                                                          . [.] (47:44-47:45)
                                                                                          type_identifier [strength] (47:45-47:53)
                                                                                        ERROR [* 100] (47:54-47:59)
                                                                                          * [*] (47:54-47:55)
                                                                                          number [100] (47:56-47:59)
                                                                                        } [}] (47:59-47:60)
                                                                                      ` [`] (47:61-47:62)
                                                                                ERROR [}}
                /] (47:63-48:17)
                                                                                  } [}] (47:63-47:64)
                                                                                  } [}] (47:64-47:65)
                                                                                  / [/] (48:16-48:17)
                                                                                > [>] (48:17-48:18)
                                                                              < [<] (49:14-49:15)
                                                                              / [/] (49:15-49:16)
                                                                              identifier [div] (49:16-49:19)
                                                                              > [>] (49:19-49:20)
                                                                              < [<] (50:12-50:13)
                                                                              / [/] (50:13-50:14)
                                                                            identifier [div] (50:14-50:17)
                                                                          > [>] (50:17-50:18)
                                                                          type_assertion [<div className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (51:12-52:15)
                                                                            type_arguments [<div] (51:12-51:16)
                                                                              < [<] (51:12-51:13)
                                                                              type_identifier [div] (51:13-51:16)
                                                                              > [] (51:16-51:16)
                                                                            assignment_expression [className="w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (51:17-52:15)
                                                                              identifier [className] (51:17-51:26)
                                                                              = [=] (51:26-51:27)
                                                                              binary_expression ["w-32 text-sm text-grey/80">{trigger.text}</div>
          </div] (51:27-52:15)
                                                                                string ["w-32 text-sm text-grey/80"] (51:27-51:54)
                                                                                  " ["] (51:27-51:28)
                                                                                  string_fragment [w-32 text-sm text-grey/80] (51:28-51:53)
                                                                                  " ["] (51:53-51:54)
                                                                                > [>] (51:54-51:55)
                                                                                binary_expression [{trigger.text}</div>
          </div] (51:55-52:15)
                                                                                  object [{trigger.text}] (51:55-51:69)
                                                                                    { [{] (51:55-51:56)
                                                                                    ERROR [trigger.] (51:56-51:64)
                                                                                      identifier [trigger] (51:56-51:63)
                                                                                      . [.] (51:63-51:64)
                                                                                    shorthand_property_identifier [text] (51:64-51:68)
                                                                                    } [}] (51:68-51:69)
                                                                                  < [<] (51:69-51:70)
                                                                                  regex [/div>
          </div] (51:70-52:15)
                                                                                    / [/] (51:70-51:71)
                                                                                    regex_pattern [div>] (51:71-51:75)
                                                                                    ERROR [<] (52:10-52:11)
                                                                                      < [<] (52:10-52:11)
                                                                                    / [/] (52:11-52:12)
                                                                                    regex_flags [div] (52:12-52:15)
                                                        ERROR [>] (52:15-52:16)
                                                          > [>] (52:15-52:16)
                                                        ) [)] (53:8-53:9)
                                                    ) [)] (53:9-53:10)
                  ERROR [}] (53:10-53:11)
                    } [}] (53:10-53:11)
                  < [<] (54:6-54:7)
                  regex [/div>
    </div] (54:7-55:9)
                    / [/] (54:7-54:8)
                    regex_pattern [div>] (54:8-54:12)
                    ERROR [<] (55:4-55:5)
                      < [<] (55:4-55:5)
                    / [/] (55:5-55:6)
                    regex_flags [div] (55:6-55:9)
                > [>] (55:9-55:10)
                identifier [] (55:10-55:10)
              ) [)] (56:2-56:3)
            ; [;] (56:3-56:4)
          } [}] (57:0-57:1)
    ; [;] (57:1-57:2)
  lexical_declaration [const StrategicComponent = ({ data }) => {
  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
};] (59:0-80:2)
    const [const] (59:0-59:5)
    variable_declarator [StrategicComponent = ({ data }) => {
  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
}] (59:6-80:1)
      identifier [StrategicComponent] (59:6-59:24)
      = [=] (59:25-59:26)
      arrow_function [({ data }) => {
  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
}] (59:27-80:1)
        formal_parameters [({ data })] (59:27-59:37)
          ( [(] (59:27-59:28)
          required_parameter [{ data }] (59:28-59:36)
            object_pattern [{ data }] (59:28-59:36)
              { [{] (59:28-59:29)
              shorthand_property_identifier_pattern [data] (59:30-59:34)
              } [}] (59:35-59:36)
          ) [)] (59:36-59:37)
        => [=>] (59:38-59:40)
        statement_block [{
  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
}] (59:41-80:1)
          { [{] (59:41-59:42)
          return_statement [return (
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))}
      </div>
    </div>
  );] (60:2-79:4)
            return [return] (60:2-60:8)
            parenthesized_expression [(
    <div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))}
      </div>
    </div>
  )] (60:9-79:3)
              ( [(] (60:9-60:10)
              binary_expression [<div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))}
      </div>
    </div>] (61:4-78:10)
                binary_expression [<div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))}
      </div>
    </div] (61:4-78:9)
                  type_assertion [<div className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (61:4-76:10)
                    type_arguments [<div] (61:4-61:8)
                      < [<] (61:4-61:5)
                      type_identifier [div] (61:5-61:8)
                      > [] (61:8-61:8)
                    assignment_expression [className="space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (61:9-76:10)
                      identifier [className] (61:9-61:18)
                      = [=] (61:18-61:19)
                      binary_expression ["space-y-4 p-4">
      <div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (61:19-76:10)
                        string ["space-y-4 p-4"] (61:19-61:34)
                          " ["] (61:19-61:20)
                          string_fragment [space-y-4 p-4] (61:20-61:33)
                          " ["] (61:33-61:34)
                        > [>] (61:34-61:35)
                        type_assertion [<div className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (62:6-76:10)
                          type_arguments [<div] (62:6-62:10)
                            < [<] (62:6-62:7)
                            type_identifier [div] (62:7-62:10)
                            > [] (62:10-62:10)
                          assignment_expression [className="flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (62:11-76:10)
                            identifier [className] (62:11-62:20)
                            = [=] (62:20-62:21)
                            binary_expression ["flex items-center gap-2 mb-4">
        <TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (62:21-76:10)
                              string ["flex items-center gap-2 mb-4"] (62:21-62:51)
                                " ["] (62:21-62:22)
                                string_fragment [flex items-center gap-2 mb-4] (62:22-62:50)
                                " ["] (62:50-62:51)
                              > [>] (62:51-62:52)
                              type_assertion [<TrendingUp className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (63:8-76:10)
                                type_arguments [<TrendingUp] (63:8-63:19)
                                  < [<] (63:8-63:9)
                                  type_identifier [TrendingUp] (63:9-63:19)
                                  > [] (63:19-63:19)
                                assignment_expression [className="w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (63:20-76:10)
                                  identifier [className] (63:20-63:29)
                                  = [=] (63:29-63:30)
                                  binary_expression ["w-6 h-6 text-portage" />
        <h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (63:30-76:10)
                                    string ["w-6 h-6 text-portage"] (63:30-63:52)
                                      " ["] (63:30-63:31)
                                      string_fragment [w-6 h-6 text-portage] (63:31-63:51)
                                      " ["] (63:51-63:52)
                                    / [/] (63:53-63:54)
                                    ERROR [>] (63:54-63:55)
                                      > [>] (63:54-63:55)
                                    type_assertion [<h3 className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (64:8-76:10)
                                      type_arguments [<h3] (64:8-64:11)
                                        < [<] (64:8-64:9)
                                        type_identifier [h3] (64:9-64:11)
                                        > [] (64:11-64:11)
                                      assignment_expression [className="text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (64:12-76:10)
                                        identifier [className] (64:12-64:21)
                                        = [=] (64:21-64:22)
                                        binary_expression ["text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (64:22-76:10)
                                          binary_expression ["text-lg font-semibold text-grey/80">Strategic Insights</h3>
      </div] (64:22-65:11)
                                            string ["text-lg font-semibold text-grey/80"] (64:22-64:58)
                                              " ["] (64:22-64:23)
                                              string_fragment [text-lg font-semibold text-grey/80] (64:23-64:57)
                                              " ["] (64:57-64:58)
                                            > [>] (64:58-64:59)
                                            binary_expression [Strategic Insights</h3>
      </div] (64:59-65:11)
                                              identifier [Strategic] (64:59-64:68)
                                              ERROR [Insights] (64:69-64:77)
                                                identifier [Insights] (64:69-64:77)
                                              < [<] (64:77-64:78)
                                              regex [/h3>
      </div] (64:78-65:11)
                                                / [/] (64:78-64:79)
                                                regex_pattern [h3>] (64:79-64:82)
                                                ERROR [<] (65:6-65:7)
                                                  < [<] (65:6-65:7)
                                                / [/] (65:7-65:8)
                                                regex_flags [div] (65:8-65:11)
                                          > [>] (65:11-65:12)
                                          type_assertion [<div className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (66:6-76:10)
                                            type_arguments [<div] (66:6-66:10)
                                              < [<] (66:6-66:7)
                                              type_identifier [div] (66:7-66:10)
                                              > [] (66:10-66:10)
                                            assignment_expression [className="grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (66:11-76:10)
                                              identifier [className] (66:11-66:20)
                                              = [=] (66:20-66:21)
                                              binary_expression ["grid grid-cols-1 gap-4">
        {data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (66:21-76:10)
                                                string ["grid grid-cols-1 gap-4"] (66:21-66:45)
                                                  " ["] (66:21-66:22)
                                                  string_fragment [grid grid-cols-1 gap-4] (66:22-66:44)
                                                  " ["] (66:44-66:45)
                                                > [>] (66:45-66:46)
                                                call_expression [{data.map(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (67:8-76:10)
                                                  member_expression [{data.map] (67:8-67:17)
                                                    object [{data] (67:8-67:13)
                                                      { [{] (67:8-67:9)
                                                      shorthand_property_identifier [data] (67:9-67:13)
                                                      } [] (67:13-67:13)
                                                    . [.] (67:13-67:14)
                                                    property_identifier [map] (67:14-67:17)
                                                  arguments [(insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        ))] (67:17-76:10)
                                                    ( [(] (67:17-67:18)
                                                    arrow_function [insight => (
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        )] (67:18-76:9)
                                                      identifier [insight] (67:18-67:25)
                                                      => [=>] (67:26-67:28)
                                                      parenthesized_expression [(
          <div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div>
        )] (67:29-76:9)
                                                        ( [(] (67:29-67:30)
                                                        ERROR [<div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">
            <div] (68:10-71:16)
                                                          type_parameters [<div key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300">] (68:10-70:65)
                                                            < [<] (68:10-68:11)
                                                            ERROR [div] (68:11-68:14)
                                                              identifier [div] (68:11-68:14)
                                                            type_parameter [key={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300"] (68:15-70:64)
                                                              type_identifier [key] (68:15-68:18)
                                                              default_type [={insight.id} 
            className="p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300"] (68:18-70:64)
                                                                = [=] (68:18-68:19)
                                                                ERROR [{insight.id} 
            className=] (68:19-69:22)
                                                                  object_type [{insight.id}] (68:19-68:31)
                                                                    { [{] (68:19-68:20)
                                                                    ERROR [insight.] (68:20-68:28)
                                                                      property_identifier [insight] (68:20-68:27)
                                                                      . [.] (68:27-68:28)
                                                                    property_signature [id] (68:28-68:30)
                                                                      property_identifier [id] (68:28-68:30)
                                                                    } [}] (68:30-68:31)
                                                                  identifier [className] (69:12-69:21)
                                                                  = [=] (69:21-69:22)
                                                                literal_type ["p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300"] (69:22-70:64)
                                                                  string ["p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300"] (69:22-70:64)
                                                                    " ["] (69:22-69:23)
                                                                    string_fragment [p-4 backdrop-blur-xl bg-white/10 rounded-xl border border-portage/30 
            hover:border-portage/50 transition-all duration-300] (69:23-70:63)
                                                                    " ["] (70:63-70:64)
                                                            > [>] (70:64-70:65)
                                                          < [<] (71:12-71:13)
                                                          identifier [div] (71:13-71:16)
                                                        assignment_expression [className="text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div] (71:17-75:15)
                                                          identifier [className] (71:17-71:26)
                                                          = [=] (71:26-71:27)
                                                          binary_expression ["text-sm font-medium text-portage mb-2">
              {insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div] (71:27-75:15)
                                                            string ["text-sm font-medium text-portage mb-2"] (71:27-71:66)
                                                              " ["] (71:27-71:28)
                                                              string_fragment [text-sm font-medium text-portage mb-2] (71:28-71:65)
                                                              " ["] (71:65-71:66)
                                                            > [>] (71:66-71:67)
                                                            binary_expression [{insight.category}
            </div>
            <p className="text-grey/90">{insight.text}</p>
          </div] (72:14-75:15)
                                                              object [{insight.category}] (72:14-72:32)
                                                                { [{] (72:14-72:15)
                                                                ERROR [insight.] (72:15-72:23)
                                                                  identifier [insight] (72:15-72:22)
                                                                  . [.] (72:22-72:23)
                                                                shorthand_property_identifier [category] (72:23-72:31)
                                                                } [}] (72:31-72:32)
                                                              < [<] (73:12-73:13)
                                                              binary_expression [/div>
            <p className="text-grey/90">{insight.text}</p>
          </div] (73:13-75:15)
                                                                regex [/div>] (73:13-73:18)
                                                                  / [/] (73:13-73:14)
                                                                  regex_pattern [div>] (73:14-73:18)
                                                                  / [] (73:18-73:18)
                                                                < [<] (74:12-74:13)
                                                                ERROR [p] (74:13-74:14)
                                                                  identifier [p] (74:13-74:14)
                                                                assignment_expression [className="text-grey/90">{insight.text}</p>
          </div] (74:15-75:15)
                                                                  identifier [className] (74:15-74:24)
                                                                  = [=] (74:24-74:25)
                                                                  binary_expression ["text-grey/90">{insight.text}</p>
          </div] (74:25-75:15)
                                                                    string ["text-grey/90"] (74:25-74:39)
                                                                      " ["] (74:25-74:26)
                                                                      string_fragment [text-grey/90] (74:26-74:38)
                                                                      " ["] (74:38-74:39)
                                                                    > [>] (74:39-74:40)
                                                                    binary_expression [{insight.text}</p>
          </div] (74:40-75:15)
                                                                      object [{insight.text}] (74:40-74:54)
                                                                        { [{] (74:40-74:41)
                                                                        ERROR [insight.] (74:41-74:49)
                                                                          identifier [insight] (74:41-74:48)
                                                                          . [.] (74:48-74:49)
                                                                        shorthand_property_identifier [text] (74:49-74:53)
                                                                        } [}] (74:53-74:54)
                                                                      < [<] (74:54-74:55)
                                                                      regex [/p>
          </div] (74:55-75:15)
                                                                        / [/] (74:55-74:56)
                                                                        regex_pattern [p>] (74:56-74:58)
                                                                        ERROR [<] (75:10-75:11)
                                                                          < [<] (75:10-75:11)
                                                                        / [/] (75:11-75:12)
                                                                        regex_flags [div] (75:12-75:15)
                                                        ERROR [>] (75:15-75:16)
                                                          > [>] (75:15-75:16)
                                                        ) [)] (76:8-76:9)
                                                    ) [)] (76:9-76:10)
                  ERROR [}] (76:10-76:11)
                    } [}] (76:10-76:11)
                  < [<] (77:6-77:7)
                  regex [/div>
    </div] (77:7-78:9)
                    / [/] (77:7-77:8)
                    regex_pattern [div>] (77:8-77:12)
                    ERROR [<] (78:4-78:5)
                      < [<] (78:4-78:5)
                    / [/] (78:5-78:6)
                    regex_flags [div] (78:6-78:9)
                > [>] (78:9-78:10)
                identifier [] (78:10-78:10)
              ) [)] (79:2-79:3)
            ; [;] (79:3-79:4)
          } [}] (80:0-80:1)
    ; [;] (80:1-80:2)
  const [const] (82:0-82:5)
  identifier [DashboardCard] (82:6-82:19)
  = [=] (82:20-82:21)
  formal_parameters [({ item })] (82:22-82:32)
    ( [(] (82:22-82:23)
    required_parameter [{ item }] (82:23-82:31)
      object_pattern [{ item }] (82:23-82:31)
        { [{] (82:23-82:24)
        shorthand_property_identifier_pattern [item] (82:25-82:29)
        } [}] (82:30-82:31)
    ) [)] (82:31-82:32)
  => [=>] (82:33-82:35)
  { [{] (82:36-82:37)
  lexical_declaration [const [isFocused, setIsFocused] = useState(false);] (83:2-83:52)
    const [const] (83:2-83:7)
    variable_declarator [[isFocused, setIsFocused] = useState(false)] (83:8-83:51)
      array_pattern [[isFocused, setIsFocused]] (83:8-83:33)
        [ [[] (83:8-83:9)
        identifier [isFocused] (83:9-83:18)
        , [,] (83:18-83:19)
        identifier [setIsFocused] (83:20-83:32)
        ] []] (83:32-83:33)
      = [=] (83:34-83:35)
      call_expression [useState(false)] (83:36-83:51)
        identifier [useState] (83:36-83:44)
        arguments [(false)] (83:44-83:51)
          ( [(] (83:44-83:45)
          false [false] (83:45-83:50)
          ) [)] (83:50-83:51)
    ; [;] (83:51-83:52)
  lexical_declaration [const getComponent = () => {
    switch(item.type) {
      case 'painPoints':
        return <PainPointComponent data={item.data} />;
      case 'triggers':
        return <TriggerComponent data={item.data} />;
      case 'strategic':
        return <StrategicComponent data={item.data} />;
      default:
        return null;
    }
  };] (85:2-96:4)
    const [const] (85:2-85:7)
    variable_declarator [getComponent = () => {
    switch(item.type) {
      case 'painPoints':
        return <PainPointComponent data={item.data} />;
      case 'triggers':
        return <TriggerComponent data={item.data} />;
      case 'strategic':
        return <StrategicComponent data={item.data} />;
      default:
        return null;
    }
  }] (85:8-96:3)
      identifier [getComponent] (85:8-85:20)
      = [=] (85:21-85:22)
      arrow_function [() => {
    switch(item.type) {
      case 'painPoints':
        return <PainPointComponent data={item.data} />;
      case 'triggers':
        return <TriggerComponent data={item.data} />;
      case 'strategic':
        return <StrategicComponent data={item.data} />;
      default:
        return null;
    }
  }] (85:23-96:3)
        formal_parameters [()] (85:23-85:25)
          ( [(] (85:23-85:24)
          ) [)] (85:24-85:25)
        => [=>] (85:26-85:28)
        statement_block [{
    switch(item.type) {
      case 'painPoints':
        return <PainPointComponent data={item.data} />;
      case 'triggers':
        return <TriggerComponent data={item.data} />;
      case 'strategic':
        return <StrategicComponent data={item.data} />;
      default:
        return null;
    }
  }] (85:29-96:3)
          { [{] (85:29-85:30)
          switch_statement [switch(item.type) {
      case 'painPoints':
        return <PainPointComponent data={item.data} />;
      case 'triggers':
        return <TriggerComponent data={item.data} />;
      case 'strategic':
        return <StrategicComponent data={item.data} />;
      default:
        return null;
    }] (86:4-95:5)
            switch [switch] (86:4-86:10)
            parenthesized_expression [(item.type)] (86:10-86:21)
              ( [(] (86:10-86:11)
              member_expression [item.type] (86:11-86:20)
                identifier [item] (86:11-86:15)
                . [.] (86:15-86:16)
                property_identifier [type] (86:16-86:20)
              ) [)] (86:20-86:21)
            switch_body [{
      case 'painPoints':
        return <PainPointComponent data={item.data} />;
      case 'triggers':
        return <TriggerComponent data={item.data} />;
      case 'strategic':
        return <StrategicComponent data={item.data} />;
      default:
        return null;
    }] (86:22-95:5)
              { [{] (86:22-86:23)
              switch_case [case 'painPoints':
        return <PainPointComponent data={item.data} />;] (87:6-88:55)
                case [case] (87:6-87:10)
                string ['painPoints'] (87:11-87:23)
                  ' ['] (87:11-87:12)
                  string_fragment [painPoints] (87:12-87:22)
                  ' ['] (87:22-87:23)
                : [:] (87:23-87:24)
                return_statement [return <PainPointComponent data={item.data} />;] (88:8-88:55)
                  return [return] (88:8-88:14)
                  ERROR [<PainPointComponent data={item.data} />] (88:15-88:54)
                    < [<] (88:15-88:16)
                    type_parameter [PainPointComponent data={item.data}] (88:16-88:51)
                      type_identifier [PainPointComponent] (88:16-88:34)
                      ERROR [data] (88:35-88:39)
                        identifier [data] (88:35-88:39)
                      default_type [={item.data}] (88:39-88:51)
                        = [=] (88:39-88:40)
                        object_type [{item.data}] (88:40-88:51)
                          { [{] (88:40-88:41)
                          ERROR [item.] (88:41-88:46)
                            property_identifier [item] (88:41-88:45)
                            . [.] (88:45-88:46)
                          property_signature [data] (88:46-88:50)
                            property_identifier [data] (88:46-88:50)
                          } [}] (88:50-88:51)
                    / [/] (88:52-88:53)
                    > [>] (88:53-88:54)
                  ; [;] (88:54-88:55)
              switch_case [case 'triggers':
        return <TriggerComponent data={item.data} />;] (89:6-90:53)
                case [case] (89:6-89:10)
                string ['triggers'] (89:11-89:21)
                  ' ['] (89:11-89:12)
                  string_fragment [triggers] (89:12-89:20)
                  ' ['] (89:20-89:21)
                : [:] (89:21-89:22)
                return_statement [return <TriggerComponent data={item.data} />;] (90:8-90:53)
                  return [return] (90:8-90:14)
                  ERROR [<TriggerComponent data={item.data} />] (90:15-90:52)
                    < [<] (90:15-90:16)
                    type_parameter [TriggerComponent data={item.data}] (90:16-90:49)
                      type_identifier [TriggerComponent] (90:16-90:32)
                      ERROR [data] (90:33-90:37)
                        identifier [data] (90:33-90:37)
                      default_type [={item.data}] (90:37-90:49)
                        = [=] (90:37-90:38)
                        object_type [{item.data}] (90:38-90:49)
                          { [{] (90:38-90:39)
                          ERROR [item.] (90:39-90:44)
                            property_identifier [item] (90:39-90:43)
                            . [.] (90:43-90:44)
                          property_signature [data] (90:44-90:48)
                            property_identifier [data] (90:44-90:48)
                          } [}] (90:48-90:49)
                    / [/] (90:50-90:51)
                    > [>] (90:51-90:52)
                  ; [;] (90:52-90:53)
              switch_case [case 'strategic':
        return <StrategicComponent data={item.data} />;] (91:6-92:55)
                case [case] (91:6-91:10)
                string ['strategic'] (91:11-91:22)
                  ' ['] (91:11-91:12)
                  string_fragment [strategic] (91:12-91:21)
                  ' ['] (91:21-91:22)
                : [:] (91:22-91:23)
                return_statement [return <StrategicComponent data={item.data} />;] (92:8-92:55)
                  return [return] (92:8-92:14)
                  ERROR [<StrategicComponent data={item.data} />] (92:15-92:54)
                    < [<] (92:15-92:16)
                    type_parameter [StrategicComponent data={item.data}] (92:16-92:51)
                      type_identifier [StrategicComponent] (92:16-92:34)
                      ERROR [data] (92:35-92:39)
                        identifier [data] (92:35-92:39)
                      default_type [={item.data}] (92:39-92:51)
                        = [=] (92:39-92:40)
                        object_type [{item.data}] (92:40-92:51)
                          { [{] (92:40-92:41)
                          ERROR [item.] (92:41-92:46)
                            property_identifier [item] (92:41-92:45)
                            . [.] (92:45-92:46)
                          property_signature [data] (92:46-92:50)
                            property_identifier [data] (92:46-92:50)
                          } [}] (92:50-92:51)
                    / [/] (92:52-92:53)
                    > [>] (92:53-92:54)
                  ; [;] (92:54-92:55)
              switch_default [default:
        return null;] (93:6-94:20)
                default [default] (93:6-93:13)
                : [:] (93:13-93:14)
                return_statement [return null;] (94:8-94:20)
                  return [return] (94:8-94:14)
                  null [null] (94:15-94:19)
                  ; [;] (94:19-94:20)
              } [}] (95:4-95:5)
          } [}] (96:2-96:3)
    ; [;] (96:3-96:4)
  return [return] (98:2-98:8)
  ( [(] (98:9-98:10)
  type_parameters [<div
      className={`
        relative
        break-inside-avoid
        ${item.height}
        backdrop-blur-xl
        bg-white/20
        rounded-xl
        border
        border-white/40
        transition-all
        duration-500
        before:absolute
        before:inset-0
        before:backdrop-blur-xl
        before:bg-white/5
        before:rounded-xl
        before:-z-10
        block
        mb-6
        overflow-hidden
        font-subheading
        ${item.width || ''}
        ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
      `}
      onMouseEnter={() => setIsFocused(true)}
      onMouseLeave={() => setIsFocused(false)}
    >] (99:4-126:5)
    < [<] (99:4-99:5)
    ERROR [div] (99:5-99:8)
      identifier [div] (99:5-99:8)
    type_parameter [className={`
        relative
        break-inside-avoid
        ${item.height}
        backdrop-blur-xl
        bg-white/20
        rounded-xl
        border
        border-white/40
        transition-all
        duration-500
        before:absolute
        before:inset-0
        before:backdrop-blur-xl
        before:bg-white/5
        before:rounded-xl
        before:-z-10
        block
        mb-6
        overflow-hidden
        font-subheading
        ${item.width || ''}
        ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
      `] (100:6-123:7)
      type_identifier [className] (100:6-100:15)
      default_type [={`
        relative
        break-inside-avoid
        ${item.height}
        backdrop-blur-xl
        bg-white/20
        rounded-xl
        border
        border-white/40
        transition-all
        duration-500
        before:absolute
        before:inset-0
        before:backdrop-blur-xl
        before:bg-white/5
        before:rounded-xl
        before:-z-10
        block
        mb-6
        overflow-hidden
        font-subheading
        ${item.width || ''}
        ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
      `] (100:15-123:7)
        = [=] (100:15-100:16)
        ERROR [{] (100:16-100:17)
          { [{] (100:16-100:17)
        template_literal_type [`
        relative
        break-inside-avoid
        ${item.height}
        backdrop-blur-xl
        bg-white/20
        rounded-xl
        border
        border-white/40
        transition-all
        duration-500
        before:absolute
        before:inset-0
        before:backdrop-blur-xl
        before:bg-white/5
        before:rounded-xl
        before:-z-10
        block
        mb-6
        overflow-hidden
        font-subheading
        ${item.width || ''}
        ${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}
      `] (100:17-123:7)
          ` [`] (100:17-100:18)
          template_type [${item.height}] (103:8-103:22)
            ${ [${] (103:8-103:10)
            nested_type_identifier [item.height] (103:10-103:21)
              identifier [item] (103:10-103:14)
              . [.] (103:14-103:15)
              type_identifier [height] (103:15-103:21)
            } [}] (103:21-103:22)
          template_type [${item.width || ''}] (121:8-121:27)
            ${ [${] (121:8-121:10)
            union_type [item.width || ''] (121:10-121:26)
              nested_type_identifier [item.width] (121:10-121:20)
                identifier [item] (121:10-121:14)
                . [.] (121:14-121:15)
                type_identifier [width] (121:15-121:20)
              | [|] (121:21-121:22)
              union_type [| ''] (121:22-121:26)
                | [|] (121:22-121:23)
                literal_type [''] (121:24-121:26)
                  string [''] (121:24-121:26)
                    ' ['] (121:24-121:25)
                    ' ['] (121:25-121:26)
            } [}] (121:26-121:27)
          template_type [${isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' : 'hover:border-white/50 hover:bg-white/20'}] (122:8-122:124)
            ${ [${] (122:8-122:10)
            ERROR [isFocused ? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60' :] (122:10-122:81)
              type_identifier [isFocused] (122:10-122:19)
              flow_maybe_type [? 'shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60'] (122:20-122:79)
                ? [?] (122:20-122:21)
                literal_type ['shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60'] (122:22-122:79)
                  string ['shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60'] (122:22-122:79)
                    ' ['] (122:22-122:23)
                    string_fragment [shadow-[0_0_25px_rgba(255,255,255,0.6)] border-white/60] (122:23-122:78)
                    ' ['] (122:78-122:79)
              : [:] (122:80-122:81)
            literal_type ['hover:border-white/50 hover:bg-white/20'] (122:82-122:123)
              string ['hover:border-white/50 hover:bg-white/20'] (122:82-122:123)
                ' ['] (122:82-122:83)
                string_fragment [hover:border-white/50 hover:bg-white/20] (122:83-122:122)
                ' ['] (122:122-122:123)
            } [}] (122:123-122:124)
          ` [`] (123:6-123:7)
    ERROR [}
      onMouseEnter={() => setIsFocused(true)}
      onMouseLeave={() => setIsFocused(false)}] (123:7-125:46)
      } [}] (123:7-123:8)
      identifier [onMouseEnter] (124:6-124:18)
      = [=] (124:18-124:19)
      { [{] (124:19-124:20)
      ( [(] (124:20-124:21)
      ) [)] (124:21-124:22)
      => [=>] (124:23-124:25)
      identifier [setIsFocused] (124:26-124:38)
      ( [(] (124:38-124:39)
      true [true] (124:39-124:43)
      ) [)] (124:43-124:44)
      } [}] (124:44-124:45)
      identifier [onMouseLeave] (125:6-125:18)
      = [=] (125:18-125:19)
      { [{] (125:19-125:20)
      ( [(] (125:20-125:21)
      ) [)] (125:21-125:22)
      => [=>] (125:23-125:25)
      identifier [setIsFocused] (125:26-125:38)
      ( [(] (125:38-125:39)
      false [false] (125:39-125:44)
      ) [)] (125:44-125:45)
      } [}] (125:45-125:46)
    > [>] (126:4-126:5)
  ERROR [{getComponent()}
    </div>
  );
};

const DashboardOverview =] (127:6-132:25)
    { [{] (127:6-127:7)
    identifier [getComponent] (127:7-127:19)
    formal_parameters [()] (127:19-127:21)
      ( [(] (127:19-127:20)
      ) [)] (127:20-127:21)
    } [}] (127:21-127:22)
    < [<] (128:4-128:5)
    / [/] (128:5-128:6)
    identifier [div] (128:6-128:9)
    > [>] (128:9-128:10)
    ) [)] (129:2-129:3)
    ; [;] (129:3-129:4)
    } [}] (130:0-130:1)
    ; [;] (130:1-130:2)
    const [const] (132:0-132:5)
    identifier [DashboardOverview] (132:6-132:23)
    = [=] (132:24-132:25)
  formal_parameters [({ items })] (132:26-132:37)
    ( [(] (132:26-132:27)
    required_parameter [{ items }] (132:27-132:36)
      object_pattern [{ items }] (132:27-132:36)
        { [{] (132:27-132:28)
        shorthand_property_identifier_pattern [items] (132:29-132:34)
        } [}] (132:35-132:36)
    ) [)] (132:36-132:37)
  => [=>] (132:38-132:40)
  { [{] (132:41-132:42)
  comment [// const items = [] (133:2-133:20)
  comment [//   {] (134:2-134:8)
  comment [//     id: 1,] (135:2-135:15)
  comment [//     type: 'painPoints',] (136:2-136:28)
  comment [//     height: 'h-64',] (137:2-137:24)
  comment [//     width: 'col-span-2',] (138:2-138:29)
  comment [//     data: [] (139:2-139:16)
  comment [//       { id: 1, source: 'Reddit', text: "Can't find fresh coffee beans in my area", frequency: 75 },] (140:2-140:104)
  comment [//       { id: 2, source: 'Quora', text: "Tired of inconsistent coffee quality", frequency: 82 },] (141:2-141:99)
  comment [//       { id: 3, source: 'Reviews', text: "Regular grocery store coffee goes stale", frequency: 68 }] (142:2-142:103)
  comment [//     ]] (143:2-143:10)
  comment [//   },] (144:2-144:9)
  comment [//   {] (145:2-145:8)
  comment [//     id: 2,] (146:2-146:15)
  comment [//     type: 'strategic',] (147:2-147:27)
  comment [//     height: 'h-[400px]',] (148:2-148:29)
  comment [//     width: 'col-span-1',] (149:2-149:29)
  comment [//     data: [] (150:2-150:16)
  comment [//       { id: 1, category: 'USP', text: 'Emphasize bean freshness date on packaging' },] (151:2-151:90)
  comment [//       { id: 2, category: 'Messaging', text: 'Focus on "expert-curated" selection process' },] (152:2-152:97)
  comment [//       { id: 3, category: 'Target', text: 'Target urban professionals aged 25-40' },] (153:2-153:88)
  comment [//       { id: 4, category: 'Channel', text: 'Leverage Instagram and LinkedIn for brand positioning' }] (154:2-154:104)
  comment [//     ]] (155:2-155:10)
  comment [//   },] (156:2-156:9)
  comment [//   {] (157:2-157:8)
  comment [//     id: 3,] (158:2-158:15)
  comment [//     type: 'triggers',] (159:2-159:26)
  comment [//     height: 'min-h-72',] (160:2-160:28)
  comment [//     width: 'col-span-3',] (161:2-161:29)
  comment [//     data: [] (162:2-162:16)
  comment [//       { id: 1, type: 'Emotional', text: 'Fear of missing perfect morning coffee', strength: 0.9 },] (163:2-163:103)
  comment [//       { id: 2, type: 'Practical', text: 'Desire for convenience', strength: 0.85 },] (164:2-164:88)
  comment [//       { id: 3, type: 'Social', text: 'Status of being a coffee connoisseur', strength: 0.75 }] (165:2-165:98)
  comment [//     ]] (166:2-166:10)
  comment [//   }] (167:2-167:8)
  comment [// ];] (168:2-168:7)
  return [return] (172:2-172:8)
  ( [(] (172:9-172:10)
  type_arguments [<div] (173:4-173:8)
    < [<] (173:4-173:5)
    type_identifier [div] (173:5-173:8)
    > [] (173:8-173:8)
  identifier [className] (173:9-173:18)
  = [=] (173:18-173:19)
  string ["
      w-[90vw]
      h-[90vh]
      mx-auto
      my-8
      border
      border-white
      rounded-lg
      backdrop-blur-xl
      bg-background/60
      shadow-[0_0_25px_rgba(255,255,255,0.6)]
      border-white/60
      overflow-auto
    "] (173:19-186:5)
    " ["] (173:19-173:20)
    string_fragment [
      w-[90vw]
      h-[90vh]
      mx-auto
      my-8
      border
      border-white
      rounded-lg
      backdrop-blur-xl
      bg-background/60
      shadow-[0_0_25px_rgba(255,255,255,0.6)]
      border-white/60
      overflow-auto
    ] (173:20-186:4)
    " ["] (186:4-186:5)
  > [>] (186:5-186:6)
  type_arguments [<div] (187:6-187:10)
    < [<] (187:6-187:7)
    type_identifier [div] (187:7-187:10)
    > [] (187:10-187:10)
  identifier [className] (187:11-187:20)
  = [=] (187:20-187:21)
  string ["p-6"] (187:21-187:26)
    " ["] (187:21-187:22)
    string_fragment [p-6] (187:22-187:25)
    " ["] (187:25-187:26)
  > [>] (187:26-187:27)
  type_arguments [<h1] (188:8-188:11)
    < [<] (188:8-188:9)
    type_identifier [h1] (188:9-188:11)
    > [] (188:11-188:11)
  identifier [className] (188:12-188:21)
  = [=] (188:21-188:22)
  string ["text-2xl font-semibold mb-6 text-center font-subheading text-grey/80"] (188:22-188:92)
    " ["] (188:22-188:23)
    string_fragment [text-2xl font-semibold mb-6 text-center font-subheading text-grey/80] (188:23-188:91)
    " ["] (188:91-188:92)
  > [>] (188:92-188:93)
  identifier [Overview] (189:10-189:18)
  < [<] (190:8-190:9)
  regex [/h1>] (190:9-190:13)
    / [/] (190:9-190:10)
    regex_pattern [h1>] (190:10-190:13)
    / [] (190:13-190:13)
  < [<] (191:8-191:9)
  ERROR [div] (191:9-191:12)
    identifier [div] (191:9-191:12)
  identifier [className] (191:13-191:22)
  = [=] (191:22-191:23)
  string ["grid grid-cols-3 gap-6"] (191:23-191:47)
    " ["] (191:23-191:24)
    string_fragment [grid grid-cols-3 gap-6] (191:24-191:46)
    " ["] (191:46-191:47)
  > [>] (191:47-191:48)
  member_expression [{items.map] (192:10-192:20)
    object [{items] (192:10-192:16)
      { [{] (192:10-192:11)
      shorthand_property_identifier [items] (192:11-192:16)
      } [] (192:16-192:16)
    . [.] (192:16-192:17)
    property_identifier [map] (192:17-192:20)
  ( [(] (192:20-192:21)
  identifier [item] (192:21-192:25)
  => [=>] (192:26-192:28)
  ( [(] (192:29-192:30)
  ERROR [<DashboardCard key={item.id} item={item} />
          ))}
        </] (193:12-195:10)
    type_parameters [<DashboardCard key={item.id} item={item} />] (193:12-193:55)
      < [<] (193:12-193:13)
      type_parameter [DashboardCard key={item.id}] (193:13-193:40)
        type_identifier [DashboardCard] (193:13-193:26)
        ERROR [key] (193:27-193:30)
          identifier [key] (193:27-193:30)
        default_type [={item.id}] (193:30-193:40)
          = [=] (193:30-193:31)
          object_type [{item.id}] (193:31-193:40)
            { [{] (193:31-193:32)
            ERROR [item.] (193:32-193:37)
              property_identifier [item] (193:32-193:36)
              . [.] (193:36-193:37)
            property_signature [id] (193:37-193:39)
              property_identifier [id] (193:37-193:39)
            } [}] (193:39-193:40)
      ERROR [item={item} /] (193:41-193:54)
        identifier [item] (193:41-193:45)
        = [=] (193:45-193:46)
        { [{] (193:46-193:47)
        identifier [item] (193:47-193:51)
        } [}] (193:51-193:52)
        / [/] (193:53-193:54)
      > [>] (193:54-193:55)
    ) [)] (194:10-194:11)
    ) [)] (194:11-194:12)
    } [}] (194:12-194:13)
    < [<] (195:8-195:9)
    / [/] (195:9-195:10)
  identifier [div] (195:10-195:13)
  > [>] (195:13-195:14)
  type_arguments [<div] (196:8-196:12)
    < [<] (196:8-196:9)
    type_identifier [div] (196:9-196:12)
    > [] (196:12-196:12)
  identifier [className] (196:13-196:22)
  = [=] (196:22-196:23)
  string ['w-[75%] ml-[400px] my-10'] (196:23-196:49)
    ' ['] (196:23-196:24)
    string_fragment [w-[75%] ml-[400px] my-10] (196:24-196:48)
    ' ['] (196:48-196:49)
  > [>] (196:49-196:50)
  type_arguments [<GlowingInput] (197:8-197:21)
    < [<] (197:8-197:9)
    type_identifier [GlowingInput] (197:9-197:21)
    > [] (197:21-197:21)
  identifier [placeholder] (197:22-197:33)
  = [=] (197:33-197:34)
  string ['Enter your social media link...'] (197:34-197:67)
    ' ['] (197:34-197:35)
    string_fragment [Enter your social media link...] (197:35-197:66)
    ' ['] (197:66-197:67)
  / [/] (197:67-197:68)
  ERROR [>] (197:68-197:69)
    > [>] (197:68-197:69)
  type_arguments [</div>] (198:8-198:14)
    < [<] (198:8-198:9)
    ERROR [/] (198:9-198:10)
      / [/] (198:9-198:10)
    type_identifier [div] (198:10-198:13)
    > [>] (198:13-198:14)
  type_assertion [</div>
    </div>
  );
};

export default DashboardOverview] (199:6-204:32)
    type_arguments [</div>] (199:6-199:12)
      < [<] (199:6-199:7)
      ERROR [/] (199:7-199:8)
        / [/] (199:7-199:8)
      type_identifier [div] (199:8-199:11)
      > [>] (199:11-199:12)
    ERROR [</div>
  );
};

export default] (200:4-204:14)
      type_parameters [</div>] (200:4-200:10)
        < [<] (200:4-200:5)
        ERROR [/] (200:5-200:6)
          / [/] (200:5-200:6)
        type_parameter [div] (200:6-200:9)
          type_identifier [div] (200:6-200:9)
        > [>] (200:9-200:10)
      ) [)] (201:2-201:3)
      ; [;] (201:3-201:4)
      } [}] (202:0-202:1)
      ; [;] (202:1-202:2)
      export [export] (204:0-204:6)
      identifier [default] (204:7-204:14)
    identifier [DashboardOverview] (204:15-204:32)
  ; [;] (204:32-204:33)
